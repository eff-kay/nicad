<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="82" endline="89">
{
    ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio:  %s (%s-%s): %s", f->frec->name, (APR_BUCKET_IS_METADATA (b)) ? "metadata" : "data", b->type->name, "error reading data");
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="104" endline="132">
{
    apr_bucket *b;
    apr_status_t ret;
    conn_rec *c = f->c;
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (c->base_server->module_config, &dumpio_module);
    ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio: %s [%s-%s] %" APR_OFF_T_FMT " readbytes", f->frec->name, whichmode (mode), ((block) == APR_BLOCK_READ) ? "blocking" : "nonblocking", readbytes);
    ret = ap_get_brigade (f->next, bb, mode, block, readbytes);
    if (ret == APR_SUCCESS) {
        for (b = APR_BRIGADE_FIRST (bb); b != APR_BRIGADE_SENTINEL (bb); b = APR_BUCKET_NEXT (b)) {
            dumpit (f, b);
        }
    }
    else {
        ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio: %s - %d", f->frec->name, ret);
    }
    return APR_SUCCESS;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="122" endline="126">
{
    for (b = APR_BRIGADE_FIRST (bb); b != APR_BRIGADE_SENTINEL (bb); b = APR_BUCKET_NEXT (b)) {
        dumpit (f, b);
    }
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="123" endline="125">
{
    dumpit (f, b);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="126" endline="129">
{
    ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio: %s - %d", f->frec->name, ret);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="135" endline="156">
{
    apr_bucket *b;
    conn_rec *c = f->c;
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (c->base_server->module_config, &dumpio_module);
    ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio: %s", f->frec->name);
    for (b = APR_BRIGADE_FIRST (bb); b != APR_BRIGADE_SENTINEL (bb); b = APR_BUCKET_NEXT (b)) {
        if (APR_BUCKET_IS_EOS (b)) {
            apr_bucket *flush = apr_bucket_flush_create (f->c->bucket_alloc);
            APR_BUCKET_INSERT_BEFORE (b, flush);
        }
        dumpit (f, b);
    }
    return ap_pass_brigade (f->next, bb);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="144" endline="153">
{
    if (APR_BUCKET_IS_EOS (b)) {
        apr_bucket *flush = apr_bucket_flush_create (f->c->bucket_alloc);
        APR_BUCKET_INSERT_BEFORE (b, flush);
    }
    dumpit (f, b);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="148" endline="151">
{
    apr_bucket *flush = apr_bucket_flush_create (f->c->bucket_alloc);
    APR_BUCKET_INSERT_BEFORE (b, flush);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="159" endline="169">
{
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (c->base_server->module_config, &dumpio_module);
    if (ptr->enable_input)
        ap_add_input_filter ("DUMPIO_IN", NULL, NULL, c);
    if (ptr->enable_output)
        ap_add_output_filter ("DUMPIO_OUT", NULL, NULL, c);
    return OK;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="172" endline="183">
{
    ap_register_output_filter ("DUMPIO_OUT", dumpio_output_filter, NULL, AP_FTYPE_CONNECTION +3);
    ap_register_input_filter ("DUMPIO_IN", dumpio_input_filter, NULL, AP_FTYPE_CONNECTION +3);
    ap_hook_pre_connection (dumpio_pre_conn, NULL, NULL, APR_HOOK_MIDDLE);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="186" endline="191">
{
    dumpio_conf_t *ptr = apr_pcalloc (p, sizeof *ptr);
    ptr->enable_input = ptr->enable_output = 0;
    ptr->loglevel = APLOG_DEBUG;
    return ptr;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="194" endline="201">
{
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (cmd->server->module_config, &dumpio_module);
    ptr->enable_input = arg;
    return NULL;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="204" endline="211">
{
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (cmd->server->module_config, &dumpio_module);
    ptr->enable_output = arg;
    return NULL;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="214" endline="261">
{
    char *str;
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (cmd->server->module_config, &dumpio_module);
    const char *err = ap_check_cmd_context (cmd, NOT_IN_DIR_LOC_FILE | NOT_IN_LIMIT);
    if (err != NULL) {
        return err;
    }
    if ((str = ap_getword_conf (cmd->pool, &arg))) {
        if (!strcasecmp (str, "emerg")) {
            ptr->loglevel = APLOG_EMERG;
        }
        else if (!strcasecmp (str, "alert")) {
            ptr->loglevel = APLOG_ALERT;
        }
        else if (!strcasecmp (str, "crit")) {
            ptr->loglevel = APLOG_CRIT;
        }
        else if (!strcasecmp (str, "error")) {
            ptr->loglevel = APLOG_ERR;
        }
        else if (!strcasecmp (str, "warn")) {
            ptr->loglevel = APLOG_WARNING;
        }
        else if (!strcasecmp (str, "notice")) {
            ptr->loglevel = APLOG_NOTICE;
        }
        else if (!strcasecmp (str, "info")) {
            ptr->loglevel = APLOG_INFO;
        }
        else if (!strcasecmp (str, "debug")) {
            ptr->loglevel = APLOG_DEBUG;
        }
        else {
            return "DumpIOLogLevel requires level keyword: one of " "emerg/alert/crit/error/warn/notice/info/debug";
        }
    }
    else {
        return "DumpIOLogLevel requires level keyword";
    }
    return NULL;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="222" endline="224">
{
    return err;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="226" endline="255">
{
    if (!strcasecmp (str, "emerg")) {
        ptr->loglevel = APLOG_EMERG;
    }
    else if (!strcasecmp (str, "alert")) {
        ptr->loglevel = APLOG_ALERT;
    }
    else if (!strcasecmp (str, "crit")) {
        ptr->loglevel = APLOG_CRIT;
    }
    else if (!strcasecmp (str, "error")) {
        ptr->loglevel = APLOG_ERR;
    }
    else if (!strcasecmp (str, "warn")) {
        ptr->loglevel = APLOG_WARNING;
    }
    else if (!strcasecmp (str, "notice")) {
        ptr->loglevel = APLOG_NOTICE;
    }
    else if (!strcasecmp (str, "info")) {
        ptr->loglevel = APLOG_INFO;
    }
    else if (!strcasecmp (str, "debug")) {
        ptr->loglevel = APLOG_DEBUG;
    }
    else {
        return "DumpIOLogLevel requires level keyword: one of " "emerg/alert/crit/error/warn/notice/info/debug";
    }
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="227" endline="229">
{
    ptr->loglevel = APLOG_EMERG;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="230" endline="232">
{
    ptr->loglevel = APLOG_ALERT;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="233" endline="235">
{
    ptr->loglevel = APLOG_CRIT;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="236" endline="238">
{
    ptr->loglevel = APLOG_ERR;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="239" endline="241">
{
    ptr->loglevel = APLOG_WARNING;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="242" endline="244">
{
    ptr->loglevel = APLOG_NOTICE;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="245" endline="247">
{
    ptr->loglevel = APLOG_INFO;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="248" endline="250">
{
    ptr->loglevel = APLOG_DEBUG;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="251" endline="254">
{
    return "DumpIOLogLevel requires level keyword: one of " "emerg/alert/crit/error/warn/notice/info/debug";
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="256" endline="258">
{
    return "DumpIOLogLevel requires level keyword";
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="46" endline="54">
{
    bucketeer_filter_config_t *c = apr_pcalloc (p, sizeof *c);
    c->bucketdelimiter = 0x02;
    c->passdelimiter = 0x10;
    c->flushdelimiter = 0x06;
    return c;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="63" endline="164">
{
    apr_bucket *e;
    request_rec *r = f->r;
    bucketeer_ctx_t *ctx = f->ctx;
    bucketeer_filter_config_t *c;
    c = ap_get_module_config (r->server->module_config, &bucketeer_module);
    if (!ctx) {
        if (!r->content_type || strncmp (r->content_type, "text/", 5)) {
            ap_remove_output_filter (f);
            return ap_pass_brigade (f->next, bb);
        }
        ctx = f->ctx = apr_pcalloc (f->r->pool, sizeof (*ctx));
        ctx->bb = apr_brigade_create (f->r->pool, f->c->bucket_alloc);
        apr_table_unset (f->r->headers_out, "Content-Length");
    }
    for (e = APR_BRIGADE_FIRST (bb); e != APR_BRIGADE_SENTINEL (bb); e = APR_BUCKET_NEXT (e)) {
        const char *data;
        apr_size_t len, i, lastpos;
        if (APR_BUCKET_IS_EOS (e)) {
            APR_BUCKET_REMOVE (e);
            APR_BRIGADE_INSERT_TAIL (ctx->bb, e);
            return ap_pass_brigade (f->next, ctx->bb);
        }
        if (APR_BUCKET_IS_FLUSH (e)) {
            continue;
        }
        if (APR_BUCKET_IS_METADATA (e)) {
            apr_bucket *cpy;
            apr_bucket_copy (e, &cpy);
            APR_BRIGADE_INSERT_TAIL (ctx->bb, cpy);
            continue;
        }
        apr_bucket_read (e, &data, &len, APR_BLOCK_READ);
        if (len > 0) {
            lastpos = 0;
            for (i = 0; i < len; i++) {
                if (data[i] == c->flushdelimiter || data[i] == c->bucketdelimiter || data[i] == c->passdelimiter) {
                    apr_bucket *p;
                    if (i - lastpos > 0) {
                        p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
                        APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
                    }
                    lastpos = i + 1;
                    if (data[i] == c->flushdelimiter) {
                        p = apr_bucket_flush_create (f->c->bucket_alloc);
                        APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
                    }
                    if (data[i] == c->flushdelimiter || data[i] == c->passdelimiter) {
                        ap_pass_brigade (f->next, ctx->bb);
                    }
                }
            }
            if (lastpos < i) {
                apr_bucket *p;
                p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
                lastpos = i;
                APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
            }
        }
    }
    return APR_SUCCESS;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="72" endline="82">
{
    if (!r->content_type || strncmp (r->content_type, "text/", 5)) {
        ap_remove_output_filter (f);
        return ap_pass_brigade (f->next, bb);
    }
    ctx = f->ctx = apr_pcalloc (f->r->pool, sizeof (*ctx));
    ctx->bb = apr_brigade_create (f->r->pool, f->c->bucket_alloc);
    apr_table_unset (f->r->headers_out, "Content-Length");
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="73" endline="76">
{
    ap_remove_output_filter (f);
    return ap_pass_brigade (f->next, bb);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="87" endline="161">
{
    const char *data;
    apr_size_t len, i, lastpos;
    if (APR_BUCKET_IS_EOS (e)) {
        APR_BUCKET_REMOVE (e);
        APR_BRIGADE_INSERT_TAIL (ctx->bb, e);
        return ap_pass_brigade (f->next, ctx->bb);
    }
    if (APR_BUCKET_IS_FLUSH (e)) {
        continue;
    }
    if (APR_BUCKET_IS_METADATA (e)) {
        apr_bucket *cpy;
        apr_bucket_copy (e, &cpy);
        APR_BRIGADE_INSERT_TAIL (ctx->bb, cpy);
        continue;
    }
    apr_bucket_read (e, &data, &len, APR_BLOCK_READ);
    if (len > 0) {
        lastpos = 0;
        for (i = 0; i < len; i++) {
            if (data[i] == c->flushdelimiter || data[i] == c->bucketdelimiter || data[i] == c->passdelimiter) {
                apr_bucket *p;
                if (i - lastpos > 0) {
                    p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
                    APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
                }
                lastpos = i + 1;
                if (data[i] == c->flushdelimiter) {
                    p = apr_bucket_flush_create (f->c->bucket_alloc);
                    APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
                }
                if (data[i] == c->flushdelimiter || data[i] == c->passdelimiter) {
                    ap_pass_brigade (f->next, ctx->bb);
                }
            }
        }
        if (lastpos < i) {
            apr_bucket *p;
            p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
            lastpos = i;
            APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
        }
    }
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="91" endline="99">
{
    APR_BUCKET_REMOVE (e);
    APR_BRIGADE_INSERT_TAIL (ctx->bb, e);
    return ap_pass_brigade (f->next, ctx->bb);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="101" endline="107">
{
    continue;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="109" endline="115">
{
    apr_bucket *cpy;
    apr_bucket_copy (e, &cpy);
    APR_BRIGADE_INSERT_TAIL (ctx->bb, cpy);
    continue;
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="120" endline="160">
{
    lastpos = 0;
    for (i = 0; i < len; i++) {
        if (data[i] == c->flushdelimiter || data[i] == c->bucketdelimiter || data[i] == c->passdelimiter) {
            apr_bucket *p;
            if (i - lastpos > 0) {
                p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
                APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
            }
            lastpos = i + 1;
            if (data[i] == c->flushdelimiter) {
                p = apr_bucket_flush_create (f->c->bucket_alloc);
                APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
            }
            if (data[i] == c->flushdelimiter || data[i] == c->passdelimiter) {
                ap_pass_brigade (f->next, ctx->bb);
            }
        }
    }
    if (lastpos < i) {
        apr_bucket *p;
        p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
        lastpos = i;
        APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
    }
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="122" endline="147">
{
    if (data[i] == c->flushdelimiter || data[i] == c->bucketdelimiter || data[i] == c->passdelimiter) {
        apr_bucket *p;
        if (i - lastpos > 0) {
            p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
            APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
        }
        lastpos = i + 1;
        if (data[i] == c->flushdelimiter) {
            p = apr_bucket_flush_create (f->c->bucket_alloc);
            APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
        }
        if (data[i] == c->flushdelimiter || data[i] == c->passdelimiter) {
            ap_pass_brigade (f->next, ctx->bb);
        }
    }
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="125" endline="146">
{
    apr_bucket *p;
    if (i - lastpos > 0) {
        p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
        APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
    }
    lastpos = i + 1;
    if (data[i] == c->flushdelimiter) {
        p = apr_bucket_flush_create (f->c->bucket_alloc);
        APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
    }
    if (data[i] == c->flushdelimiter || data[i] == c->passdelimiter) {
        ap_pass_brigade (f->next, ctx->bb);
    }
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="127" endline="135">
{
    p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
    APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="137" endline="140">
{
    p = apr_bucket_flush_create (f->c->bucket_alloc);
    APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="142" endline="145">
{
    ap_pass_brigade (f->next, ctx->bb);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="149" endline="159">
{
    apr_bucket *p;
    p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
    lastpos = i;
    APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
}

</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="167" endline="170">
{
    ap_register_output_filter (bucketeerFilterName, bucketeer_out_filter, NULL, AP_FTYPE_RESOURCE -1);
}

</source>
