<source file="systems/py/Django/trunk/tests/modeltests/mutually_referential/models.py.pyindent" startline="10" endline="14">
INDENT
    name = CharField(max_length = 100)

    bestchild = ForeignKey("Child", null = True, related_name = "favoured_by")
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/mutually_referential/models.py.pyindent" startline="16" endline="20">
INDENT
    name = CharField(max_length = 100)

    parent = ForeignKey("mutually_referential.Parent")
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="32" endline="38">
INDENT
    name = models.CharField(max_length = 20)
    slug = models.SlugField(max_length = 20)
    url = models.CharField('The URL', max_length = 40)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="37" endline="38">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="40" endline="44">
INDENT
    name = models.CharField(max_length = 50, help_text = 'Use both first and last names.')
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="43" endline="44">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="46" endline="63">
INDENT
    headline = models.CharField(max_length = 50)
    slug = models.SlugField()
    pub_date = models.DateField()
    created = models.DateField(editable = False)
    writer = models.ForeignKey(Writer)
    article = models.TextField()
    categories = models.ManyToManyField(Category, blank = True)
    status = models.PositiveIntegerField(choices = ARTICLE_STATUS, blank = True, null = True)
    def save(self) :
    INDENT
        import datetime
        if not self.id :
        INDENT
            self.created = datetime.date.today()
        DEDENT
        return super(Article, self).save()
    DEDENT
    def __unicode__(self) :
    INDENT
        return self.headline
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="56" endline="60">
INDENT
    import datetime
    if not self.id :
    INDENT
        self.created = datetime.date.today()
    DEDENT
    return super(Article, self).save()
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="58" endline="58">
INDENT
    self.created = datetime.date.today()
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="62" endline="63">
INDENT
    return self.headline
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="65" endline="66">
INDENT
    article = models.OneToOneField(Article)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="68" endline="69">
INDENT
    article = models.OneToOneField(Article, parent_link = True)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="71" endline="72">
INDENT
    score = models.IntegerField()
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="74" endline="79">
INDENT
    writer = models.OneToOneField(Writer, primary_key = True)
    age = models.PositiveIntegerField()
    def __unicode__(self) :
    INDENT
        return "%s is %s" % (self.writer, self.age)
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="78" endline="79">
INDENT
    return "%s is %s" % (self.writer, self.age)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="82" endline="87">
INDENT
    phone = PhoneNumberField()
    description = models.CharField(max_length = 20)
    def __unicode__(self) :
    INDENT
        return self.phone
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="86" endline="87">
INDENT
    return self.phone
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="89" endline="94">
INDENT
    description = models.CharField(max_length = 20)
    file = models.FileField(storage = temp_storage, upload_to = 'tests', max_length = 15)
    def __unicode__(self) :
    INDENT
        return self.description
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="93" endline="94">
INDENT
    return self.description
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="96" endline="135">
INDENT
    from PIL import Image, _imaging
    test_images = True
    class ImageFile(models.Model) :
    INDENT
        def custom_upload_path(self, filename) :
        INDENT
            path = self.path or 'tests'
            return '%s/%s' % (path, filename)
        DEDENT
        description = models.CharField(max_length = 20)

        width = models.IntegerField(editable = False)
        height = models.IntegerField(editable = False)
        image = models.ImageField(storage = temp_storage, upload_to = custom_upload_path,
            width_field = 'width', height_field = 'height')
        path = models.CharField(max_length = 16, blank = True, default = '')
        def __unicode__(self) :
        INDENT
            return self.description
        DEDENT
    DEDENT
    class OptionalImageFile(models.Model) :
    INDENT
        def custom_upload_path(self, filename) :
        INDENT
            path = self.path or 'tests'
            return '%s/%s' % (path, filename)
        DEDENT
        description = models.CharField(max_length = 20)
        image = models.ImageField(storage = temp_storage, upload_to = custom_upload_path,
            width_field = 'width', height_field = 'height',
            blank = True, null = True)
        width = models.IntegerField(editable = False, null = True)
        height = models.IntegerField(editable = False, null = True)
        path = models.CharField(max_length = 16, blank = True, default = '')
        def __unicode__(self) :
        INDENT
            return self.description
        DEDENT
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="104" endline="120">
INDENT
    def custom_upload_path(self, filename) :
    INDENT
        path = self.path or 'tests'
        return '%s/%s' % (path, filename)
    DEDENT
    description = models.CharField(max_length = 20)

    width = models.IntegerField(editable = False)
    height = models.IntegerField(editable = False)
    image = models.ImageField(storage = temp_storage, upload_to = custom_upload_path,
        width_field = 'width', height_field = 'height')
    path = models.CharField(max_length = 16, blank = True, default = '')
    def __unicode__(self) :
    INDENT
        return self.description
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="105" endline="107">
INDENT
    path = self.path or 'tests'
    return '%s/%s' % (path, filename)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="119" endline="120">
INDENT
    return self.description
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="122" endline="135">
INDENT
    def custom_upload_path(self, filename) :
    INDENT
        path = self.path or 'tests'
        return '%s/%s' % (path, filename)
    DEDENT
    description = models.CharField(max_length = 20)
    image = models.ImageField(storage = temp_storage, upload_to = custom_upload_path,
        width_field = 'width', height_field = 'height',
        blank = True, null = True)
    width = models.IntegerField(editable = False, null = True)
    height = models.IntegerField(editable = False, null = True)
    path = models.CharField(max_length = 16, blank = True, default = '')
    def __unicode__(self) :
    INDENT
        return self.description
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="123" endline="125">
INDENT
    path = self.path or 'tests'
    return '%s/%s' % (path, filename)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="135" endline="135">
INDENT
    return self.description
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="137" endline="138">
INDENT
    test_images = False
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="140" endline="144">
INDENT
    field = models.CommaSeparatedIntegerField(max_length = 20)
    def __unicode__(self) :
    INDENT
        return self.field
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="143" endline="144">
INDENT
    return self.field
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="146" endline="150">
INDENT
    slug = models.SlugField(unique = True)
    def __unicode__(self) :
    INDENT
        return self.slug
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="149" endline="150">
INDENT
    return self.slug
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="152" endline="160">
INDENT
    price = models.DecimalField(max_digits = 10, decimal_places = 2)
    quantity = models.PositiveIntegerField()
    def __unicode__(self) :
    INDENT
        return u"%s for %s" % (self.quantity, self.price)
    DEDENT
    class Meta :
    INDENT
        unique_together = (('price', 'quantity'),)
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="156" endline="157">
INDENT
    return u"%s for %s" % (self.quantity, self.price)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="159" endline="160">
INDENT
    unique_together = (('price', 'quantity'),)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="162" endline="163">
INDENT
    status = models.CharField(max_length = 2, choices = ARTICLE_STATUS_CHAR, blank = True, null = True)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="165" endline="171">
INDENT
    barcode = models.PositiveIntegerField(unique = True)
    parent = models.ForeignKey('self', to_field = 'barcode', blank = True, null = True)
    name = models.CharField(blank = False, max_length = 20)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="170" endline="171">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="173" endline="179">
INDENT
    title = models.CharField(max_length = 40)
    author = models.ForeignKey(Writer, blank = True, null = True)
    special_id = models.IntegerField(blank = True, null = True, unique = True)
    class Meta :
    INDENT
        unique_together = ('title', 'author')
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="178" endline="179">
INDENT
    unique_together = ('title', 'author')
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="181" endline="188">
INDENT
    key = models.CharField(max_length = 20, primary_key = True)
    desc = models.CharField(max_length = 20, blank = True, unique = True)
    class Meta :
    INDENT
        unique_together = ('key', 'desc')
    DEDENT
    def __unicode__(self) :
    INDENT
        return self.key
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="184" endline="185">
INDENT
    unique_together = ('key', 'desc')
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="187" endline="188">
INDENT
    return self.key
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="190" endline="197">
INDENT
    title = models.CharField(max_length = 50, unique_for_date = 'posted', blank = True)
    slug = models.CharField(max_length = 50, unique_for_year = 'posted', blank = True)
    subtitle = models.CharField(max_length = 50, unique_for_month = 'posted', blank = True)
    posted = models.DateField()
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="196" endline="197">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="199" endline="203">
INDENT
    biggie = models.BigIntegerField()
    def __unicode__(self) :
    INDENT
        return unicode(self.biggie)
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="202" endline="203">
INDENT
    return unicode(self.biggie)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/model_forms/models.py.pyindent" startline="1176" endline="1339">
INDENT
    __test__ ['API_TESTS'] += """
# ImageField ###################################################################

# ImageField and FileField are nearly identical, but they differ slighty when
# it comes to validation. This specifically tests that #6302 is fixed for
# both file fields and image fields.

>>> class ImageFileForm(ModelForm):
...     class Meta:
...         model = ImageFile

>>> image_data = open(os.path.join(os.path.dirname(__file__), "test.png"), 'rb').read()
>>> image_data2 = open(os.path.join(os.path.dirname(__file__), "test2.png"), 'rb').read()

>>> f = ImageFileForm(data={'description': u'An image'}, files={'image': SimpleUploadedFile('test.png', image_data)})
>>> f.is_valid()
True
>>> type(f.cleaned_data['image'])
<class 'django.core.files.uploadedfile.SimpleUploadedFile'>
>>> instance = f.save()
>>> instance.image
<...FieldFile: tests/test.png>
>>> instance.width
16
>>> instance.height
16

# Delete the current file since this is not done by Django, but don't save
# because the dimension fields are not null=True.
>>> instance.image.delete(save=False)

>>> f = ImageFileForm(data={'description': u'An image'}, files={'image': SimpleUploadedFile('test.png', image_data)})
>>> f.is_valid()
True
>>> type(f.cleaned_data['image'])
<class 'django.core.files.uploadedfile.SimpleUploadedFile'>
>>> instance = f.save()
>>> instance.image
<...FieldFile: tests/test.png>
>>> instance.width
16
>>> instance.height
16

# Edit an instance that already has the (required) image defined in the model. This will not
# save the image again, but leave it exactly as it is.

>>> f = ImageFileForm(data={'description': u'Look, it changed'}, instance=instance)
>>> f.is_valid()
True
>>> f.cleaned_data['image']
<...FieldFile: tests/test.png>
>>> instance = f.save()
>>> instance.image
<...FieldFile: tests/test.png>
>>> instance.height
16
>>> instance.width
16

# Delete the current file since this is not done by Django, but don't save
# because the dimension fields are not null=True.
>>> instance.image.delete(save=False)

# Override the file by uploading a new one.

>>> f = ImageFileForm(data={'description': u'Changed it'}, files={'image': SimpleUploadedFile('test2.png', image_data2)}, instance=instance)
>>> f.is_valid()
True
>>> instance = f.save()
>>> instance.image
<...FieldFile: tests/test2.png>
>>> instance.height
32
>>> instance.width
48

# Delete the current file since this is not done by Django, but don't save
# because the dimension fields are not null=True.
>>> instance.image.delete(save=False)
>>> instance.delete()

>>> f = ImageFileForm(data={'description': u'Changed it'}, files={'image': SimpleUploadedFile('test2.png', image_data2)})
>>> f.is_valid()
True
>>> instance = f.save()
>>> instance.image
<...FieldFile: tests/test2.png>
>>> instance.height
32
>>> instance.width
48

# Delete the current file since this is not done by Django, but don't save
# because the dimension fields are not null=True.
>>> instance.image.delete(save=False)
>>> instance.delete()

# Test the non-required ImageField

>>> class OptionalImageFileForm(ModelForm):
...     class Meta:
...         model = OptionalImageFile

>>> f = OptionalImageFileForm(data={'description': u'Test'})
>>> f.is_valid()
True
>>> instance = f.save()
>>> instance.image
<...FieldFile: None>
>>> instance.width
>>> instance.height

>>> f = OptionalImageFileForm(data={'description': u'And a final one'}, files={'image': SimpleUploadedFile('test3.png', image_data)}, instance=instance)
>>> f.is_valid()
True
>>> instance = f.save()
>>> instance.image
<...FieldFile: tests/test3.png>
>>> instance.width
16
>>> instance.height
16

# Editing the instance without re-uploading the image should not affect the image or its width/height properties
>>> f = OptionalImageFileForm(data={'description': u'New Description'}, instance=instance)
>>> f.is_valid()
True
>>> instance = f.save()
>>> instance.description
u'New Description'
>>> instance.image
<...FieldFile: tests/test3.png>
>>> instance.width
16
>>> instance.height
16

# Delete the current file since this is not done by Django.
>>> instance.image.delete()
>>> instance.delete()

>>> f = OptionalImageFileForm(data={'description': u'And a final one'}, files={'image': SimpleUploadedFile('test4.png', image_data2)})
>>> f.is_valid()
True
>>> instance = f.save()
>>> instance.image
<...FieldFile: tests/test4.png>
>>> instance.width
48
>>> instance.height
32
>>> instance.delete()

# Test callable upload_to behavior that's dependent on the value of another field in the model
>>> f = ImageFileForm(data={'description': u'And a final one', 'path': 'foo'}, files={'image': SimpleUploadedFile('test4.png', image_data)})
>>> f.is_valid()
True
>>> instance = f.save()
>>> instance.image
<...FieldFile: foo/test4.png>
>>> instance.delete()
"""
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="5" endline="5">
INDENT
    sorted
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="7" endline="8">
INDENT
    from django.utils.itercompat import sorted
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="10" endline="16">
INDENT
    name = models.CharField(max_length = 100)
    age = models.IntegerField()
    friends = models.ManyToManyField('self', blank = True)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="15" endline="16">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="18" endline="23">
INDENT
    name = models.CharField(max_length = 255)
    num_awards = models.IntegerField()
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="22" endline="23">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="25" endline="37">
INDENT
    isbn = models.CharField(max_length = 9)
    name = models.CharField(max_length = 255)
    pages = models.IntegerField()
    rating = models.FloatField()
    price = models.DecimalField(decimal_places = 2, max_digits = 6)
    authors = models.ManyToManyField(Author)
    contact = models.ForeignKey(Author, related_name = 'book_contact_set')
    publisher = models.ForeignKey(Publisher)
    pubdate = models.DateField()
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="36" endline="37">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="39" endline="48">
INDENT
    name = models.CharField(max_length = 255)
    books = models.ManyToManyField(Book)
    original_opening = models.DateTimeField()
    friday_night_closing = models.TimeField()
    def __unicode__(self) :
    INDENT
        return self.name

    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/aggregation/models.py.pyindent" startline="45" endline="48">
INDENT
    return self.name

DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/pagination/models.py.pyindent" startline="12" endline="17">
INDENT
    headline = models.CharField(max_length = 100, default = 'Default headline')
    pub_date = models.DateTimeField()
    def __unicode__(self) :
    INDENT
        return self.headline
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/pagination/models.py.pyindent" startline="16" endline="17">
INDENT
    return self.headline
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/m2m_multiple/models.py.pyindent" startline="13" endline="19">
INDENT
    name = models.CharField(max_length = 20)
    class Meta :
    INDENT
        ordering = ('name',)
    DEDENT
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/m2m_multiple/models.py.pyindent" startline="15" endline="16">
INDENT
    ordering = ('name',)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/m2m_multiple/models.py.pyindent" startline="18" endline="19">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/m2m_multiple/models.py.pyindent" startline="21" endline="30">
INDENT
    headline = models.CharField(max_length = 50)
    pub_date = models.DateTimeField()
    primary_categories = models.ManyToManyField(Category, related_name = 'primary_article_set')
    secondary_categories = models.ManyToManyField(Category, related_name = 'secondary_article_set')
    class Meta :
    INDENT
        ordering = ('pub_date',)
    DEDENT
    def __unicode__(self) :
    INDENT
        return self.headline
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/m2m_multiple/models.py.pyindent" startline="26" endline="27">
INDENT
    ordering = ('pub_date',)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/m2m_multiple/models.py.pyindent" startline="29" endline="30">
INDENT
    return self.headline
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="15" endline="18">
INDENT
    name = models.CharField(max_length = 50)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="17" endline="18">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="20" endline="24">
INDENT
    name = models.CharField(max_length = 50)
    domain = models.ForeignKey(Domain)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="23" endline="24">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="26" endline="30">
INDENT
    name = models.CharField(max_length = 50)
    kingdom = models.ForeignKey(Kingdom)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="29" endline="30">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="32" endline="36">
INDENT
    name = models.CharField(max_length = 50)
    phylum = models.ForeignKey(Phylum)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="35" endline="36">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="38" endline="42">
INDENT
    name = models.CharField(max_length = 50)
    klass = models.ForeignKey(Klass)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="41" endline="42">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="44" endline="48">
INDENT
    name = models.CharField(max_length = 50)
    order = models.ForeignKey(Order)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="47" endline="48">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="50" endline="54">
INDENT
    name = models.CharField(max_length = 50)
    family = models.ForeignKey(Family)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="53" endline="54">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="56" endline="60">
INDENT
    name = models.CharField(max_length = 50)
    genus = models.ForeignKey(Genus)
    def __unicode__(self) :
    INDENT
        return self.name
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="59" endline="60">
INDENT
    return self.name
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="62" endline="77">
INDENT
    names = stringtree.split()
    models = [Domain, Kingdom, Phylum, Klass, Order, Family, Genus, Species]
    assert len(names) == len(models), (names, models)
    parent = None
    for name, model in zip(names, models) :
    INDENT
        try :
        INDENT
            obj = model.objects.get(name = name)
        DEDENT
        except model.DoesNotExist :
        INDENT
            obj = model(name = name)
        DEDENT
        if parent :
        INDENT
            setattr(obj, parent.__class__.__name__.lower(), parent)
        DEDENT
        obj.save()
        parent = obj
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="69" endline="77">
INDENT
    try :
    INDENT
        obj = model.objects.get(name = name)
    DEDENT
    except model.DoesNotExist :
    INDENT
        obj = model(name = name)
    DEDENT
    if parent :
    INDENT
        setattr(obj, parent.__class__.__name__.lower(), parent)
    DEDENT
    obj.save()
    parent = obj
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="70" endline="70">
INDENT
    obj = model.objects.get(name = name)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="72" endline="72">
INDENT
    obj = model(name = name)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/select_related/models.py.pyindent" startline="74" endline="74">
INDENT
    setattr(obj, parent.__class__.__name__.lower(), parent)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/custom_methods/models.py.pyindent" startline="11" endline="39">
INDENT
    headline = models.CharField(max_length = 100)
    pub_date = models.DateField()
    def __unicode__(self) :
    INDENT
        return self.headline
    DEDENT
    def was_published_today(self) :
    INDENT
        return self.pub_date == datetime.date.today()
    DEDENT
    def articles_from_same_day_1(self) :
    INDENT
        return Article.objects.filter(pub_date = self.pub_date).exclude(id = self.id)
    DEDENT
    def articles_from_same_day_2(self) :
    INDENT
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute("""
            SELECT id, headline, pub_date
            FROM custom_methods_article
            WHERE pub_date = %s
                AND id != %s""", [connection.ops.value_to_db_date(self.pub_date),
                self.id])

        return [self.__class__(* row) for row in cursor.fetchall()]
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/custom_methods/models.py.pyindent" startline="15" endline="16">
INDENT
    return self.headline
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/custom_methods/models.py.pyindent" startline="18" endline="19">
INDENT
    return self.pub_date == datetime.date.today()
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/custom_methods/models.py.pyindent" startline="21" endline="22">
INDENT
    return Article.objects.filter(pub_date = self.pub_date).exclude(id = self.id)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/custom_methods/models.py.pyindent" startline="24" endline="39">
INDENT
    from django.db import connection
    cursor = connection.cursor()
    cursor.execute("""
            SELECT id, headline, pub_date
            FROM custom_methods_article
            WHERE pub_date = %s
                AND id != %s""", [connection.ops.value_to_db_date(self.pub_date),
            self.id])

    return [self.__class__(* row) for row in cursor.fetchall()]
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/raw_query/models.py.pyindent" startline="4" endline="15">
INDENT
    first_name = models.CharField(max_length = 255)
    last_name = models.CharField(max_length = 255)
    dob = models.DateField()
    def __init__(self, * args, ** kwargs) :
    INDENT
        super(Author, self).__init__(* args, ** kwargs)

        for k in kwargs :
        INDENT
            assert k in [f.attname for f in self._meta.fields], "Author.__init__ got an unexpected paramater: %s" % k
        DEDENT
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/raw_query/models.py.pyindent" startline="9" endline="15">
INDENT
    super(Author, self).__init__(* args, ** kwargs)

    for k in kwargs :
    INDENT
        assert k in [f.attname for f in self._meta.fields], "Author.__init__ got an unexpected paramater: %s" % k
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/raw_query/models.py.pyindent" startline="14" endline="15">
INDENT
    assert k in [f.attname for f in self._meta.fields], "Author.__init__ got an unexpected paramater: %s" % k
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/raw_query/models.py.pyindent" startline="17" endline="19">
INDENT
    title = models.CharField(max_length = 255)
    author = models.ForeignKey(Author)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/raw_query/models.py.pyindent" startline="21" endline="22">
INDENT
    brand = models.CharField(max_length = 255, db_column = "name")
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/raw_query/models.py.pyindent" startline="24" endline="24">
INDENT
    reviewed = models.ManyToManyField(Book)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/raw_query/tests.py.pyindent" startline="7" endline="188">
INDENT
    def assertSuccessfulRawQuery(self, model, query, expected_results,
    expected_annotations = (), params = [], translations = None) :
    INDENT
        results = list(model.objects.raw(query, params = params, translations = translations))
        self.assertProcessed(results, expected_results, expected_annotations)
        self.assertAnnotations(results, expected_annotations)
    DEDENT
    def assertProcessed(self, results, orig, expected_annotations = ()) :
    INDENT
        self.assertEqual(len(results), len(orig))
        for index, item in enumerate(results) :
        INDENT
            orig_item = orig [index]
            for annotation in expected_annotations :
            INDENT
                setattr(orig_item, * annotation)
            DEDENT
            self.assertEqual(item.id, orig_item.id)
        DEDENT
    DEDENT
    def assertNoAnnotations(self, results) :
    INDENT
        self.assertAnnotations(results, ())
    DEDENT
    def assertAnnotations(self, results, expected_annotations) :
    INDENT
        if expected_annotations :
        INDENT
            for index, result in enumerate(results) :
            INDENT
                annotation, value = expected_annotations [index]
                self.assertTrue(hasattr(result, annotation))
                self.assertEqual(getattr(result, annotation), value)
            DEDENT
        DEDENT
    DEDENT
    def testSimpleRawQuery(self) :
    INDENT
        query = "SELECT * FROM raw_query_author"
        authors = Author.objects.all()
        self.assertSuccessfulRawQuery(Author, query, authors)
    DEDENT
    def testRawQueryLazy(self) :
    INDENT
        q = Author.objects.raw('SELECT * FROM raw_query_author')
        self.assert_(q.query.cursor is None)
        list(q)
        self.assert_(q.query.cursor is not None)
    DEDENT
    def testFkeyRawQuery(self) :
    INDENT
        query = "SELECT * FROM raw_query_book"
        books = Book.objects.all()
        self.assertSuccessfulRawQuery(Book, query, books)
    DEDENT
    def testDBColumnHandler(self) :
    INDENT
        query = "SELECT * FROM raw_query_coffee"
        coffees = Coffee.objects.all()
        self.assertSuccessfulRawQuery(Coffee, query, coffees)
    DEDENT
    def testOrderHandler(self) :
    INDENT
        selects = (
            ('dob, last_name, first_name, id'),
            ('last_name, dob, first_name, id'),
            ('first_name, last_name, dob, id'),
            )
        for select in selects :
        INDENT
            query = "SELECT %s FROM raw_query_author" % select
            authors = Author.objects.all()
            self.assertSuccessfulRawQuery(Author, query, authors)
        DEDENT
    DEDENT
    def testTranslations(self) :
    INDENT
        query = "SELECT first_name AS first, last_name AS last, dob, id FROM raw_query_author"
        translations = {'first' : 'first_name', 'last' : 'last_name'}
        authors = Author.objects.all()
        self.assertSuccessfulRawQuery(Author, query, authors, translations = translations)
    DEDENT
    def testParams(self) :
    INDENT
        query = "SELECT * FROM raw_query_author WHERE first_name = %s"
        author = Author.objects.all() [2]
        params = [author.first_name]
        results = list(Author.objects.raw(query, params = params))
        self.assertProcessed(results, [author])
        self.assertNoAnnotations(results)
        self.assertEqual(len(results), 1)
    DEDENT
    def testManyToMany(self) :
    INDENT
        query = "SELECT * FROM raw_query_reviewer"
        reviewers = Reviewer.objects.all()
        self.assertSuccessfulRawQuery(Reviewer, query, reviewers)
    DEDENT
    def testExtraConversions(self) :
    INDENT
        query = "SELECT * FROM raw_query_author"
        translations = {'something' : 'else'}
        authors = Author.objects.all()
        self.assertSuccessfulRawQuery(Author, query, authors, translations = translations)
    DEDENT
    def testMissingFields(self) :
    INDENT
        query = "SELECT id, first_name, dob FROM raw_query_author"
        for author in Author.objects.raw(query) :
        INDENT
            self.assertNotEqual(author.first_name, None)
            self.assertNotEqual(author.last_name, None)
        DEDENT
    DEDENT
    def testMissingFieldsWithoutPK(self) :
    INDENT
        query = "SELECT first_name, dob FROM raw_query_author"
        try :
        INDENT
            list(Author.objects.raw(query))
            self.fail('Query without primary key should fail')
        DEDENT
        except InvalidQuery :
        INDENT
            pass
        DEDENT
    DEDENT
    def testAnnotations(self) :
    INDENT
        query = "SELECT a.*, count(b.id) as book_count FROM raw_query_author a LEFT JOIN raw_query_book b ON a.id = b.author_id GROUP BY a.id, a.first_name, a.last_name, a.dob ORDER BY a.id"
        expected_annotations = (
            ('book_count', 3),
            ('book_count', 0),
            ('book_count', 1),
            ('book_count', 0),
            )
        authors = Author.objects.all()
        self.assertSuccessfulRawQuery(Author, query, authors, expected_annotations)
    DEDENT
    def testInvalidQuery(self) :
    INDENT
        query = "UPDATE raw_query_author SET first_name='thing' WHERE first_name='Joe'"
        self.assertRaises(InvalidQuery, Author.objects.raw, query)
    DEDENT
    def testWhiteSpaceQuery(self) :
    INDENT
        query = "    SELECT * FROM raw_query_author"
        authors = Author.objects.all()
        self.assertSuccessfulRawQuery(Author, query, authors)
    DEDENT
    def testMultipleIterations(self) :
    INDENT
        query = "SELECT * FROM raw_query_author"
        normal_authors = Author.objects.all()
        raw_authors = Author.objects.raw(query)

        first_iterations = 0
        for index, raw_author in enumerate(raw_authors) :
        INDENT
            self.assertEqual(normal_authors [index], raw_author)
            first_iterations += 1

        DEDENT
        second_iterations = 0
        for index, raw_author in enumerate(raw_authors) :
        INDENT
            self.assertEqual(normal_authors [index], raw_author)
            second_iterations += 1
        DEDENT
        self.assertEqual(first_iterations, second_iterations)
    DEDENT
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/raw_query/tests.py.pyindent" startline="10" endline="16">
INDENT
    results = list(model.objects.raw(query, params = params, translations = translations))
    self.assertProcessed(results, expected_results, expected_annotations)
    self.assertAnnotations(results, expected_annotations)
DEDENT

</source>
<source file="systems/py/Django/trunk/tests/modeltests/raw_query/tests.py.pyindent" startline="18" endline="28">
INDENT
    self.assertEqual(len(results), len(orig))
    for index, item in enumerate(results) :
    INDENT
        orig_item = orig [index]
        for annotation in expected_annotations :
        INDENT
            setattr(orig_item, * annotation)
        DEDENT
        self.assertEqual(item.id, orig_item.id)
    DEDENT
DEDENT

</source>
