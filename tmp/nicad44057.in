<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="22" endline="189">
INDENT
    def __init__(self, bookmarks, parent = None) :
    INDENT
        QDialog.__init__(self, parent)
        self.setupUi(self)
        self.fileCompleter = E4FileCompleter(self.fileEdit)
        self.bookmarks = QStringList(bookmarks)
        for bookmark in self.bookmarks :
        INDENT
            itm = QListWidgetItem(bookmark, self.filesList)
            if not QFileInfo(bookmark).exists() :
            INDENT
                itm.setBackgroundColor(QColor(Qt.red))
            DEDENT
        DEDENT
        if len(self.bookmarks) :
        INDENT
            self.filesList.setCurrentRow(0)
        DEDENT
    DEDENT
    def on_fileEdit_textChanged(self, txt) :
    INDENT
        self.addButton.setEnabled(not txt.isEmpty())
        self.changeButton.setEnabled(not txt.isEmpty() and self.filesList.currentRow() ! = - 1)
    DEDENT
    def on_filesList_currentRowChanged(self, row) :
    INDENT
        if row == - 1 :
        INDENT
            self.fileEdit.clear()
            self.downButton.setEnabled(False)
            self.upButton.setEnabled(False)
            self.deleteButton.setEnabled(False)
            self.changeButton.setEnabled(False)
        DEDENT
        else :
        INDENT
            maxIndex = len(self.bookmarks) - 1
            self.upButton.setEnabled(row ! = 0)
            self.downButton.setEnabled(row ! = maxIndex)
            self.deleteButton.setEnabled(True)
            self.changeButton.setEnabled(True)
            bookmark = self.bookmarks [row]
            self.fileEdit.setText(bookmark)
        DEDENT
    DEDENT
    @ pyqtSignature("")
    def on_addButton_clicked(self) :
    INDENT
        bookmark = self.fileEdit.text()
        if not bookmark.isEmpty() :
        INDENT
            bookmark = Utilities.toNativeSeparators(bookmark)
            itm = QListWidgetItem(bookmark, self.filesList)
            if not QFileInfo(bookmark).exists() :
            INDENT
                itm.setBackgroundColor(QColor(Qt.red))
            DEDENT
            self.fileEdit.clear()
            self.bookmarks.append(bookmark)
        DEDENT
        row = self.filesList.currentRow()
        self.on_filesList_currentRowChanged(row)
    DEDENT
    @ pyqtSignature("")
    def on_changeButton_clicked(self) :
    INDENT
        row = self.filesList.currentRow()
        bookmark = self.fileEdit.text()
        bookmark = Utilities.toNativeSeparators(bookmark)
        self.bookmarks [row] = bookmark
        itm = self.filesList.item(row)
        itm.setText(bookmark)
        if not QFileInfo(bookmark).exists() :
        INDENT
            itm.setBackgroundColor(QColor(Qt.red))
        DEDENT
        else :
        INDENT
            itm.setBackgroundColor(QColor())
        DEDENT
    DEDENT
    @ pyqtSignature("")
    def on_deleteButton_clicked(self) :
    INDENT
        row = self.filesList.currentRow()
        itm = self.filesList.takeItem(row)
        del itm
        del self.bookmarks [row]
        row = self.filesList.currentRow()
        self.on_filesList_currentRowChanged(row)
    DEDENT
    @ pyqtSignature("")
    def on_downButton_clicked(self) :
    INDENT
        rows = self.filesList.count()
        row = self.filesList.currentRow()
        if row == rows - 1 :
        INDENT
            return
        DEDENT
        self.__swap(row, row + 1)
        itm = self.filesList.takeItem(row)
        self.filesList.insertItem(row + 1, itm)
        self.filesList.setCurrentItem(itm)
        self.upButton.setEnabled(True)
        if row == rows - 2 :
        INDENT
            self.downButton.setEnabled(False)
        DEDENT
        else :
        INDENT
            self.downButton.setEnabled(True)
        DEDENT
    DEDENT
    @ pyqtSignature("")
    def on_upButton_clicked(self) :
    INDENT
        row = self.filesList.currentRow()
        if row == 0 :
        INDENT
            return
        DEDENT
        self.__swap(row - 1, row)
        itm = self.filesList.takeItem(row)
        self.filesList.insertItem(row - 1, itm)
        self.filesList.setCurrentItem(itm)
        if row == 1 :
        INDENT
            self.upButton.setEnabled(False)
        DEDENT
        else :
        INDENT
            self.upButton.setEnabled(True)
        DEDENT
        self.downButton.setEnabled(True)
    DEDENT
    @ pyqtSignature("")
    def on_fileButton_clicked(self) :
    INDENT
        bookmark = KQFileDialog.getOpenFileName()
        if not bookmark.isEmpty() :
        INDENT
            bookmark = Utilities.toNativeSeparators(bookmark)
            self.fileEdit.setText(bookmark)
        DEDENT
    DEDENT
    def getBookmarkedFiles(self) :
    INDENT
        return self.bookmarks
    DEDENT
    def __swap(self, itm1, itm2) :
    INDENT
        tmp = self.bookmarks [itm1]
        self.bookmarks [itm1] = self.bookmarks [itm2]
        self.bookmarks [itm2] = tmp
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="26" endline="45">
INDENT
    QDialog.__init__(self, parent)
    self.setupUi(self)
    self.fileCompleter = E4FileCompleter(self.fileEdit)
    self.bookmarks = QStringList(bookmarks)
    for bookmark in self.bookmarks :
    INDENT
        itm = QListWidgetItem(bookmark, self.filesList)
        if not QFileInfo(bookmark).exists() :
        INDENT
            itm.setBackgroundColor(QColor(Qt.red))
        DEDENT
    DEDENT
    if len(self.bookmarks) :
    INDENT
        self.filesList.setCurrentRow(0)
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="39" endline="42">
INDENT
    itm = QListWidgetItem(bookmark, self.filesList)
    if not QFileInfo(bookmark).exists() :
    INDENT
        itm.setBackgroundColor(QColor(Qt.red))
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="41" endline="42">
INDENT
    itm.setBackgroundColor(QColor(Qt.red))
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="44" endline="45">
INDENT
    self.filesList.setCurrentRow(0)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="47" endline="54">
INDENT
    self.addButton.setEnabled(not txt.isEmpty())
    self.changeButton.setEnabled(not txt.isEmpty() and self.filesList.currentRow() ! = - 1)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="56" endline="76">
INDENT
    if row == - 1 :
    INDENT
        self.fileEdit.clear()
        self.downButton.setEnabled(False)
        self.upButton.setEnabled(False)
        self.deleteButton.setEnabled(False)
        self.changeButton.setEnabled(False)
    DEDENT
    else :
    INDENT
        maxIndex = len(self.bookmarks) - 1
        self.upButton.setEnabled(row ! = 0)
        self.downButton.setEnabled(row ! = maxIndex)
        self.deleteButton.setEnabled(True)
        self.changeButton.setEnabled(True)
        bookmark = self.bookmarks [row]
        self.fileEdit.setText(bookmark)
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="62" endline="66">
INDENT
    self.fileEdit.clear()
    self.downButton.setEnabled(False)
    self.upButton.setEnabled(False)
    self.deleteButton.setEnabled(False)
    self.changeButton.setEnabled(False)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="68" endline="76">
INDENT
    maxIndex = len(self.bookmarks) - 1
    self.upButton.setEnabled(row ! = 0)
    self.downButton.setEnabled(row ! = maxIndex)
    self.deleteButton.setEnabled(True)
    self.changeButton.setEnabled(True)
    bookmark = self.bookmarks [row]
    self.fileEdit.setText(bookmark)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="79" endline="92">
INDENT
    bookmark = self.fileEdit.text()
    if not bookmark.isEmpty() :
    INDENT
        bookmark = Utilities.toNativeSeparators(bookmark)
        itm = QListWidgetItem(bookmark, self.filesList)
        if not QFileInfo(bookmark).exists() :
        INDENT
            itm.setBackgroundColor(QColor(Qt.red))
        DEDENT
        self.fileEdit.clear()
        self.bookmarks.append(bookmark)
    DEDENT
    row = self.filesList.currentRow()
    self.on_filesList_currentRowChanged(row)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="84" endline="89">
INDENT
    bookmark = Utilities.toNativeSeparators(bookmark)
    itm = QListWidgetItem(bookmark, self.filesList)
    if not QFileInfo(bookmark).exists() :
    INDENT
        itm.setBackgroundColor(QColor(Qt.red))
    DEDENT
    self.fileEdit.clear()
    self.bookmarks.append(bookmark)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="87" endline="87">
INDENT
    itm.setBackgroundColor(QColor(Qt.red))
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="95" endline="108">
INDENT
    row = self.filesList.currentRow()
    bookmark = self.fileEdit.text()
    bookmark = Utilities.toNativeSeparators(bookmark)
    self.bookmarks [row] = bookmark
    itm = self.filesList.item(row)
    itm.setText(bookmark)
    if not QFileInfo(bookmark).exists() :
    INDENT
        itm.setBackgroundColor(QColor(Qt.red))
    DEDENT
    else :
    INDENT
        itm.setBackgroundColor(QColor())
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="105" endline="105">
INDENT
    itm.setBackgroundColor(QColor(Qt.red))
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="107" endline="108">
INDENT
    itm.setBackgroundColor(QColor())
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="111" endline="120">
INDENT
    row = self.filesList.currentRow()
    itm = self.filesList.takeItem(row)
    del itm
    del self.bookmarks [row]
    row = self.filesList.currentRow()
    self.on_filesList_currentRowChanged(row)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="123" endline="141">
INDENT
    rows = self.filesList.count()
    row = self.filesList.currentRow()
    if row == rows - 1 :
    INDENT
        return
    DEDENT
    self.__swap(row, row + 1)
    itm = self.filesList.takeItem(row)
    self.filesList.insertItem(row + 1, itm)
    self.filesList.setCurrentItem(itm)
    self.upButton.setEnabled(True)
    if row == rows - 2 :
    INDENT
        self.downButton.setEnabled(False)
    DEDENT
    else :
    INDENT
        self.downButton.setEnabled(True)
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="129" endline="131">
INDENT
    return
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="138" endline="138">
INDENT
    self.downButton.setEnabled(False)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="140" endline="141">
INDENT
    self.downButton.setEnabled(True)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="144" endline="161">
INDENT
    row = self.filesList.currentRow()
    if row == 0 :
    INDENT
        return
    DEDENT
    self.__swap(row - 1, row)
    itm = self.filesList.takeItem(row)
    self.filesList.insertItem(row - 1, itm)
    self.filesList.setCurrentItem(itm)
    if row == 1 :
    INDENT
        self.upButton.setEnabled(False)
    DEDENT
    else :
    INDENT
        self.upButton.setEnabled(True)
    DEDENT
    self.downButton.setEnabled(True)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="149" endline="151">
INDENT
    return
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="157" endline="157">
INDENT
    self.upButton.setEnabled(False)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="159" endline="159">
INDENT
    self.upButton.setEnabled(True)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="164" endline="171">
INDENT
    bookmark = KQFileDialog.getOpenFileName()
    if not bookmark.isEmpty() :
    INDENT
        bookmark = Utilities.toNativeSeparators(bookmark)
        self.fileEdit.setText(bookmark)
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="169" endline="171">
INDENT
    bookmark = Utilities.toNativeSeparators(bookmark)
    self.fileEdit.setText(bookmark)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="173" endline="179">
INDENT
    return self.bookmarks
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/BookmarkedFilesDialog.py.pyindent" startline="181" endline="189">
INDENT
    tmp = self.bookmarks [itm1]
    self.bookmarks [itm1] = self.bookmarks [itm2]
    self.bookmarks [itm2] = tmp
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/__init__.py.pyindent" startline="26" endline="47">
INDENT
    viewManagerStr = Preferences.getViewManager()
    vm = pluginManager.getPluginObject("viewmanager", viewManagerStr)
    if vm is None :
    INDENT
        vm = pluginManager.getPluginObject("viewmanager", "tabview")
        if vm is None :
        INDENT
            raise RuntimeError("Could not create a viemanager object.")
        DEDENT
        Preferences.setViewManager("tabview")
    DEDENT
    vm.setReferences(ui, dbs)
    return vm
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/__init__.py.pyindent" startline="41" endline="45">
INDENT
    vm = pluginManager.getPluginObject("viewmanager", "tabview")
    if vm is None :
    INDENT
        raise RuntimeError("Could not create a viemanager object.")
    DEDENT
    Preferences.setViewManager("tabview")
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/__init__.py.pyindent" startline="44" endline="44">
INDENT
    raise RuntimeError("Could not create a viemanager object.")
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="43" endline="87">
INDENT
    def editorCommand(self, cmd) :
    INDENT
        if cmd == QsciScintilla.SCI_NEWLINE :
        INDENT
            cb = self.parent()
            hasEntry = cb.findText(self.text()) ! = - 1
            if not hasEntry :
            INDENT
                if cb.insertPolicy() == QComboBox.InsertAtTop :
                INDENT
                    cb.insertItem(0, self.text())
                DEDENT
                else :
                INDENT
                    cb.addItem(self.text())
                DEDENT
            DEDENT
            self.emit(SIGNAL("returnPressed()"))
        DEDENT
        elif cmd == QsciScintilla.SCI_CANCEL :
        INDENT
            self.emit(SIGNAL("escPressed()"))
        DEDENT
    DEDENT
    def keyPressEvent(self, evt) :
    INDENT
        if evt.key() == Qt.Key_Escape :
        INDENT
            self.emit(SIGNAL("escPressed()"))
        DEDENT
        else :
        INDENT
            QLineEdit.keyPressEvent(self, evt)
        DEDENT
    DEDENT
    def focusInEvent(self, evt) :
    INDENT
        self.emit(SIGNAL("gotFocus()"))
        QLineEdit.focusInEvent(self, evt)
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="51" endline="67">
INDENT
    if cmd == QsciScintilla.SCI_NEWLINE :
    INDENT
        cb = self.parent()
        hasEntry = cb.findText(self.text()) ! = - 1
        if not hasEntry :
        INDENT
            if cb.insertPolicy() == QComboBox.InsertAtTop :
            INDENT
                cb.insertItem(0, self.text())
            DEDENT
            else :
            INDENT
                cb.addItem(self.text())
            DEDENT
        DEDENT
        self.emit(SIGNAL("returnPressed()"))
    DEDENT
    elif cmd == QsciScintilla.SCI_CANCEL :
    INDENT
        self.emit(SIGNAL("escPressed()"))
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="57" endline="64">
INDENT
    cb = self.parent()
    hasEntry = cb.findText(self.text()) ! = - 1
    if not hasEntry :
    INDENT
        if cb.insertPolicy() == QComboBox.InsertAtTop :
        INDENT
            cb.insertItem(0, self.text())
        DEDENT
        else :
        INDENT
            cb.addItem(self.text())
        DEDENT
    DEDENT
    self.emit(SIGNAL("returnPressed()"))
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="60" endline="63">
INDENT
    if cb.insertPolicy() == QComboBox.InsertAtTop :
    INDENT
        cb.insertItem(0, self.text())
    DEDENT
    else :
    INDENT
        cb.addItem(self.text())
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="61" endline="61">
INDENT
    cb.insertItem(0, self.text())
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="63" endline="63">
INDENT
    cb.addItem(self.text())
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="66" endline="67">
INDENT
    self.emit(SIGNAL("escPressed()"))
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="69" endline="78">
INDENT
    if evt.key() == Qt.Key_Escape :
    INDENT
        self.emit(SIGNAL("escPressed()"))
    DEDENT
    else :
    INDENT
        QLineEdit.keyPressEvent(self, evt)
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="75" endline="75">
INDENT
    self.emit(SIGNAL("escPressed()"))
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="77" endline="78">
INDENT
    QLineEdit.keyPressEvent(self, evt)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="80" endline="87">
INDENT
    self.emit(SIGNAL("gotFocus()"))
    QLineEdit.focusInEvent(self, evt)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="89" endline="4767">
INDENT
    def __init__(self) :
    INDENT
        QObject.__init__(self)

        self.editors = []
        self.currentEditor = None
        self.untitledCount = 0
        self.srHistory = {
            "search" : QStringList(),
            "replace" : QStringList()}
        self.editorsCheckFocusIn = True
        self.recent = QStringList()
        self.__loadRecent()
        self.bookmarked = QStringList()
        bs = Preferences.Prefs.settings.value("Bookmarked/Sources")
        if bs.isValid() :
        INDENT
            self.bookmarked = bs.toStringList()

        DEDENT
        self.autosaveInterval = Preferences.getEditor("AutosaveInterval")
        self.autosaveTimer = QTimer(self)
        self.autosaveTimer.setObjectName("AutosaveTimer")
        self.autosaveTimer.setSingleShot(True)
        self.connect(self.autosaveTimer, SIGNAL('timeout()'), self.__autosave)

        self.apisManager = APIsManager(parent = self)
    DEDENT
    def setReferences(self, ui, dbs) :
    INDENT
        self.ui = ui
        self.dbs = dbs
        self.searchDlg = SearchReplaceWidget(False, self, ui)
        self.replaceDlg = SearchReplaceWidget(True, self, ui)
        self.connect(self, SIGNAL("checkActions"),
            self.searchDlg.updateSelectionCheckBox)
        self.connect(self, SIGNAL("checkActions"),
            self.replaceDlg.updateSelectionCheckBox)
    DEDENT
    def __loadRecent(self) :
    INDENT
        self.recent.clear()
        Preferences.Prefs.rsettings.sync()
        rs = Preferences.Prefs.rsettings.value(recentNameFiles)
        if rs.isValid() :
        INDENT
            for f in rs.toStringList() :
            INDENT
                if QFileInfo(f).exists() :
                INDENT
                    self.recent.append(f)
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    def __saveRecent(self) :
    INDENT
        Preferences.Prefs.rsettings.setValue(recentNameFiles, QVariant(self.recent))
        Preferences.Prefs.rsettings.sync()
    DEDENT
    def getMostRecent(self) :
    INDENT
        if len(self.recent) :
        INDENT
            return unicode(self.recent [0])
        DEDENT
        else :
        INDENT
            return None
        DEDENT
    DEDENT
    def setSbInfo(self, sbFile, sbLine, sbPos, sbWritable, sbEncoding, sbLanguage, sbEol) :
    INDENT
        self.sbFile = sbFile
        self.sbLine = sbLine
        self.sbPos = sbPos
        self.sbWritable = sbWritable
        self.sbEnc = sbEncoding
        self.sbLang = sbLanguage
        self.sbEol = sbEol
        self.__setSbFile()

    DEDENT
    def canCascade(self) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def canTile(self) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def tile(self) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def cascade(self) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def activeWindow(self) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def _removeAllViews(self) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def _removeView(self, win) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def _addView(self, win, fn = None, noName = "") :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def _showView(self, win, fn = None) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def showWindowMenu(self, windowMenu) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def _initWindowActions(self) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def setEditorName(self, editor, newName) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def _modificationStatusChanged(self, m, editor) :
    INDENT
        raise RuntimeError('Not implemented')
    DEDENT
    def canSplit(self) :
    INDENT
        return False
    DEDENT
    def addSplit(self) :
    INDENT
        pass
    DEDENT
    def removeSplit(self) :
    INDENT
        return False
    DEDENT
    def setSplitOrientation(self, orientation) :
    INDENT
        pass
    DEDENT
    def nextSplit(self) :
    INDENT
        pass
    DEDENT
    def prevSplit(self) :
    INDENT
        pass
    DEDENT
    def eventFilter(self, object, event) :
    INDENT
        return False

    DEDENT
    def initActions(self) :
    INDENT
        self.editActions = []

        self.fileActions = []

        self.searchActions = []

        self.viewActions = []

        self.windowActions = []

        self.macroActions = []

        self.bookmarkActions = []

        self.spellingActions = []
        self._initWindowActions()
        self.__initFileActions()
        self.__initEditActions()
        self.__initSearchActions()
        self.__initViewActions()
        self.__initMacroActions()
        self.__initBookmarkActions()
        self.__initSpellingActions()

    DEDENT
    def __initFileActions(self) :
    INDENT
        self.newAct = E4Action(QApplication.translate('ViewManager', 'New'),
            UI.PixmapCache.getIcon("new.png"),
            QApplication.translate('ViewManager', '&New'),
            QKeySequence(QApplication.translate('ViewManager', "Ctrl+N", "File|New")),
            0, self, 'vm_file_new')
        self.newAct.setStatusTip(QApplication.translate('ViewManager', 'Open an empty editor window'))
        self.newAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>New</b>"""
                """<p>An empty editor window will be created.</p>"""))
        self.connect(self.newAct, SIGNAL('triggered()'), self.newEditor)
        self.fileActions.append(self.newAct)
        self.openAct = E4Action(QApplication.translate('ViewManager', 'Open'),
            UI.PixmapCache.getIcon("open.png"),
            QApplication.translate('ViewManager', '&Open...'),
            QKeySequence(QApplication.translate('ViewManager', "Ctrl+O", "File|Open")),
            0, self, 'vm_file_open')
        self.openAct.setStatusTip(QApplication.translate('ViewManager', 'Open a file'))
        self.openAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Open a file</b>"""
                """<p>You will be asked for the name of a file to be opened"""
                """ in an editor window.</p>"""))
        self.connect(self.openAct, SIGNAL('triggered()'), self.openFiles)
        self.fileActions.append(self.openAct)
        self.closeActGrp = createActionGroup(self)
        self.closeAct = E4Action(QApplication.translate('ViewManager', 'Close'),
            UI.PixmapCache.getIcon("close.png"),
            QApplication.translate('ViewManager', '&Close'),
            QKeySequence(QApplication.translate('ViewManager', "Ctrl+W", "File|Close")),
            0, self.closeActGrp, 'vm_file_close')
        self.closeAct.setStatusTip(QApplication.translate('ViewManager', 'Close the current window'))
        self.closeAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Close Window</b>"""
                """<p>Close the current window.</p>"""))
        self.connect(self.closeAct, SIGNAL('triggered()'), self.closeCurrentWindow)
        self.fileActions.append(self.closeAct)
        self.closeAllAct = E4Action(QApplication.translate('ViewManager', 'Close All'),
            QApplication.translate('ViewManager', 'Clos&e All'),
            0, 0, self.closeActGrp, 'vm_file_close_all')
        self.closeAllAct.setStatusTip(QApplication.translate('ViewManager', 'Close all editor windows'))
        self.closeAllAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Close All Windows</b>"""
                """<p>Close all editor windows.</p>"""))
        self.connect(self.closeAllAct, SIGNAL('triggered()'), self.closeAllWindows)
        self.fileActions.append(self.closeAllAct)
        self.closeActGrp.setEnabled(False)
        self.saveActGrp = createActionGroup(self)
        self.saveAct = E4Action(QApplication.translate('ViewManager', 'Save'),
            UI.PixmapCache.getIcon("fileSave.png"),
            QApplication.translate('ViewManager', '&Save'),
            QKeySequence(QApplication.translate('ViewManager', "Ctrl+S", "File|Save")),
            0, self.saveActGrp, 'vm_file_save')
        self.saveAct.setStatusTip(QApplication.translate('ViewManager', 'Save the current file'))
        self.saveAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Save File</b>"""
                """<p>Save the contents of current editor window.</p>"""))
        self.connect(self.saveAct, SIGNAL('triggered()'), self.saveCurrentEditor)
        self.fileActions.append(self.saveAct)
        self.saveAsAct = E4Action(QApplication.translate('ViewManager', 'Save as'),
            UI.PixmapCache.getIcon("fileSaveAs.png"),
            QApplication.translate('ViewManager', 'Save &as...'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Shift+Ctrl+S", "File|Save As")),
            0, self.saveActGrp, 'vm_file_save_as')
        self.saveAsAct.setStatusTip(QApplication.translate('ViewManager',
                'Save the current file to a new one'))
        self.saveAsAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Save File as</b>"""
                """<p>Save the contents of current editor window to a new file."""
                """ The file can be entered in a file selection dialog.</p>"""))
        self.connect(self.saveAsAct, SIGNAL('triggered()'), self.saveAsCurrentEditor)
        self.fileActions.append(self.saveAsAct)
        self.saveAllAct = E4Action(QApplication.translate('ViewManager', 'Save all'),
            UI.PixmapCache.getIcon("fileSaveAll.png"),
            QApplication.translate('ViewManager', 'Save a&ll...'),
            0, 0, self.saveActGrp, 'vm_file_save_all')
        self.saveAllAct.setStatusTip(QApplication.translate('ViewManager',
                'Save all files'))
        self.saveAllAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Save All Files</b>"""
                """<p>Save the contents of all editor windows.</p>"""))
        self.connect(self.saveAllAct, SIGNAL('triggered()'), self.saveAllEditors)
        self.fileActions.append(self.saveAllAct)
        self.saveActGrp.setEnabled(False)
        self.saveToProjectAct = E4Action(QApplication.translate('ViewManager',
                'Save to Project'),
            UI.PixmapCache.getIcon("fileSaveProject.png"),
            QApplication.translate('ViewManager', 'Save to Pro&ject'),
            0, 0, self, 'vm_file_save_to_project')
        self.saveToProjectAct.setStatusTip(QApplication.translate('ViewManager',
                'Save the current file to the current project'))
        self.saveToProjectAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Save to Project</b>"""
                """<p>Save the contents of the current editor window to the"""
                """ current project. After the file has been saved, it is"""
                """ automatically added to the current project.</p>"""))
        self.connect(self.saveToProjectAct, SIGNAL('triggered()'),
            self.saveCurrentEditorToProject)
        self.saveToProjectAct.setEnabled(False)
        self.fileActions.append(self.saveToProjectAct)
        self.printAct = E4Action(QApplication.translate('ViewManager', 'Print'),
            UI.PixmapCache.getIcon("print.png"),
            QApplication.translate('ViewManager', '&Print'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+P", "File|Print")),
            0, self, 'vm_file_print')
        self.printAct.setStatusTip(QApplication.translate('ViewManager',
                'Print the current file'))
        self.printAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Print File</b>"""
                """<p>Print the contents of current editor window.</p>"""))
        self.connect(self.printAct, SIGNAL('triggered()'), self.printCurrentEditor)
        self.printAct.setEnabled(False)
        self.fileActions.append(self.printAct)
        self.printPreviewAct = E4Action(QApplication.translate('ViewManager', 'Print Preview'),
            UI.PixmapCache.getIcon("printPreview.png"),
            QApplication.translate('ViewManager', 'Print Preview'),
            0, 0, self, 'vm_file_print_preview')
        self.printPreviewAct.setStatusTip(QApplication.translate('ViewManager',
                'Print preview of the current file'))
        self.printPreviewAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Print Preview</b>"""
                """<p>Print preview of the current editor window.</p>"""))
        self.connect(self.printPreviewAct, SIGNAL('triggered()'),
            self.printPreviewCurrentEditor)
        self.printPreviewAct.setEnabled(False)
        self.fileActions.append(self.printPreviewAct)
        self.findFileNameAct = E4Action(QApplication.translate('ViewManager',
                'Search File'),
            QApplication.translate('ViewManager', 'Search &File...'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Alt+Ctrl+F", "File|Search File")),
            0, self, 'vm_file_search_file')
        self.findFileNameAct.setStatusTip(QApplication.translate('ViewManager',
                'Search for a file'))
        self.findFileNameAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Search File</b>"""
                """<p>Search for a file.</p>"""))
        self.connect(self.findFileNameAct, SIGNAL('triggered()'), self.__findFileName)
        self.fileActions.append(self.findFileNameAct)
    DEDENT
    def initFileMenu(self) :
    INDENT
        menu = QMenu(QApplication.translate('ViewManager', '&File'), self.ui)
        self.recentMenu = QMenu(QApplication.translate('ViewManager',
                'Open &Recent Files'), menu)
        self.bookmarkedMenu = QMenu(QApplication.translate('ViewManager',
                'Open &Bookmarked Files'), menu)
        self.exportersMenu = self.__initContextMenuExporters()
        menu.setTearOffEnabled(True)
        menu.addAction(self.newAct)
        menu.addAction(self.openAct)
        self.menuRecentAct = menu.addMenu(self.recentMenu)
        menu.addMenu(self.bookmarkedMenu)
        menu.addSeparator()
        menu.addAction(self.closeAct)
        menu.addAction(self.closeAllAct)
        menu.addSeparator()
        menu.addAction(self.findFileNameAct)
        menu.addSeparator()
        menu.addAction(self.saveAct)
        menu.addAction(self.saveAsAct)
        menu.addAction(self.saveAllAct)
        menu.addAction(self.saveToProjectAct)
        self.exportersMenuAct = menu.addMenu(self.exportersMenu)
        menu.addSeparator()
        menu.addAction(self.printPreviewAct)
        menu.addAction(self.printAct)
        self.connect(self.recentMenu, SIGNAL('aboutToShow()'),
            self.__showRecentMenu)
        self.connect(self.recentMenu, SIGNAL('triggered(QAction *)'),
            self.__openSourceFile)
        self.connect(self.bookmarkedMenu, SIGNAL('aboutToShow()'),
            self.__showBookmarkedMenu)
        self.connect(self.bookmarkedMenu, SIGNAL('triggered(QAction *)'),
            self.__openSourceFile)
        self.connect(menu, SIGNAL('aboutToShow()'), self.__showFileMenu)
        self.exportersMenuAct.setEnabled(False)
        return menu
    DEDENT
    def initFileToolbar(self, toolbarManager) :
    INDENT
        tb = QToolBar(QApplication.translate('ViewManager', 'File'), self.ui)
        tb.setIconSize(UI.Config.ToolBarIconSize)
        tb.setObjectName("FileToolbar")
        tb.setToolTip(QApplication.translate('ViewManager', 'File'))
        tb.addAction(self.newAct)
        tb.addAction(self.openAct)
        tb.addAction(self.closeAct)
        tb.addSeparator()
        tb.addAction(self.saveAct)
        tb.addAction(self.saveAsAct)
        tb.addAction(self.saveAllAct)
        tb.addAction(self.saveToProjectAct)
        tb.addSeparator()
        tb.addAction(self.printPreviewAct)
        tb.addAction(self.printAct)
        toolbarManager.addToolBar(tb, tb.windowTitle())
        return tb
    DEDENT
    def __initContextMenuExporters(self) :
    INDENT
        menu = QMenu(QApplication.translate('ViewManager', "Export as"))
        supportedExporters = QScintilla.Exporters.getSupportedFormats()
        exporters = supportedExporters.keys()
        exporters.sort()
        for exporter in exporters :
        INDENT
            act = menu.addAction(supportedExporters [exporter])
            act.setData(QVariant(exporter))
        DEDENT
        self.connect(menu, SIGNAL('triggered(QAction *)'), self.__exportMenuTriggered)
        return menu

    DEDENT
    def __initEditActions(self) :
    INDENT
        self.editActGrp = createActionGroup(self)
        self.undoAct = E4Action(QApplication.translate('ViewManager', 'Undo'),
            UI.PixmapCache.getIcon("editUndo.png"),
            QApplication.translate('ViewManager', '&Undo'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Z", "Edit|Undo")),
            QKeySequence(QApplication.translate('ViewManager',
                    "Alt+Backspace", "Edit|Undo")),
            self.editActGrp, 'vm_edit_undo')
        self.undoAct.setStatusTip(QApplication.translate('ViewManager',
                'Undo the last change'))
        self.undoAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Undo</b>"""
                """<p>Undo the last change done in the current editor.</p>"""))
        self.connect(self.undoAct, SIGNAL('triggered()'), self.__editUndo)
        self.editActions.append(self.undoAct)
        self.redoAct = E4Action(QApplication.translate('ViewManager', 'Redo'),
            UI.PixmapCache.getIcon("editRedo.png"),
            QApplication.translate('ViewManager', '&Redo'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Shift+Z", "Edit|Redo")),
            0, self.editActGrp, 'vm_edit_redo')
        self.redoAct.setStatusTip(QApplication.translate('ViewManager',
                'Redo the last change'))
        self.redoAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Redo</b>"""
                """<p>Redo the last change done in the current editor.</p>"""))
        self.connect(self.redoAct, SIGNAL('triggered()'), self.__editRedo)
        self.editActions.append(self.redoAct)
        self.revertAct = E4Action(QApplication.translate('ViewManager',
                'Revert to last saved state'),
            QApplication.translate('ViewManager', 'Re&vert to last saved state'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Y", "Edit|Revert")),
            0,
            self.editActGrp, 'vm_edit_revert')
        self.revertAct.setStatusTip(QApplication.translate('ViewManager',
                'Revert to last saved state'))
        self.revertAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Revert to last saved state</b>"""
                """<p>Undo all changes up to the last saved state"""
                """ of the current editor.</p>"""))
        self.connect(self.revertAct, SIGNAL('triggered()'), self.__editRevert)
        self.editActions.append(self.revertAct)
        self.copyActGrp = createActionGroup(self.editActGrp)
        self.cutAct = E4Action(QApplication.translate('ViewManager', 'Cut'),
            UI.PixmapCache.getIcon("editCut.png"),
            QApplication.translate('ViewManager', 'Cu&t'),
            QKeySequence(QApplication.translate('ViewManager', "Ctrl+X", "Edit|Cut")),
            QKeySequence(QApplication.translate('ViewManager',
                    "Shift+Del", "Edit|Cut")),
            self.copyActGrp, 'vm_edit_cut')
        self.cutAct.setStatusTip(QApplication.translate('ViewManager',
                'Cut the selection'))
        self.cutAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Cut</b>"""
                """<p>Cut the selected text of the current editor to the clipboard.</p>"""))
        self.connect(self.cutAct, SIGNAL('triggered()'), self.__editCut)
        self.editActions.append(self.cutAct)
        self.copyAct = E4Action(QApplication.translate('ViewManager', 'Copy'),
            UI.PixmapCache.getIcon("editCopy.png"),
            QApplication.translate('ViewManager', '&Copy'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+C", "Edit|Copy")),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Ins", "Edit|Copy")),
            self.copyActGrp, 'vm_edit_copy')
        self.copyAct.setStatusTip(QApplication.translate('ViewManager',
                'Copy the selection'))
        self.copyAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Copy</b>"""
                """<p>Copy the selected text of the current editor to the clipboard.</p>"""))
        self.connect(self.copyAct, SIGNAL('triggered()'), self.__editCopy)
        self.editActions.append(self.copyAct)
        self.pasteAct = E4Action(QApplication.translate('ViewManager', 'Paste'),
            UI.PixmapCache.getIcon("editPaste.png"),
            QApplication.translate('ViewManager', '&Paste'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+V", "Edit|Paste")),
            QKeySequence(QApplication.translate('ViewManager',
                    "Shift+Ins", "Edit|Paste")),
            self.copyActGrp, 'vm_edit_paste')
        self.pasteAct.setStatusTip(QApplication.translate('ViewManager',
                'Paste the last cut/copied text'))
        self.pasteAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Paste</b>"""
                """<p>Paste the last cut/copied text from the clipboard to"""
                """ the current editor.</p>"""))
        self.connect(self.pasteAct, SIGNAL('triggered()'), self.__editPaste)
        self.editActions.append(self.pasteAct)
        self.deleteAct = E4Action(QApplication.translate('ViewManager', 'Clear'),
            UI.PixmapCache.getIcon("editDelete.png"),
            QApplication.translate('ViewManager', 'Cl&ear'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Alt+Shift+C", "Edit|Clear")),
            0,
            self.copyActGrp, 'vm_edit_clear')
        self.deleteAct.setStatusTip(QApplication.translate('ViewManager',
                'Clear all text'))
        self.deleteAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Clear</b>"""
                """<p>Delete all text of the current editor.</p>"""))
        self.connect(self.deleteAct, SIGNAL('triggered()'), self.__editDelete)
        self.editActions.append(self.deleteAct)
        self.indentAct = E4Action(QApplication.translate('ViewManager', 'Indent'),
            UI.PixmapCache.getIcon("editIndent.png"),
            QApplication.translate('ViewManager', '&Indent'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+I", "Edit|Indent")),
            0,
            self.editActGrp, 'vm_edit_indent')
        self.indentAct.setStatusTip(QApplication.translate('ViewManager', 'Indent line'))
        self.indentAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Indent</b>"""
                """<p>Indents the current line or the lines of the"""
                """ selection by one level.</p>"""))
        self.connect(self.indentAct, SIGNAL('triggered()'), self.__editIndent)
        self.editActions.append(self.indentAct)
        self.unindentAct = E4Action(QApplication.translate('ViewManager', 'Unindent'),
            UI.PixmapCache.getIcon("editUnindent.png"),
            QApplication.translate('ViewManager', 'U&nindent'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Shift+I", "Edit|Unindent")),
            0,
            self.editActGrp, 'vm_edit_unindent')
        self.unindentAct.setStatusTip(QApplication.translate('ViewManager',
                'Unindent line'))
        self.unindentAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Unindent</b>"""
                """<p>Unindents the current line or the lines of the"""
                """ selection by one level.</p>"""))
        self.connect(self.unindentAct, SIGNAL('triggered()'), self.__editUnindent)
        self.editActions.append(self.unindentAct)
        self.smartIndentAct = E4Action(QApplication.translate('ViewManager',
                'Smart indent'),
            UI.PixmapCache.getIcon("editSmartIndent.png"),
            QApplication.translate('ViewManager', 'Smart indent'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Alt+I", "Edit|Smart indent")),
            0,
            self.editActGrp, 'vm_edit_smart_indent')
        self.smartIndentAct.setStatusTip(QApplication.translate('ViewManager',
                'Smart indent Line or Selection'))
        self.smartIndentAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Smart indent</b>"""
                """<p>Indents the current line or the lines of the"""
                """ current selection smartly.</p>"""))
        self.connect(self.smartIndentAct, SIGNAL('triggered()'), self.__editSmartIndent)
        self.editActions.append(self.smartIndentAct)
        self.commentAct = E4Action(QApplication.translate('ViewManager', 'Comment'),
            UI.PixmapCache.getIcon("editComment.png"),
            QApplication.translate('ViewManager', 'C&omment'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+M", "Edit|Comment")),
            0,
            self.editActGrp, 'vm_edit_comment')
        self.commentAct.setStatusTip(QApplication.translate('ViewManager',
                'Comment Line or Selection'))
        self.commentAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Comment</b>"""
                """<p>Comments the current line or the lines of the"""
                """ current selection.</p>"""))
        self.connect(self.commentAct, SIGNAL('triggered()'), self.__editComment)
        self.editActions.append(self.commentAct)
        self.uncommentAct = E4Action(QApplication.translate('ViewManager', 'Uncomment'),
            UI.PixmapCache.getIcon("editUncomment.png"),
            QApplication.translate('ViewManager', 'Unco&mment'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Alt+Ctrl+M", "Edit|Uncomment")),
            0,
            self.editActGrp, 'vm_edit_uncomment')
        self.uncommentAct.setStatusTip(QApplication.translate('ViewManager',
                'Uncomment Line or Selection'))
        self.uncommentAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Uncomment</b>"""
                """<p>Uncomments the current line or the lines of the"""
                """ current selection.</p>"""))
        self.connect(self.uncommentAct, SIGNAL('triggered()'), self.__editUncomment)
        self.editActions.append(self.uncommentAct)
        self.streamCommentAct = E4Action(QApplication.translate('ViewManager',
                'Stream Comment'),
            QApplication.translate('ViewManager', 'Stream Comment'),
            0, 0, self.editActGrp, 'vm_edit_stream_comment')
        self.streamCommentAct.setStatusTip(QApplication.translate('ViewManager',
                'Stream Comment Line or Selection'))
        self.streamCommentAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Stream Comment</b>"""
                """<p>Stream comments the current line or the current selection.</p>"""))
        self.connect(self.streamCommentAct, SIGNAL('triggered()'),
            self.__editStreamComment)
        self.editActions.append(self.streamCommentAct)
        self.boxCommentAct = E4Action(QApplication.translate('ViewManager',
                'Box Comment'),
            QApplication.translate('ViewManager', 'Box Comment'),
            0, 0, self.editActGrp, 'vm_edit_box_comment')
        self.boxCommentAct.setStatusTip(QApplication.translate('ViewManager',
                'Box Comment Line or Selection'))
        self.boxCommentAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Box Comment</b>"""
                """<p>Box comments the current line or the lines of the"""
                """ current selection.</p>"""))
        self.connect(self.boxCommentAct, SIGNAL('triggered()'), self.__editBoxComment)
        self.editActions.append(self.boxCommentAct)
        self.selectBraceAct = E4Action(QApplication.translate('ViewManager',
                'Select to brace'),
            QApplication.translate('ViewManager', 'Select to &brace'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+E", "Edit|Select to brace")),
            0,
            self.editActGrp, 'vm_edit_select_to_brace')
        self.selectBraceAct.setStatusTip(QApplication.translate('ViewManager',
                'Select text to the matching brace'))
        self.selectBraceAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Select to brace</b>"""
                """<p>Select text of the current editor to the matching brace.</p>"""))
        self.connect(self.selectBraceAct, SIGNAL('triggered()'), self.__editSelectBrace)
        self.editActions.append(self.selectBraceAct)
        self.selectAllAct = E4Action(QApplication.translate('ViewManager', 'Select all'),
            QApplication.translate('ViewManager', '&Select all'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+A", "Edit|Select all")),
            0,
            self.editActGrp, 'vm_edit_select_all')
        self.selectAllAct.setStatusTip(QApplication.translate('ViewManager',
                'Select all text'))
        self.selectAllAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Select All</b>"""
                """<p>Select all text of the current editor.</p>"""))
        self.connect(self.selectAllAct, SIGNAL('triggered()'), self.__editSelectAll)
        self.editActions.append(self.selectAllAct)
        self.deselectAllAct = E4Action(QApplication.translate('ViewManager',
                'Deselect all'),
            QApplication.translate('ViewManager', '&Deselect all'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Alt+Ctrl+A", "Edit|Deselect all")),
            0,
            self.editActGrp, 'vm_edit_deselect_all')
        self.deselectAllAct.setStatusTip(QApplication.translate('ViewManager',
                'Deselect all text'))
        self.deselectAllAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Deselect All</b>"""
                """<p>Deselect all text of the current editor.</p>"""))
        self.connect(self.deselectAllAct, SIGNAL('triggered()'), self.__editDeselectAll)
        self.editActions.append(self.deselectAllAct)
        self.convertEOLAct = E4Action(QApplication.translate('ViewManager',
                'Convert Line End Characters'),
            QApplication.translate('ViewManager', 'Convert &Line End Characters'),
            0, 0, self.editActGrp, 'vm_edit_convert_eol')
        self.convertEOLAct.setStatusTip(QApplication.translate('ViewManager',
                'Convert Line End Characters'))
        self.convertEOLAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Convert Line End Characters</b>"""
                """<p>Convert the line end characters to the currently set type.</p>"""))
        self.connect(self.convertEOLAct, SIGNAL('triggered()'), self.__convertEOL)
        self.editActions.append(self.convertEOLAct)
        self.shortenEmptyAct = E4Action(QApplication.translate('ViewManager',
                'Shorten empty lines'),
            QApplication.translate('ViewManager', 'Shorten empty lines'),
            0, 0, self.editActGrp, 'vm_edit_shorten_empty_lines')
        self.shortenEmptyAct.setStatusTip(QApplication.translate('ViewManager',
                'Shorten empty lines'))
        self.shortenEmptyAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Shorten empty lines</b>"""
                """<p>Shorten lines consisting solely of whitespace characters.</p>"""))
        self.connect(self.shortenEmptyAct, SIGNAL('triggered()'),
            self.__shortenEmptyLines)
        self.editActions.append(self.shortenEmptyAct)
        self.autoCompleteAct = E4Action(QApplication.translate('ViewManager',
                'Autocomplete'),
            QApplication.translate('ViewManager', '&Autocomplete'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Space", "Edit|Autocomplete")),
            0,
            self.editActGrp, 'vm_edit_autocomplete')
        self.autoCompleteAct.setStatusTip(QApplication.translate('ViewManager',
                'Autocomplete current word'))
        self.autoCompleteAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Autocomplete</b>"""
                """<p>Performs an autocompletion of the word containing the cursor.</p>"""))
        self.connect(self.autoCompleteAct, SIGNAL('triggered()'), self.__editAutoComplete)
        self.editActions.append(self.autoCompleteAct)
        self.autoCompleteFromDocAct = E4Action(QApplication.translate('ViewManager',
                'Autocomplete from Document'),
            QApplication.translate('ViewManager', 'Autocomplete from Document'),
            QKeySequence(QApplication.translate('ViewManager', "Ctrl+Shift+Space",
                    "Edit|Autocomplete from Document")),
            0, self.editActGrp, 'vm_edit_autocomplete_from_document')
        self.autoCompleteFromDocAct.setStatusTip(QApplication.translate('ViewManager',
                'Autocomplete current word from Document'))
        self.autoCompleteFromDocAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Autocomplete from Document</b>"""
                """<p>Performs an autocompletion from document of the word"""
                """ containing the cursor.</p>"""))
        self.connect(self.autoCompleteFromDocAct, SIGNAL('triggered()'),
            self.__editAutoCompleteFromDoc)
        self.editActions.append(self.autoCompleteFromDocAct)
        self.autoCompleteFromAPIsAct = E4Action(QApplication.translate('ViewManager',
                'Autocomplete from APIs'),
            QApplication.translate('ViewManager', 'Autocomplete from APIs'),
            QKeySequence(QApplication.translate('ViewManager', "Ctrl+Alt+Space",
                    "Edit|Autocomplete from APIs")),
            0, self.editActGrp, 'vm_edit_autocomplete_from_api')
        self.autoCompleteFromAPIsAct.setStatusTip(QApplication.translate('ViewManager',
                'Autocomplete current word from APIs'))
        self.autoCompleteFromAPIsAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Autocomplete from APIs</b>"""
                """<p>Performs an autocompletion from APIs of the word containing"""
                """ the cursor.</p>"""))
        self.connect(self.autoCompleteFromAPIsAct, SIGNAL('triggered()'),
            self.__editAutoCompleteFromAPIs)
        self.editActions.append(self.autoCompleteFromAPIsAct)
        self.autoCompleteFromAllAct = E4Action(QApplication.translate('ViewManager',
                'Autocomplete from Document and APIs'),
            QApplication.translate('ViewManager',
                'Autocomplete from Document and APIs'),
            QKeySequence(QApplication.translate('ViewManager', "Alt+Shift+Space",
                    "Edit|Autocomplete from Document and APIs")),
            0, self.editActGrp, 'vm_edit_autocomplete_from_all')
        self.autoCompleteFromAllAct.setStatusTip(QApplication.translate('ViewManager',
                'Autocomplete current word from Document and APIs'))
        self.autoCompleteFromAllAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Autocomplete from Document and APIs</b>"""
                """<p>Performs an autocompletion from document and APIs"""
                """ of the word containing the cursor.</p>"""))
        self.connect(self.autoCompleteFromAllAct, SIGNAL('triggered()'),
            self.__editAutoCompleteFromAll)
        self.editActions.append(self.autoCompleteFromAllAct)
        self.calltipsAct = E4Action(QApplication.translate('ViewManager',
                'Calltip'),
            QApplication.translate('ViewManager', '&Calltip'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Alt+Space", "Edit|Calltip")),
            0,
            self.editActGrp, 'vm_edit_calltip')
        self.calltipsAct.setStatusTip(QApplication.translate('ViewManager',
                'Show Calltips'))
        self.calltipsAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Calltip</b>"""
                """<p>Show calltips based on the characters immediately to the"""
                """ left of the cursor.</p>"""))
        self.connect(self.calltipsAct, SIGNAL('triggered()'), self.__editShowCallTips)
        self.editActions.append(self.calltipsAct)
        self.editActGrp.setEnabled(False)
        self.copyActGrp.setEnabled(False)

        self.esm = QSignalMapper(self)
        self.connect(self.esm, SIGNAL('mapped(int)'), self.__editorCommand)
        self.editorActGrp = createActionGroup(self.editActGrp)
        act = E4Action(QApplication.translate('ViewManager', 'Move left one character'),
            QApplication.translate('ViewManager', 'Move left one character'),
            QKeySequence(QApplication.translate('ViewManager', 'Left')), 0,
            self.editorActGrp, 'vm_edit_move_left_char')
        self.esm.setMapping(act, QsciScintilla.SCI_CHARLEFT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move right one character'),
            QApplication.translate('ViewManager', 'Move right one character'),
            QKeySequence(QApplication.translate('ViewManager', 'Right')), 0,
            self.editorActGrp, 'vm_edit_move_right_char')
        self.esm.setMapping(act, QsciScintilla.SCI_CHARRIGHT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move up one line'),
            QApplication.translate('ViewManager', 'Move up one line'),
            QKeySequence(QApplication.translate('ViewManager', 'Up')), 0,
            self.editorActGrp, 'vm_edit_move_up_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEUP)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move down one line'),
            QApplication.translate('ViewManager', 'Move down one line'),
            QKeySequence(QApplication.translate('ViewManager', 'Down')), 0,
            self.editorActGrp, 'vm_edit_move_down_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEDOWN)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move left one word part'),
            QApplication.translate('ViewManager', 'Move left one word part'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Left')), 0,
            self.editorActGrp, 'vm_edit_move_left_word_part')
        self.esm.setMapping(act, QsciScintilla.SCI_WORDPARTLEFT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move right one word part'),
            QApplication.translate('ViewManager', 'Move right one word part'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Right')), 0,
            self.editorActGrp, 'vm_edit_move_right_word_part')
        self.esm.setMapping(act, QsciScintilla.SCI_WORDPARTRIGHT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move left one word'),
            QApplication.translate('ViewManager', 'Move left one word'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Left')), 0,
            self.editorActGrp, 'vm_edit_move_left_word')
        self.esm.setMapping(act, QsciScintilla.SCI_WORDLEFT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move right one word'),
            QApplication.translate('ViewManager', 'Move right one word'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Right')),
            0,
            self.editorActGrp, 'vm_edit_move_right_word')
        self.esm.setMapping(act, QsciScintilla.SCI_WORDRIGHT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Move to first visible character in line'),
            QApplication.translate('ViewManager',
                'Move to first visible character in line'),
            QKeySequence(QApplication.translate('ViewManager', 'Home')), 0,
            self.editorActGrp, 'vm_edit_move_first_visible_char')
        self.esm.setMapping(act, QsciScintilla.SCI_VCHOME)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Move to start of displayed line'),
            QApplication.translate('ViewManager',
                'Move to start of displayed line'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Home')), 0,
            self.editorActGrp, 'vm_edit_move_start_line')
        self.esm.setMapping(act, QsciScintilla.SCI_HOMEDISPLAY)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move to end of line'),
            QApplication.translate('ViewManager', 'Move to end of line'),
            QKeySequence(QApplication.translate('ViewManager', 'End')), 0,
            self.editorActGrp, 'vm_edit_move_end_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Scroll view down one line'),
            QApplication.translate('ViewManager', 'Scroll view down one line'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Down')), 0,
            self.editorActGrp, 'vm_edit_scroll_down_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINESCROLLDOWN)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Scroll view up one line'),
            QApplication.translate('ViewManager', 'Scroll view up one line'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Up')), 0,
            self.editorActGrp, 'vm_edit_scroll_up_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINESCROLLUP)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move up one paragraph'),
            QApplication.translate('ViewManager', 'Move up one paragraph'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Up')), 0,
            self.editorActGrp, 'vm_edit_move_up_para')
        self.esm.setMapping(act, QsciScintilla.SCI_PARAUP)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move down one paragraph'),
            QApplication.translate('ViewManager', 'Move down one paragraph'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Down')), 0,
            self.editorActGrp, 'vm_edit_move_down_para')
        self.esm.setMapping(act, QsciScintilla.SCI_PARADOWN)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move up one page'),
            QApplication.translate('ViewManager', 'Move up one page'),
            QKeySequence(QApplication.translate('ViewManager', 'PgUp')), 0,
            self.editorActGrp, 'vm_edit_move_up_page')
        self.esm.setMapping(act, QsciScintilla.SCI_PAGEUP)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move down one page'),
            QApplication.translate('ViewManager', 'Move down one page'),
            QKeySequence(QApplication.translate('ViewManager', 'PgDown')), 0,
            self.editorActGrp, 'vm_edit_move_down_page')
        self.esm.setMapping(act, QsciScintilla.SCI_PAGEDOWN)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move to start of text'),
            QApplication.translate('ViewManager', 'Move to start of text'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Home')), 0,
            self.editorActGrp, 'vm_edit_move_start_text')
        self.esm.setMapping(act, QsciScintilla.SCI_DOCUMENTSTART)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Move to end of text'),
            QApplication.translate('ViewManager', 'Move to end of text'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+End')), 0,
            self.editorActGrp, 'vm_edit_move_end_text')
        self.esm.setMapping(act, QsciScintilla.SCI_DOCUMENTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Indent one level'),
            QApplication.translate('ViewManager', 'Indent one level'),
            QKeySequence(QApplication.translate('ViewManager', 'Tab')), 0,
            self.editorActGrp, 'vm_edit_indent_one_level')
        self.esm.setMapping(act, QsciScintilla.SCI_TAB)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Unindent one level'),
            QApplication.translate('ViewManager', 'Unindent one level'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+Tab')), 0,
            self.editorActGrp, 'vm_edit_unindent_one_level')
        self.esm.setMapping(act, QsciScintilla.SCI_BACKTAB)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection left one character'),
            QApplication.translate('ViewManager',
                'Extend selection left one character'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+Left')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_left_char')
        self.esm.setMapping(act, QsciScintilla.SCI_CHARLEFTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection right one character'),
            QApplication.translate('ViewManager',
                'Extend selection right one character'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+Right')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_right_char')
        self.esm.setMapping(act, QsciScintilla.SCI_CHARRIGHTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection up one line'),
            QApplication.translate('ViewManager',
                'Extend selection up one line'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+Up')), 0,
            self.editorActGrp, 'vm_edit_extend_selection_up_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEUPEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection down one line'),
            QApplication.translate('ViewManager',
                'Extend selection down one line'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+Down')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_down_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEDOWNEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection left one word part'),
            QApplication.translate('ViewManager',
                'Extend selection left one word part'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Shift+Left')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_left_word_part')
        self.esm.setMapping(act, QsciScintilla.SCI_WORDPARTLEFTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection right one word part'),
            QApplication.translate('ViewManager',
                'Extend selection right one word part'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Shift+Right')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_right_word_part')
        self.esm.setMapping(act, QsciScintilla.SCI_WORDPARTRIGHTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection left one word'),
            QApplication.translate('ViewManager',
                'Extend selection left one word'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Ctrl+Shift+Left')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_left_word')
        self.esm.setMapping(act, QsciScintilla.SCI_WORDLEFTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection right one word'),
            QApplication.translate('ViewManager',
                'Extend selection right one word'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Ctrl+Shift+Right')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_right_word')
        self.esm.setMapping(act, QsciScintilla.SCI_WORDRIGHTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection to first visible character in line'),
            QApplication.translate('ViewManager',
                'Extend selection to first visible character in line'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+Home')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_first_visible_char')
        self.esm.setMapping(act, QsciScintilla.SCI_VCHOMEEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection to start of line'),
            QApplication.translate('ViewManager',
                'Extend selection to start of line'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Shift+Home')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_start_line')
        self.esm.setMapping(act, QsciScintilla.SCI_HOMEDISPLAYEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection to end of line'),
            QApplication.translate('ViewManager',
                'Extend selection to end of line'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+End')), 0,
            self.editorActGrp, 'vm_edit_extend_selection_end_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEENDEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection up one paragraph'),
            QApplication.translate('ViewManager',
                'Extend selection up one paragraph'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Shift+Up')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_up_para')
        self.esm.setMapping(act, QsciScintilla.SCI_PARAUPEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection down one paragraph'),
            QApplication.translate('ViewManager',
                'Extend selection down one paragraph'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Shift+Down')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_down_para')
        self.esm.setMapping(act, QsciScintilla.SCI_PARADOWNEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection up one page'),
            QApplication.translate('ViewManager',
                'Extend selection up one page'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+PgUp')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_up_page')
        self.esm.setMapping(act, QsciScintilla.SCI_PAGEUPEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection down one page'),
            QApplication.translate('ViewManager',
                'Extend selection down one page'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+PgDown')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_down_page')
        self.esm.setMapping(act, QsciScintilla.SCI_PAGEDOWNEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection to start of text'),
            QApplication.translate('ViewManager',
                'Extend selection to start of text'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Ctrl+Shift+Home')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_start_text')
        self.esm.setMapping(act, QsciScintilla.SCI_DOCUMENTSTARTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection to end of text'),
            QApplication.translate('ViewManager',
                'Extend selection to end of text'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Ctrl+Shift+End')),
            0,
            self.editorActGrp, 'vm_edit_extend_selection_end_text')
        self.esm.setMapping(act, QsciScintilla.SCI_DOCUMENTENDEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Delete previous character'),
            QApplication.translate('ViewManager', 'Delete previous character'),
            QKeySequence(QApplication.translate('ViewManager', 'Backspace')),
            QKeySequence(QApplication.translate('ViewManager',
                    'Shift+Backspace')),
            self.editorActGrp, 'vm_edit_delete_previous_char')
        self.esm.setMapping(act, QsciScintilla.SCI_DELETEBACK)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Delete previous character if not at line start'),
            QApplication.translate('ViewManager',
                'Delete previous character if not at line start'),
            0, 0,
            self.editorActGrp, 'vm_edit_delet_previous_char_not_line_start')
        self.esm.setMapping(act, QsciScintilla.SCI_DELETEBACKNOTLINE)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Delete current character'),
            QApplication.translate('ViewManager', 'Delete current character'),
            QKeySequence(QApplication.translate('ViewManager', 'Del')), 0,
            self.editorActGrp, 'vm_edit_delete_current_char')
        self.esm.setMapping(act, QsciScintilla.SCI_CLEAR)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Delete word to left'),
            QApplication.translate('ViewManager', 'Delete word to left'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Ctrl+Backspace')),
            0,
            self.editorActGrp, 'vm_edit_delete_word_left')
        self.esm.setMapping(act, QsciScintilla.SCI_DELWORDLEFT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Delete word to right'),
            QApplication.translate('ViewManager', 'Delete word to right'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Del')), 0,
            self.editorActGrp, 'vm_edit_delete_word_right')
        self.esm.setMapping(act, QsciScintilla.SCI_DELWORDRIGHT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Delete line to left'),
            QApplication.translate('ViewManager', 'Delete line to left'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Ctrl+Shift+Backspace')),
            0,
            self.editorActGrp, 'vm_edit_delete_line_left')
        self.esm.setMapping(act, QsciScintilla.SCI_DELLINELEFT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Delete line to right'),
            QApplication.translate('ViewManager', 'Delete line to right'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Ctrl+Shift+Del')),
            0,
            self.editorActGrp, 'vm_edit_delete_line_right')
        self.esm.setMapping(act, QsciScintilla.SCI_DELLINERIGHT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Insert new line'),
            QApplication.translate('ViewManager', 'Insert new line'),
            QKeySequence(QApplication.translate('ViewManager', 'Return')),
            QKeySequence(QApplication.translate('ViewManager', 'Enter')),
            self.editorActGrp, 'vm_edit_insert_line')
        self.esm.setMapping(act, QsciScintilla.SCI_NEWLINE)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Insert new line below current line'),
            QApplication.translate('ViewManager',
                'Insert new line below current line'),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+Return')),
            QKeySequence(QApplication.translate('ViewManager', 'Shift+Enter')),
            self.editorActGrp, 'vm_edit_insert_line_below')
        self.connect(act, SIGNAL('triggered()'), self.__newLineBelow)
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Delete current line'),
            QApplication.translate('ViewManager', 'Delete current line'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+U')),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Shift+L')),
            self.editorActGrp, 'vm_edit_delete_current_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEDELETE)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Duplicate current line'),
            QApplication.translate('ViewManager', 'Duplicate current line'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+D')), 0,
            self.editorActGrp, 'vm_edit_duplicate_current_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEDUPLICATE)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Swap current and previous lines'),
            QApplication.translate('ViewManager',
                'Swap current and previous lines'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+T')), 0,
            self.editorActGrp, 'vm_edit_swap_current_previous_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINETRANSPOSE)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Cut current line'),
            QApplication.translate('ViewManager', 'Cut current line'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Shift+L')),
            0,
            self.editorActGrp, 'vm_edit_cut_current_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINECUT)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Copy current line'),
            QApplication.translate('ViewManager', 'Copy current line'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Shift+T')),
            0,
            self.editorActGrp, 'vm_edit_copy_current_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINECOPY)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Toggle insert/overtype'),
            QApplication.translate('ViewManager', 'Toggle insert/overtype'),
            QKeySequence(QApplication.translate('ViewManager', 'Ins')), 0,
            self.editorActGrp, 'vm_edit_toggle_insert_overtype')
        self.esm.setMapping(act, QsciScintilla.SCI_EDITTOGGLEOVERTYPE)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Convert selection to lower case'),
            QApplication.translate('ViewManager',
                'Convert selection to lower case'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Shift+U')),
            0,
            self.editorActGrp, 'vm_edit_convert_selection_lower')
        self.esm.setMapping(act, QsciScintilla.SCI_LOWERCASE)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Convert selection to upper case'),
            QApplication.translate('ViewManager',
                'Convert selection to upper case'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Shift+U')),
            0,
            self.editorActGrp, 'vm_edit_convert_selection_upper')
        self.esm.setMapping(act, QsciScintilla.SCI_UPPERCASE)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Move to end of displayed line'),
            QApplication.translate('ViewManager',
                'Move to end of displayed line'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+End')), 0,
            self.editorActGrp, 'vm_edit_move_end_displayed_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEENDDISPLAY)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend selection to end of displayed line'),
            QApplication.translate('ViewManager',
                'Extend selection to end of displayed line'),
            0, 0,
            self.editorActGrp, 'vm_edit_extend_selection_end_displayed_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEENDDISPLAYEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Formfeed'),
            QApplication.translate('ViewManager', 'Formfeed'),
            0, 0,
            self.editorActGrp, 'vm_edit_formfeed')
        self.esm.setMapping(act, QsciScintilla.SCI_FORMFEED)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager', 'Escape'),
            QApplication.translate('ViewManager', 'Escape'),
            QKeySequence(QApplication.translate('ViewManager', 'Esc')), 0,
            self.editorActGrp, 'vm_edit_escape')
        self.esm.setMapping(act, QsciScintilla.SCI_CANCEL)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend rectangular selection down one line'),
            QApplication.translate('ViewManager',
                'Extend rectangular selection down one line'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Ctrl+Down')),
            0,
            self.editorActGrp, 'vm_edit_extend_rect_selection_down_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEDOWNRECTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend rectangular selection up one line'),
            QApplication.translate('ViewManager',
                'Extend rectangular selection up one line'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Ctrl+Up')),
            0,
            self.editorActGrp, 'vm_edit_extend_rect_selection_up_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEUPRECTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend rectangular selection left one character'),
            QApplication.translate('ViewManager',
                'Extend rectangular selection left one character'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Ctrl+Left')),
            0,
            self.editorActGrp, 'vm_edit_extend_rect_selection_left_char')
        self.esm.setMapping(act, QsciScintilla.SCI_CHARLEFTRECTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend rectangular selection right one character'),
            QApplication.translate('ViewManager',
                'Extend rectangular selection right one character'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Ctrl+Right')),
            0,
            self.editorActGrp, 'vm_edit_extend_rect_selection_right_char')
        self.esm.setMapping(act, QsciScintilla.SCI_CHARRIGHTRECTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend rectangular selection to first'
                ' visible character in line'),
            QApplication.translate('ViewManager',
                'Extend rectangular selection to first'
                ' visible character in line'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Ctrl+Home')),
            0,
            self.editorActGrp,
            'vm_edit_extend_rect_selection_first_visible_char')
        self.esm.setMapping(act, QsciScintilla.SCI_VCHOMERECTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend rectangular selection to end of line'),
            QApplication.translate('ViewManager',
                'Extend rectangular selection to end of line'),
            QKeySequence(QApplication.translate('ViewManager', 'Alt+Ctrl+End')),
            0,
            self.editorActGrp, 'vm_edit_extend_rect_selection_end_line')
        self.esm.setMapping(act, QsciScintilla.SCI_LINEENDRECTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend rectangular selection up one page'),
            QApplication.translate('ViewManager',
                'Extend rectangular selection up one page'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Ctrl+PgUp')),
            0,
            self.editorActGrp, 'vm_edit_extend_rect_selection_up_page')
        self.esm.setMapping(act, QsciScintilla.SCI_PAGEUPRECTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Extend rectangular selection down one page'),
            QApplication.translate('ViewManager',
                'Extend rectangular selection down one page'),
            QKeySequence(QApplication.translate('ViewManager',
                    'Alt+Ctrl+PgDown')),
            0,
            self.editorActGrp, 'vm_edit_extend_rect_selection_down_page')
        self.esm.setMapping(act, QsciScintilla.SCI_PAGEDOWNRECTEXTEND)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        act = E4Action(QApplication.translate('ViewManager',
                'Duplicate current selection'),
            QApplication.translate('ViewManager',
                'Duplicate current selection'),
            QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Shift+D')),
            0,
            self.editorActGrp, 'vm_edit_duplicate_current_selection')
        self.esm.setMapping(act, QsciScintilla.SCI_SELECTIONDUPLICATE)
        self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
        self.editActions.append(act)
        self.editorActGrp.setEnabled(False)
    DEDENT
    def initEditMenu(self) :
    INDENT
        autocompletionMenu = QMenu(QApplication.translate('ViewManager', '&Autocomplete'), self.ui)
        autocompletionMenu.setTearOffEnabled(True)
        autocompletionMenu.addAction(self.autoCompleteAct)
        autocompletionMenu.addAction(self.autoCompleteFromDocAct)
        autocompletionMenu.addAction(self.autoCompleteFromAPIsAct)
        autocompletionMenu.addAction(self.autoCompleteFromAllAct)
        autocompletionMenu.addSeparator()
        autocompletionMenu.addAction(self.calltipsAct)
        searchMenu = QMenu(QApplication.translate('ViewManager', '&Search'), self.ui)
        searchMenu.setTearOffEnabled(True)
        searchMenu.addAction(self.quickSearchAct)
        searchMenu.addAction(self.quickSearchBackAct)
        searchMenu.addAction(self.searchAct)
        searchMenu.addAction(self.searchNextAct)
        searchMenu.addAction(self.searchPrevAct)
        searchMenu.addAction(self.replaceAct)
        searchMenu.addSeparator()
        searchMenu.addAction(self.searchClearMarkersAct)
        searchMenu.addSeparator()
        searchMenu.addAction(self.searchFilesAct)
        searchMenu.addAction(self.replaceFilesAct)
        menu = QMenu(QApplication.translate('ViewManager', '&Edit'), self.ui)
        menu.setTearOffEnabled(True)
        menu.addAction(self.undoAct)
        menu.addAction(self.redoAct)
        menu.addAction(self.revertAct)
        menu.addSeparator()
        menu.addAction(self.cutAct)
        menu.addAction(self.copyAct)
        menu.addAction(self.pasteAct)
        menu.addAction(self.deleteAct)
        menu.addSeparator()
        menu.addAction(self.indentAct)
        menu.addAction(self.unindentAct)
        menu.addAction(self.smartIndentAct)
        menu.addSeparator()
        menu.addAction(self.commentAct)
        menu.addAction(self.uncommentAct)
        menu.addAction(self.streamCommentAct)
        menu.addAction(self.boxCommentAct)
        menu.addSeparator()
        menu.addMenu(autocompletionMenu)
        menu.addSeparator()
        menu.addMenu(searchMenu)
        menu.addSeparator()
        menu.addAction(self.gotoAct)
        menu.addAction(self.gotoBraceAct)
        menu.addSeparator()
        menu.addAction(self.selectBraceAct)
        menu.addAction(self.selectAllAct)
        menu.addAction(self.deselectAllAct)
        menu.addSeparator()
        menu.addAction(self.shortenEmptyAct)
        menu.addAction(self.convertEOLAct)
        return menu
    DEDENT
    def initEditToolbar(self, toolbarManager) :
    INDENT
        tb = QToolBar(QApplication.translate('ViewManager', 'Edit'), self.ui)
        tb.setIconSize(UI.Config.ToolBarIconSize)
        tb.setObjectName("EditToolbar")
        tb.setToolTip(QApplication.translate('ViewManager', 'Edit'))
        tb.addAction(self.undoAct)
        tb.addAction(self.redoAct)
        tb.addSeparator()
        tb.addAction(self.cutAct)
        tb.addAction(self.copyAct)
        tb.addAction(self.pasteAct)
        tb.addAction(self.deleteAct)
        tb.addSeparator()
        tb.addAction(self.indentAct)
        tb.addAction(self.unindentAct)
        tb.addSeparator()
        tb.addAction(self.commentAct)
        tb.addAction(self.uncommentAct)
        toolbarManager.addToolBar(tb, tb.windowTitle())
        toolbarManager.addAction(self.smartIndentAct, tb.windowTitle())
        return tb

    DEDENT
    def __initSearchActions(self) :
    INDENT
        self.searchActGrp = createActionGroup(self)
        self.searchAct = E4Action(QApplication.translate('ViewManager', 'Search'),
            UI.PixmapCache.getIcon("find.png"),
            QApplication.translate('ViewManager', '&Search...'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+F", "Search|Search")),
            0,
            self.searchActGrp, 'vm_search')
        self.searchAct.setStatusTip(QApplication.translate('ViewManager',
                'Search for a text'))
        self.searchAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Search</b>"""
                """<p>Search for some text in the current editor. A"""
                """ dialog is shown to enter the searchtext and options"""
                """ for the search.</p>"""))
        self.connect(self.searchAct, SIGNAL('triggered()'), self.__search)
        self.searchActions.append(self.searchAct)
        self.searchNextAct = E4Action(QApplication.translate('ViewManager',
                'Search next'),
            UI.PixmapCache.getIcon("findNext.png"),
            QApplication.translate('ViewManager', 'Search &next'),
            QKeySequence(QApplication.translate('ViewManager',
                    "F3", "Search|Search next")),
            0,
            self.searchActGrp, 'vm_search_next')
        self.searchNextAct.setStatusTip(QApplication.translate('ViewManager',
                'Search next occurrence of text'))
        self.searchNextAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Search next</b>"""
                """<p>Search the next occurrence of some text in the current editor."""
                """ The previously entered searchtext and options are reused.</p>"""))
        self.connect(self.searchNextAct, SIGNAL('triggered()'), self.searchDlg.findNext)
        self.searchActions.append(self.searchNextAct)
        self.searchPrevAct = E4Action(QApplication.translate('ViewManager',
                'Search previous'),
            UI.PixmapCache.getIcon("findPrev.png"),
            QApplication.translate('ViewManager', 'Search &previous'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Shift+F3", "Search|Search previous")),
            0,
            self.searchActGrp, 'vm_search_previous')
        self.searchPrevAct.setStatusTip(QApplication.translate('ViewManager',
                'Search previous occurrence of text'))
        self.searchPrevAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Search previous</b>"""
                """<p>Search the previous occurrence of some text in the current editor."""
                """ The previously entered searchtext and options are reused.</p>"""))
        self.connect(self.searchPrevAct, SIGNAL('triggered()'), self.searchDlg.findPrev)
        self.searchActions.append(self.searchPrevAct)
        self.searchClearMarkersAct = E4Action(QApplication.translate('ViewManager',
                'Clear search markers'),
            UI.PixmapCache.getIcon("findClear.png"),
            QApplication.translate('ViewManager', 'Clear search markers'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+3", "Search|Clear search markers")),
            0,
            self.searchActGrp, 'vm_clear_search_markers')
        self.searchClearMarkersAct.setStatusTip(QApplication.translate('ViewManager',
                'Clear all displayed search markers'))
        self.searchClearMarkersAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Clear search markers</b>"""
                """<p>Clear all displayed search markers.</p>"""))
        self.connect(self.searchClearMarkersAct, SIGNAL('triggered()'),
            self.__searchClearMarkers)
        self.searchActions.append(self.searchClearMarkersAct)
        self.replaceAct = E4Action(QApplication.translate('ViewManager', 'Replace'),
            QApplication.translate('ViewManager', '&Replace...'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+R", "Search|Replace")),
            0,
            self.searchActGrp, 'vm_search_replace')
        self.replaceAct.setStatusTip(QApplication.translate('ViewManager',
                'Replace some text'))
        self.replaceAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Replace</b>"""
                """<p>Search for some text in the current editor and replace it. A"""
                """ dialog is shown to enter the searchtext, the replacement text"""
                """ and options for the search and replace.</p>"""))
        self.connect(self.replaceAct, SIGNAL('triggered()'), self.__replace)
        self.searchActions.append(self.replaceAct)
        self.quickSearchAct = E4Action(QApplication.translate('ViewManager',
                'Quicksearch'),
            UI.PixmapCache.getIcon("quickFindNext.png"),
            QApplication.translate('ViewManager', '&Quicksearch'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Shift+K", "Search|Quicksearch")),
            0,
            self.searchActGrp, 'vm_quicksearch')
        self.quickSearchAct.setStatusTip(QApplication.translate('ViewManager',
                'Perform a quicksearch'))
        self.quickSearchAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Quicksearch</b>"""
                """<p>This activates the quicksearch function of the IDE by"""
                """ giving focus to the quicksearch entry field. If this field"""
                """ is already active and contains text, it searches for the"""
                """ next occurrence of this text.</p>"""))
        self.connect(self.quickSearchAct, SIGNAL('triggered()'), self.__quickSearch)
        self.searchActions.append(self.quickSearchAct)
        self.quickSearchBackAct = E4Action(QApplication.translate('ViewManager',
                'Quicksearch backwards'),
            UI.PixmapCache.getIcon("quickFindPrev.png"),
            QApplication.translate('ViewManager', 'Quicksearch &backwards'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Shift+J", "Search|Quicksearch backwards")),
            0, self.searchActGrp, 'vm_quicksearch_backwards')
        self.quickSearchBackAct.setStatusTip(QApplication.translate('ViewManager',
                'Perform a quicksearch backwards'))
        self.quickSearchBackAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Quicksearch backwards</b>"""
                """<p>This searches the previous occurrence of the quicksearch text.</p>"""))
        self.connect(self.quickSearchBackAct, SIGNAL('triggered()'),
            self.__quickSearchPrev)
        self.searchActions.append(self.quickSearchBackAct)
        self.quickSearchExtendAct = E4Action(QApplication.translate('ViewManager',
                'Quicksearch extend'),
            UI.PixmapCache.getIcon("quickFindExtend.png"),
            QApplication.translate('ViewManager', 'Quicksearch e&xtend'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Shift+H", "Search|Quicksearch extend")),
            0,
            self.searchActGrp, 'vm_quicksearch_extend')
        self.quickSearchExtendAct.setStatusTip(QApplication.translate('ViewManager', 'Extend the quicksearch to the end of the current word'))
        self.quickSearchExtendAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Quicksearch extend</b>"""
                """<p>This extends the quicksearch text to the end of the word"""
                """ currently found.</p>"""))
        self.connect(self.quickSearchExtendAct, SIGNAL('triggered()'),
            self.__quickSearchExtend)
        self.searchActions.append(self.quickSearchExtendAct)
        self.gotoAct = E4Action(QApplication.translate('ViewManager', 'Goto Line'),
            UI.PixmapCache.getIcon("goto.png"),
            QApplication.translate('ViewManager', '&Goto Line...'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+G", "Search|Goto Line")),
            0,
            self.searchActGrp, 'vm_search_goto_line')
        self.gotoAct.setStatusTip(QApplication.translate('ViewManager', 'Goto Line'))
        self.gotoAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Goto Line</b>"""
                """<p>Go to a specific line of text in the current editor."""
                """ A dialog is shown to enter the linenumber.</p>"""))
        self.connect(self.gotoAct, SIGNAL('triggered()'), self.__goto)
        self.searchActions.append(self.gotoAct)
        self.gotoBraceAct = E4Action(QApplication.translate('ViewManager', 'Goto Brace'),
            UI.PixmapCache.getIcon("gotoBrace.png"),
            QApplication.translate('ViewManager', 'Goto &Brace'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+L", "Search|Goto Brace")),
            0,
            self.searchActGrp, 'vm_search_goto_brace')
        self.gotoBraceAct.setStatusTip(QApplication.translate('ViewManager',
                'Goto Brace'))
        self.gotoBraceAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Goto Brace</b>"""
                """<p>Go to the matching brace in the current editor.</p>"""))
        self.connect(self.gotoBraceAct, SIGNAL('triggered()'), self.__gotoBrace)
        self.searchActions.append(self.gotoBraceAct)
        self.searchActGrp.setEnabled(False)
        self.searchFilesAct = E4Action(QApplication.translate('ViewManager',
                'Search in Files'),
            UI.PixmapCache.getIcon("projectFind.png"),
            QApplication.translate('ViewManager', 'Search in &Files...'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Shift+Ctrl+F", "Search|Search Files")),
            0,
            self, 'vm_search_in_files')
        self.searchFilesAct.setStatusTip(QApplication.translate('ViewManager',
                'Search for a text in files'))
        self.searchFilesAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Search in Files</b>"""
                """<p>Search for some text in the files of a directory tree"""
                """ or the project. A dialog is shown to enter the searchtext"""
                """ and options for the search and to display the result.</p>"""))
        self.connect(self.searchFilesAct, SIGNAL('triggered()'), self.__searchFiles)
        self.searchActions.append(self.searchFilesAct)
        self.replaceFilesAct = E4Action(QApplication.translate('ViewManager',
                'Replace in Files'),
            QApplication.translate('ViewManager', 'Replace in F&iles...'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Shift+Ctrl+R", "Search|Replace in Files")),
            0,
            self, 'vm_replace_in_files')
        self.replaceFilesAct.setStatusTip(QApplication.translate('ViewManager',
                'Search for a text in files and replace it'))
        self.replaceFilesAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Replace in Files</b>"""
                """<p>Search for some text in the files of a directory tree"""
                """ or the project and replace it. A dialog is shown to enter"""
                """ the searchtext, the replacement text and options for the"""
                """ search and to display the result.</p>"""))
        self.connect(self.replaceFilesAct, SIGNAL('triggered()'), self.__replaceFiles)
        self.searchActions.append(self.replaceFilesAct)
    DEDENT
    def initSearchToolbars(self, toolbarManager) :
    INDENT
        qtb = QToolBar(QApplication.translate('ViewManager', 'Quicksearch'), self.ui)
        qtb.setIconSize(UI.Config.ToolBarIconSize)
        qtb.setObjectName("QuicksearchToolbar")
        qtb.setToolTip(QApplication.translate('ViewManager', 'Quicksearch'))
        self.quickFindLineEdit = QuickSearchLineEdit(self)
        self.quickFindtextCombo = QComboBox(self)
        self.quickFindtextCombo.setEditable(True)
        self.quickFindtextCombo.setLineEdit(self.quickFindLineEdit)
        self.quickFindtextCombo.setDuplicatesEnabled(False)
        self.quickFindtextCombo.setInsertPolicy(QComboBox.InsertAtTop)
        self.quickFindtextCombo.lastActive = None
        self.quickFindtextCombo.lastCursorPos = None
        self.quickFindtextCombo.leForegroundColor = self.quickFindtextCombo.lineEdit().palette().color(QPalette.Text)
        self.quickFindtextCombo.leBackgroundColor = self.quickFindtextCombo.lineEdit().palette().color(QPalette.Base)
        self.quickFindtextCombo.lastSearchText = QString()
        self.quickFindtextCombo._editor = self.quickFindtextCombo.lineEdit()

        self.quickFindtextCombo.setAutoCompletion(False)
        self.quickFindtextCombo.setMinimumWidth(250)
        self.quickFindtextCombo.addItem("")
        self.quickFindtextCombo.setWhatsThis(QApplication.translate('ViewManager',
                """<p>Enter the searchtext directly into this field."""
                """ The search will be performed case insensitive."""
                """ The quicksearch function is activated upon activation"""
                """ of the quicksearch next action (default key Ctrl+Shift+K),"""
                """ if this entry field does not have the input focus."""
                """ Otherwise it searches for the next occurrence of the"""
                """ text entered. The quicksearch backwards action"""
                """ (default key Ctrl+Shift+J) searches backward."""
                """ Activating the 'quicksearch extend' action"""
                """ (default key Ctrl+Shift+H) extends the current"""
                """ searchtext to the end of the currently found word."""
                """ The quicksearch can be ended by pressing the Return key"""
                """ while the quicksearch entry has the the input focus.</p>"""))
        self.connect(self.quickFindtextCombo._editor, SIGNAL('returnPressed()'),
            self.__quickSearchEnter)
        self.connect(self.quickFindtextCombo._editor,
            SIGNAL('textChanged(const QString&)'), self.__quickSearchText)
        self.connect(self.quickFindtextCombo._editor, SIGNAL('escPressed()'),
            self.__quickSearchEscape)
        self.connect(self.quickFindtextCombo._editor, SIGNAL('gotFocus()'),
            self.__quickSearchFocusIn)
        self.quickFindtextAction = QWidgetAction(self)
        self.quickFindtextAction.setDefaultWidget(self.quickFindtextCombo)
        self.quickFindtextAction.setObjectName("vm_quickfindtext_action")
        self.quickFindtextAction.setText(self.trUtf8("Quicksearch Textedit"))
        qtb.addAction(self.quickFindtextAction)
        qtb.addAction(self.quickSearchAct)
        qtb.addAction(self.quickSearchBackAct)
        qtb.addAction(self.quickSearchExtendAct)
        self.quickFindtextCombo.setEnabled(False)
        tb = QToolBar(QApplication.translate('ViewManager', 'Search'), self.ui)
        tb.setIconSize(UI.Config.ToolBarIconSize)
        tb.setObjectName("SearchToolbar")
        tb.setToolTip(QApplication.translate('ViewManager', 'Search'))
        tb.addAction(self.searchAct)
        tb.addAction(self.searchNextAct)
        tb.addAction(self.searchPrevAct)
        tb.addSeparator()
        tb.addAction(self.searchClearMarkersAct)
        tb.addSeparator()
        tb.addAction(self.searchFilesAct)
        tb.setAllowedAreas(Qt.ToolBarAreas(Qt.TopToolBarArea | Qt.BottomToolBarArea))
        toolbarManager.addToolBar(qtb, qtb.windowTitle())
        toolbarManager.addToolBar(tb, tb.windowTitle())
        toolbarManager.addAction(self.gotoAct, tb.windowTitle())
        toolbarManager.addAction(self.gotoBraceAct, tb.windowTitle())
        return tb, qtb

    DEDENT
    def __initViewActions(self) :
    INDENT
        self.viewActGrp = createActionGroup(self)
        self.viewFoldActGrp = createActionGroup(self)
        self.zoomInAct = E4Action(QApplication.translate('ViewManager', 'Zoom in'),
            UI.PixmapCache.getIcon("zoomIn.png"),
            QApplication.translate('ViewManager', 'Zoom &in'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl++", "View|Zoom in")),
            0,
            self.viewActGrp, 'vm_view_zoom_in')
        self.zoomInAct.setStatusTip(QApplication.translate('ViewManager',
                'Zoom in on the text'))
        self.zoomInAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Zoom in</b>"""
                """<p>Zoom in on the text. This makes the text bigger.</p>"""))
        self.connect(self.zoomInAct, SIGNAL('triggered()'), self.__zoomIn)
        self.viewActions.append(self.zoomInAct)
        self.zoomOutAct = E4Action(QApplication.translate('ViewManager', 'Zoom out'),
            UI.PixmapCache.getIcon("zoomOut.png"),
            QApplication.translate('ViewManager', 'Zoom &out'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+-", "View|Zoom out")),
            0,
            self.viewActGrp, 'vm_view_zoom_out')
        self.zoomOutAct.setStatusTip(QApplication.translate('ViewManager',
                'Zoom out on the text'))
        self.zoomOutAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Zoom out</b>"""
                """<p>Zoom out on the text. This makes the text smaller.</p>"""))
        self.connect(self.zoomOutAct, SIGNAL('triggered()'), self.__zoomOut)
        self.viewActions.append(self.zoomOutAct)
        self.zoomToAct = E4Action(QApplication.translate('ViewManager', 'Zoom'),
            UI.PixmapCache.getIcon("zoomTo.png"),
            QApplication.translate('ViewManager', '&Zoom'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+#", "View|Zoom")),
            0,
            self.viewActGrp, 'vm_view_zoom')
        self.zoomToAct.setStatusTip(QApplication.translate('ViewManager',
                'Zoom the text'))
        self.zoomToAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Zoom</b>"""
                """<p>Zoom the text. This opens a dialog where the"""
                """ desired size can be entered.</p>"""))
        self.connect(self.zoomToAct, SIGNAL('triggered()'), self.__zoom)
        self.viewActions.append(self.zoomToAct)
        self.toggleAllAct = E4Action(QApplication.translate('ViewManager',
                'Toggle all folds'),
            QApplication.translate('ViewManager', 'Toggle &all folds'),
            0, 0, self.viewFoldActGrp, 'vm_view_toggle_all_folds')
        self.toggleAllAct.setStatusTip(QApplication.translate('ViewManager',
                'Toggle all folds'))
        self.toggleAllAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Toggle all folds</b>"""
                """<p>Toggle all folds of the current editor.</p>"""))
        self.connect(self.toggleAllAct, SIGNAL('triggered()'), self.__toggleAll)
        self.viewActions.append(self.toggleAllAct)
        self.toggleAllChildrenAct = E4Action(QApplication.translate('ViewManager',
                'Toggle all folds (including children)'),
            QApplication.translate('ViewManager',
                'Toggle all &folds (including children)'),
            0, 0, self.viewFoldActGrp, 'vm_view_toggle_all_folds_children')
        self.toggleAllChildrenAct.setStatusTip(QApplication.translate('ViewManager',
                'Toggle all folds (including children)'))
        self.toggleAllChildrenAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Toggle all folds (including children)</b>"""
                """<p>Toggle all folds of the current editor including"""
                """ all children.</p>"""))
        self.connect(self.toggleAllChildrenAct, SIGNAL('triggered()'),
            self.__toggleAllChildren)
        self.viewActions.append(self.toggleAllChildrenAct)
        self.toggleCurrentAct = E4Action(QApplication.translate('ViewManager',
                'Toggle current fold'),
            QApplication.translate('ViewManager', 'Toggle &current fold'),
            0, 0, self.viewFoldActGrp, 'vm_view_toggle_current_fold')
        self.toggleCurrentAct.setStatusTip(QApplication.translate('ViewManager',
                'Toggle current fold'))
        self.toggleCurrentAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Toggle current fold</b>"""
                """<p>Toggle the folds of the current line of the current editor.</p>"""))
        self.connect(self.toggleCurrentAct, SIGNAL('triggered()'), self.__toggleCurrent)
        self.viewActions.append(self.toggleCurrentAct)
        self.unhighlightAct = E4Action(QApplication.translate('ViewManager',
                'Remove all highlights'),
            UI.PixmapCache.getIcon("unhighlight.png"),
            QApplication.translate('ViewManager',
                'Remove all highlights'),
            0, 0, self, 'vm_view_unhighlight')
        self.unhighlightAct.setStatusTip(QApplication.translate('ViewManager',
                'Remove all highlights'))
        self.unhighlightAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Remove all highlights</b>"""
                """<p>Remove the highlights of all editors.</p>"""))
        self.connect(self.unhighlightAct, SIGNAL('triggered()'), self.unhighlight)
        self.viewActions.append(self.unhighlightAct)
        self.splitViewAct = E4Action(QApplication.translate('ViewManager', 'Split view'),
            UI.PixmapCache.getIcon("splitVertical.png"),
            QApplication.translate('ViewManager', '&Split view'),
            0, 0, self, 'vm_view_split_view')
        self.splitViewAct.setStatusTip(QApplication.translate('ViewManager',
                'Add a split to the view'))
        self.splitViewAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Split view</b>"""
                """<p>Add a split to the view.</p>"""))
        self.connect(self.splitViewAct, SIGNAL('triggered()'), self.__splitView)
        self.viewActions.append(self.splitViewAct)
        self.splitOrientationAct = E4Action(QApplication.translate('ViewManager',
                'Arrange horizontally'),
            QApplication.translate('ViewManager',
                'Arrange &horizontally'),
            0, 0, self, 'vm_view_arrange_horizontally', True)
        self.splitOrientationAct.setStatusTip(QApplication.translate('ViewManager',
                'Arrange the splitted views horizontally'))
        self.splitOrientationAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Arrange horizontally</b>"""
                """<p>Arrange the splitted views horizontally.</p>"""))
        self.splitOrientationAct.setChecked(False)
        self.connect(self.splitOrientationAct, SIGNAL('toggled(bool)'),
            self.__splitOrientation)
        self.viewActions.append(self.splitOrientationAct)
        self.splitRemoveAct = E4Action(QApplication.translate('ViewManager',
                'Remove split'),
            UI.PixmapCache.getIcon("remsplitVertical.png"),
            QApplication.translate('ViewManager', '&Remove split'),
            0, 0, self, 'vm_view_remove_split')
        self.splitRemoveAct.setStatusTip(QApplication.translate('ViewManager',
                'Remove the current split'))
        self.splitRemoveAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Remove split</b>"""
                """<p>Remove the current split.</p>"""))
        self.connect(self.splitRemoveAct, SIGNAL('triggered()'), self.removeSplit)
        self.viewActions.append(self.splitRemoveAct)
        self.nextSplitAct = E4Action(QApplication.translate('ViewManager', 'Next split'),
            QApplication.translate('ViewManager', '&Next split'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Alt+N", "View|Next split")),
            0,
            self, 'vm_next_split')
        self.nextSplitAct.setStatusTip(QApplication.translate('ViewManager',
                'Move to the next split'))
        self.nextSplitAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Next split</b>"""
                """<p>Move to the next split.</p>"""))
        self.connect(self.nextSplitAct, SIGNAL('triggered()'), self.nextSplit)
        self.viewActions.append(self.nextSplitAct)
        self.prevSplitAct = E4Action(QApplication.translate('ViewManager',
                'Previous split'),
            QApplication.translate('ViewManager', '&Previous split'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+Alt+P", "View|Previous split")),
            0, self, 'vm_previous_split')
        self.prevSplitAct.setStatusTip(QApplication.translate('ViewManager',
                'Move to the previous split'))
        self.prevSplitAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Previous split</b>"""
                """<p>Move to the previous split.</p>"""))
        self.connect(self.prevSplitAct, SIGNAL('triggered()'), self.prevSplit)
        self.viewActions.append(self.prevSplitAct)
        self.viewActGrp.setEnabled(False)
        self.viewFoldActGrp.setEnabled(False)
        self.unhighlightAct.setEnabled(False)
        self.splitViewAct.setEnabled(False)
        self.splitOrientationAct.setEnabled(False)
        self.splitRemoveAct.setEnabled(False)
        self.nextSplitAct.setEnabled(False)
        self.prevSplitAct.setEnabled(False)
    DEDENT
    def initViewMenu(self) :
    INDENT
        menu = QMenu(QApplication.translate('ViewManager', '&View'), self.ui)
        menu.setTearOffEnabled(True)
        menu.addActions(self.viewActGrp.actions())
        menu.addSeparator()
        menu.addActions(self.viewFoldActGrp.actions())
        menu.addSeparator()
        menu.addAction(self.unhighlightAct)
        if self.canSplit() :
        INDENT
            menu.addSeparator()
            menu.addAction(self.splitViewAct)
            menu.addAction(self.splitOrientationAct)
            menu.addAction(self.splitRemoveAct)
            menu.addAction(self.nextSplitAct)
            menu.addAction(self.prevSplitAct)
        DEDENT
        return menu
    DEDENT
    def initViewToolbar(self, toolbarManager) :
    INDENT
        tb = QToolBar(QApplication.translate('ViewManager', 'View'), self.ui)
        tb.setIconSize(UI.Config.ToolBarIconSize)
        tb.setObjectName("ViewToolbar")
        tb.setToolTip(QApplication.translate('ViewManager', 'View'))
        tb.addActions(self.viewActGrp.actions())
        toolbarManager.addToolBar(tb, tb.windowTitle())
        toolbarManager.addAction(self.unhighlightAct, tb.windowTitle())
        toolbarManager.addAction(self.splitViewAct, tb.windowTitle())
        toolbarManager.addAction(self.splitRemoveAct, tb.windowTitle())
        return tb

    DEDENT
    def __initMacroActions(self) :
    INDENT
        self.macroActGrp = createActionGroup(self)
        self.macroStartRecAct = E4Action(QApplication.translate('ViewManager',
                'Start Macro Recording'),
            QApplication.translate('ViewManager',
                'S&tart Macro Recording'),
            0, 0, self.macroActGrp, 'vm_macro_start_recording')
        self.macroStartRecAct.setStatusTip(QApplication.translate('ViewManager',
                'Start Macro Recording'))
        self.macroStartRecAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Start Macro Recording</b>"""
                """<p>Start recording editor commands into a new macro.</p>"""))
        self.connect(self.macroStartRecAct, SIGNAL('triggered()'),
            self.__macroStartRecording)
        self.macroActions.append(self.macroStartRecAct)
        self.macroStopRecAct = E4Action(QApplication.translate('ViewManager',
                'Stop Macro Recording'),
            QApplication.translate('ViewManager',
                'Sto&p Macro Recording'),
            0, 0, self.macroActGrp, 'vm_macro_stop_recording')
        self.macroStopRecAct.setStatusTip(QApplication.translate('ViewManager',
                'Stop Macro Recording'))
        self.macroStopRecAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Stop Macro Recording</b>"""
                """<p>Stop recording editor commands into a new macro.</p>"""))
        self.connect(self.macroStopRecAct, SIGNAL('triggered()'),
            self.__macroStopRecording)
        self.macroActions.append(self.macroStopRecAct)
        self.macroRunAct = E4Action(QApplication.translate('ViewManager', 'Run Macro'),
            QApplication.translate('ViewManager', '&Run Macro'),
            0, 0, self.macroActGrp, 'vm_macro_run')
        self.macroRunAct.setStatusTip(QApplication.translate('ViewManager', 'Run Macro'))
        self.macroRunAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Run Macro</b>"""
                """<p>Run a previously recorded editor macro.</p>"""))
        self.connect(self.macroRunAct, SIGNAL('triggered()'), self.__macroRun)
        self.macroActions.append(self.macroRunAct)
        self.macroDeleteAct = E4Action(QApplication.translate('ViewManager',
                'Delete Macro'),
            QApplication.translate('ViewManager', '&Delete Macro'),
            0, 0, self.macroActGrp, 'vm_macro_delete')
        self.macroDeleteAct.setStatusTip(QApplication.translate('ViewManager',
                'Delete Macro'))
        self.macroDeleteAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Delete Macro</b>"""
                """<p>Delete a previously recorded editor macro.</p>"""))
        self.connect(self.macroDeleteAct, SIGNAL('triggered()'), self.__macroDelete)
        self.macroActions.append(self.macroDeleteAct)
        self.macroLoadAct = E4Action(QApplication.translate('ViewManager', 'Load Macro'),
            QApplication.translate('ViewManager', '&Load Macro'),
            0, 0, self.macroActGrp, 'vm_macro_load')
        self.macroLoadAct.setStatusTip(QApplication.translate('ViewManager',
                'Load Macro'))
        self.macroLoadAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Load Macro</b>"""
                """<p>Load an editor macro from a file.</p>"""))
        self.connect(self.macroLoadAct, SIGNAL('triggered()'), self.__macroLoad)
        self.macroActions.append(self.macroLoadAct)
        self.macroSaveAct = E4Action(QApplication.translate('ViewManager', 'Save Macro'),
            QApplication.translate('ViewManager', '&Save Macro'),
            0, 0, self.macroActGrp, 'vm_macro_save')
        self.macroSaveAct.setStatusTip(QApplication.translate('ViewManager',
                'Save Macro'))
        self.macroSaveAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Save Macro</b>"""
                """<p>Save a previously recorded editor macro to a file.</p>"""))
        self.connect(self.macroSaveAct, SIGNAL('triggered()'), self.__macroSave)
        self.macroActions.append(self.macroSaveAct)
        self.macroActGrp.setEnabled(False)
    DEDENT
    def initMacroMenu(self) :
    INDENT
        menu = QMenu(QApplication.translate('ViewManager', "&Macros"), self.ui)
        menu.setTearOffEnabled(True)
        menu.addActions(self.macroActGrp.actions())
        return menu

    DEDENT
    def __initBookmarkActions(self) :
    INDENT
        self.bookmarkActGrp = createActionGroup(self)
        self.bookmarkToggleAct = E4Action(QApplication.translate('ViewManager',
                'Toggle Bookmark'),
            UI.PixmapCache.getIcon("bookmarkToggle.png"),
            QApplication.translate('ViewManager', '&Toggle Bookmark'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Alt+Ctrl+T", "Bookmark|Toggle")), 0,
            self.bookmarkActGrp, 'vm_bookmark_toggle')
        self.bookmarkToggleAct.setStatusTip(QApplication.translate('ViewManager',
                'Toggle Bookmark'))
        self.bookmarkToggleAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Toggle Bookmark</b>"""
                """<p>Toggle a bookmark at the current line of the current editor.</p>"""))
        self.connect(self.bookmarkToggleAct, SIGNAL('triggered()'), self.__toggleBookmark)
        self.bookmarkActions.append(self.bookmarkToggleAct)
        self.bookmarkNextAct = E4Action(QApplication.translate('ViewManager',
                'Next Bookmark'),
            UI.PixmapCache.getIcon("bookmarkNext.png"),
            QApplication.translate('ViewManager', '&Next Bookmark'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+PgDown", "Bookmark|Next")), 0,
            self.bookmarkActGrp, 'vm_bookmark_next')
        self.bookmarkNextAct.setStatusTip(QApplication.translate('ViewManager',
                'Next Bookmark'))
        self.bookmarkNextAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Next Bookmark</b>"""
                """<p>Go to next bookmark of the current editor.</p>"""))
        self.connect(self.bookmarkNextAct, SIGNAL('triggered()'), self.__nextBookmark)
        self.bookmarkActions.append(self.bookmarkNextAct)
        self.bookmarkPreviousAct = E4Action(QApplication.translate('ViewManager',
                'Previous Bookmark'),
            UI.PixmapCache.getIcon("bookmarkPrevious.png"),
            QApplication.translate('ViewManager', '&Previous Bookmark'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Ctrl+PgUp", "Bookmark|Previous")),
            0, self.bookmarkActGrp, 'vm_bookmark_previous')
        self.bookmarkPreviousAct.setStatusTip(QApplication.translate('ViewManager',
                'Previous Bookmark'))
        self.bookmarkPreviousAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Previous Bookmark</b>"""
                """<p>Go to previous bookmark of the current editor.</p>"""))
        self.connect(self.bookmarkPreviousAct, SIGNAL('triggered()'),
            self.__previousBookmark)
        self.bookmarkActions.append(self.bookmarkPreviousAct)
        self.bookmarkClearAct = E4Action(QApplication.translate('ViewManager',
                'Clear Bookmarks'),
            QApplication.translate('ViewManager', '&Clear Bookmarks'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Alt+Ctrl+C", "Bookmark|Clear")),
            0,
            self.bookmarkActGrp, 'vm_bookmark_clear')
        self.bookmarkClearAct.setStatusTip(QApplication.translate('ViewManager',
                'Clear Bookmarks'))
        self.bookmarkClearAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Clear Bookmarks</b>"""
                """<p>Clear bookmarks of all editors.</p>"""))
        self.connect(self.bookmarkClearAct, SIGNAL('triggered()'),
            self.__clearAllBookmarks)
        self.bookmarkActions.append(self.bookmarkClearAct)
        self.syntaxErrorGotoAct = E4Action(QApplication.translate('ViewManager',
                'Goto Syntax Error'),
            UI.PixmapCache.getIcon("syntaxErrorGoto.png"),
            QApplication.translate('ViewManager', '&Goto Syntax Error'),
            0, 0,
            self.bookmarkActGrp, 'vm_syntaxerror_goto')
        self.syntaxErrorGotoAct.setStatusTip(QApplication.translate('ViewManager',
                'Goto Syntax Error'))
        self.syntaxErrorGotoAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Goto Syntax Error</b>"""
                """<p>Go to next syntax error of the current editor.</p>"""))
        self.connect(self.syntaxErrorGotoAct, SIGNAL('triggered()'), self.__gotoSyntaxError)
        self.bookmarkActions.append(self.syntaxErrorGotoAct)
        self.syntaxErrorClearAct = E4Action(QApplication.translate('ViewManager',
                'Clear Syntax Errors'),
            QApplication.translate('ViewManager', 'Clear &Syntax Errors'),
            0, 0,
            self.bookmarkActGrp, 'vm_syntaxerror_clear')
        self.syntaxErrorClearAct.setStatusTip(QApplication.translate('ViewManager',
                'Clear Syntax Errors'))
        self.syntaxErrorClearAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Clear Syntax Errors</b>"""
                """<p>Clear syntax errors of all editors.</p>"""))
        self.connect(self.syntaxErrorClearAct, SIGNAL('triggered()'),
            self.__clearAllSyntaxErrors)
        self.bookmarkActions.append(self.syntaxErrorClearAct)
        self.notcoveredNextAct = E4Action(QApplication.translate('ViewManager',
                'Next uncovered line'),
            UI.PixmapCache.getIcon("notcoveredNext.png"),
            QApplication.translate('ViewManager', '&Next uncovered line'),
            0, 0,
            self.bookmarkActGrp, 'vm_uncovered_next')
        self.notcoveredNextAct.setStatusTip(QApplication.translate('ViewManager',
                'Next uncovered line'))
        self.notcoveredNextAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Next uncovered line</b>"""
                """<p>Go to next line of the current editor marked as not covered.</p>"""))
        self.connect(self.notcoveredNextAct, SIGNAL('triggered()'), self.__nextUncovered)
        self.bookmarkActions.append(self.notcoveredNextAct)
        self.notcoveredPreviousAct = E4Action(QApplication.translate('ViewManager',
                'Previous uncovered line'),
            UI.PixmapCache.getIcon("notcoveredPrev.png"),
            QApplication.translate('ViewManager',
                '&Previous uncovered line'),
            0, 0,
            self.bookmarkActGrp, 'vm_uncovered_previous')
        self.notcoveredPreviousAct.setStatusTip(QApplication.translate('ViewManager',
                'Previous uncovered line'))
        self.notcoveredPreviousAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Previous uncovered line</b>"""
                """<p>Go to previous line of the current editor marked"""
                """ as not covered.</p>"""))
        self.connect(self.notcoveredPreviousAct, SIGNAL('triggered()'),
            self.__previousUncovered)
        self.bookmarkActions.append(self.notcoveredPreviousAct)
        self.taskNextAct = E4Action(QApplication.translate('ViewManager',
                'Next Task'),
            UI.PixmapCache.getIcon("taskNext.png"),
            QApplication.translate('ViewManager', '&Next Task'),
            0, 0,
            self.bookmarkActGrp, 'vm_task_next')
        self.taskNextAct.setStatusTip(QApplication.translate('ViewManager',
                'Next Task'))
        self.taskNextAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Next Task</b>"""
                """<p>Go to next line of the current editor having a task.</p>"""))
        self.connect(self.taskNextAct, SIGNAL('triggered()'), self.__nextTask)
        self.bookmarkActions.append(self.taskNextAct)
        self.taskPreviousAct = E4Action(QApplication.translate('ViewManager',
                'Previous Task'),
            UI.PixmapCache.getIcon("taskPrev.png"),
            QApplication.translate('ViewManager',
                '&Previous Task'),
            0, 0,
            self.bookmarkActGrp, 'vm_task_previous')
        self.taskPreviousAct.setStatusTip(QApplication.translate('ViewManager',
                'Previous Task'))
        self.taskPreviousAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Previous Task</b>"""
                """<p>Go to previous line of the current editor having a task.</p>"""))
        self.connect(self.taskPreviousAct, SIGNAL('triggered()'), self.__previousTask)
        self.bookmarkActions.append(self.taskPreviousAct)
        self.bookmarkActGrp.setEnabled(False)
    DEDENT
    def initBookmarkMenu(self) :
    INDENT
        menu = QMenu(QApplication.translate('ViewManager', '&Bookmarks'), self.ui)
        self.bookmarksMenu = QMenu(QApplication.translate('ViewManager', '&Bookmarks'),
            menu)
        menu.setTearOffEnabled(True)
        menu.addAction(self.bookmarkToggleAct)
        menu.addAction(self.bookmarkNextAct)
        menu.addAction(self.bookmarkPreviousAct)
        menu.addAction(self.bookmarkClearAct)
        menu.addSeparator()
        self.menuBookmarksAct = menu.addMenu(self.bookmarksMenu)
        menu.addSeparator()
        menu.addAction(self.syntaxErrorGotoAct)
        menu.addAction(self.syntaxErrorClearAct)
        menu.addSeparator()
        menu.addAction(self.notcoveredNextAct)
        menu.addAction(self.notcoveredPreviousAct)
        menu.addSeparator()
        menu.addAction(self.taskNextAct)
        menu.addAction(self.taskPreviousAct)
        self.connect(self.bookmarksMenu, SIGNAL('aboutToShow()'),
            self.__showBookmarksMenu)
        self.connect(self.bookmarksMenu, SIGNAL('triggered(QAction *)'),
            self.__bookmarkSelected)
        self.connect(menu, SIGNAL('aboutToShow()'), self.__showBookmarkMenu)
        return menu
    DEDENT
    def initBookmarkToolbar(self, toolbarManager) :
    INDENT
        tb = QToolBar(QApplication.translate('ViewManager', 'Bookmarks'), self.ui)
        tb.setIconSize(UI.Config.ToolBarIconSize)
        tb.setObjectName("BookmarksToolbar")
        tb.setToolTip(QApplication.translate('ViewManager', 'Bookmarks'))
        tb.addAction(self.bookmarkToggleAct)
        tb.addAction(self.bookmarkNextAct)
        tb.addAction(self.bookmarkPreviousAct)
        tb.addSeparator()
        tb.addAction(self.syntaxErrorGotoAct)
        tb.addSeparator()
        tb.addAction(self.taskNextAct)
        tb.addAction(self.taskPreviousAct)
        toolbarManager.addToolBar(tb, tb.windowTitle())
        toolbarManager.addAction(self.notcoveredNextAct, tb.windowTitle())
        toolbarManager.addAction(self.notcoveredPreviousAct, tb.windowTitle())
        return tb

    DEDENT
    def __initSpellingActions(self) :
    INDENT
        self.spellingActGrp = createActionGroup(self)
        self.spellCheckAct = E4Action(QApplication.translate('ViewManager',
                'Spell check'),
            UI.PixmapCache.getIcon("spellchecking.png"),
            QApplication.translate('ViewManager',
                '&Spell Check...'),
            QKeySequence(QApplication.translate('ViewManager',
                    "Shift+F7", "Spelling|Spell Check")),
            0,
            self.spellingActGrp, 'vm_spelling_spellcheck')
        self.spellCheckAct.setStatusTip(QApplication.translate('ViewManager',
                'Perform spell check of current editor'))
        self.spellCheckAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Spell check</b>"""
                """<p>Perform a spell check of the current editor.</p>"""))
        self.connect(self.spellCheckAct, SIGNAL('triggered()'), self.__spellCheck)
        self.spellingActions.append(self.spellCheckAct)
        self.autoSpellCheckAct = E4Action(QApplication.translate('ViewManager',
                'Automatic spell checking'),
            UI.PixmapCache.getIcon("autospellchecking.png"),
            QApplication.translate('ViewManager',
                '&Automatic spell checking'),
            0, 0,
            self.spellingActGrp, 'vm_spelling_autospellcheck')
        self.autoSpellCheckAct.setStatusTip(QApplication.translate('ViewManager',
                '(De-)Activate automatic spell checking'))
        self.autoSpellCheckAct.setWhatsThis(QApplication.translate('ViewManager',
                """<b>Automatic spell checking</b>"""
                """<p>Activate or deactivate the automatic spell checking function of"""
                """ all editors.</p>"""))
        self.autoSpellCheckAct.setCheckable(True)
        self.autoSpellCheckAct.setChecked(
            Preferences.getEditor("AutoSpellCheckingEnabled"))
        self.connect(self.autoSpellCheckAct, SIGNAL('triggered()'),
            self.__setAutoSpellChecking)
        self.spellingActions.append(self.autoSpellCheckAct)
        self.__enableSpellingActions()
    DEDENT
    def __enableSpellingActions(self) :
    INDENT
        spellingAvailable = SpellChecker.isAvailable()
        self.spellCheckAct.setEnabled(len(self.editors) ! = 0 and spellingAvailable)
        self.autoSpellCheckAct.setEnabled(spellingAvailable)
    DEDENT
    def addToExtrasMenu(self, menu) :
    INDENT
        menu.addAction(self.spellCheckAct)
        menu.addAction(self.autoSpellCheckAct)
        menu.addSeparator()
    DEDENT
    def initSpellingToolbar(self, toolbarManager) :
    INDENT
        tb = QToolBar(QApplication.translate('ViewManager', 'Spelling'), self.ui)
        tb.setIconSize(UI.Config.ToolBarIconSize)
        tb.setObjectName("SpellingToolbar")
        tb.setToolTip(QApplication.translate('ViewManager', 'Spelling'))
        tb.addAction(self.spellCheckAct)
        tb.addAction(self.autoSpellCheckAct)
        toolbarManager.addToolBar(tb, tb.windowTitle())
        return tb

    DEDENT
    def openFiles(self, prog = None) :
    INDENT
        if prog is None :
        INDENT
            filter = self._getOpenFileFilter()
            progs = KQFileDialog.getOpenFileNames(self.ui,
                QApplication.translate('ViewManager', "Open files"),
                self._getOpenStartDir(),
                QScintilla.Lexers.getOpenFileFiltersList(True, True),
                filter)
        DEDENT
        else :
        INDENT
            progs = [prog]
        DEDENT
        for prog in progs :
        INDENT
            prog = Utilities.normabspath(unicode(prog))
            self.openSourceFile(prog)
        DEDENT
    DEDENT
    def checkDirty(self, editor, autosave = False) :
    INDENT
        if editor.isModified() :
        INDENT
            fn = editor.getFileName()

            if fn and self.getOpenEditorCount(fn) > 1 :
            INDENT
                return True
            DEDENT
            if fn is None :
            INDENT
                fn = editor.getNoName()
                autosave = False
            DEDENT
            if autosave :
            INDENT
                res = QMessageBox.Save
            DEDENT
            else :
            INDENT
                res = KQMessageBox.warning(self.ui,
                    QApplication.translate('ViewManager', "File Modified"),
                    QApplication.translate('ViewManager',
                        """<p>The file <b>%1</b> has unsaved changes.</p>""")
                    .arg(fn),
                    QMessageBox.StandardButtons(QMessageBox.Abort | QMessageBox.Discard | QMessageBox.Save),
                    QMessageBox.Save)
            DEDENT
            if res == QMessageBox.Save :
            INDENT
                ok, newName = editor.saveFile()
                if ok :
                INDENT
                    self.setEditorName(editor, newName)
                DEDENT
                return ok
            DEDENT
            elif res == QMessageBox.Abort or res == QMessageBox.Cancel :
            INDENT
                return False
            DEDENT
        DEDENT
        return True
    DEDENT
    def checkAllDirty(self) :
    INDENT
        for editor in self.editors :
        INDENT
            if not self.checkDirty(editor) :
            INDENT
                return False
            DEDENT
        DEDENT
        return True
    DEDENT
    def closeEditor(self, editor) :
    INDENT
        if not self.checkDirty(editor) :
        INDENT
            return False

        DEDENT
        fn = editor.getFileName()

        self._removeView(editor)
        self.editors.remove(editor)

        if fn and self.getOpenEditor(fn) is None :
        INDENT
            self.emit(SIGNAL('editorClosed'), fn)
        DEDENT
        self.emit(SIGNAL('editorClosedEd'), editor)

        if not len(self.editors) :
        INDENT
            self.__lastEditorClosed()
            self.emit(SIGNAL('lastEditorClosed'))
        DEDENT
        return True
    DEDENT
    def closeCurrentWindow(self) :
    INDENT
        aw = self.activeWindow()
        if aw is None :
        INDENT
            return False
        DEDENT
        res = self.closeEditor(aw)
        if res and aw == self.currentEditor :
        INDENT
            self.currentEditor = None
        DEDENT
        return res
    DEDENT
    def closeAllWindows(self) :
    INDENT
        savedEditors = self.editors [:]
        for editor in savedEditors :
        INDENT
            self.closeEditor(editor)
        DEDENT
    DEDENT
    def closeWindow(self, fn) :
    INDENT
        for editor in self.editors :
        INDENT
            if Utilities.samepath(fn, editor.getFileName()) :
            INDENT
                break
            DEDENT
        DEDENT
        else :
        INDENT
            return True
        DEDENT
        res = self.closeEditor(editor)
        if res and editor == self.currentEditor :
        INDENT
            self.currentEditor = None
        DEDENT
        return res
    DEDENT
    def closeEditorWindow(self, editor) :
    INDENT
        if editor is None :
        INDENT
            return
        DEDENT
        res = self.closeEditor(editor)
        if res and editor == self.currentEditor :
        INDENT
            self.currentEditor = None
        DEDENT
    DEDENT
    def exit(self) :
    INDENT
        if self.currentEditor is not None :
        INDENT
            self.currentEditor.highlight()
            self.currentEditor = None
        DEDENT
        self.__setSbFile()
    DEDENT
    def openSourceFile(self, fn, lineno = None, filetype = "", selection = None) :
    INDENT
        try :
        INDENT
            newWin, editor = self.getEditor(fn, filetype = filetype)
        DEDENT
        except IOError :
        INDENT
            return
        DEDENT
        if newWin :
        INDENT
            self._modificationStatusChanged(editor.isModified(), editor)
        DEDENT
        self._checkActions(editor)
        if lineno is not None and lineno > = 0 :
        INDENT
            editor.ensureVisibleTop(lineno)
            editor.gotoLine(lineno)
        DEDENT
        if selection is not None :
        INDENT
            editor.setSelection(lineno - 1, selection [0], lineno - 1, selection [1])

        DEDENT
        self.addToRecentList(fn)
    DEDENT
    def __connectEditor(self, editor) :
    INDENT
        self.connect(editor, SIGNAL('modificationStatusChanged'),
            self._modificationStatusChanged)
        self.connect(editor, SIGNAL('cursorChanged'), self.__cursorChanged)
        self.connect(editor, SIGNAL('editorSaved'), self.__editorSaved)
        self.connect(editor, SIGNAL('breakpointToggled'), self.__breakpointToggled)
        self.connect(editor, SIGNAL('bookmarkToggled'), self.__bookmarkToggled)
        self.connect(editor, SIGNAL('syntaxerrorToggled'), self._syntaxErrorToggled)
        self.connect(editor, SIGNAL('coverageMarkersShown'),
            self.__coverageMarkersShown)
        self.connect(editor, SIGNAL('autoCompletionAPIsAvailable'),
            self.__editorAutoCompletionAPIsAvailable)
        self.connect(editor, SIGNAL('undoAvailable'), self.undoAct.setEnabled)
        self.connect(editor, SIGNAL('redoAvailable'), self.redoAct.setEnabled)
        self.connect(editor, SIGNAL('taskMarkersUpdated'), self.__taskMarkersUpdated)
        self.connect(editor, SIGNAL('languageChanged'), self.__editorConfigChanged)
        self.connect(editor, SIGNAL('eolChanged'), self.__editorConfigChanged)
        self.connect(editor, SIGNAL('encodingChanged'), self.__editorConfigChanged)
        self.connect(editor, SIGNAL("selectionChanged()"),
            self.searchDlg.selectionChanged)
        self.connect(editor, SIGNAL("selectionChanged()"),
            self.replaceDlg.selectionChanged)
    DEDENT
    def newEditorView(self, fn, caller, filetype = "") :
    INDENT
        editor = self.cloneEditor(caller, filetype, fn)
        self._addView(editor, fn, caller.getNoName())
        self._modificationStatusChanged(editor.isModified(), editor)
        self._checkActions(editor)
    DEDENT
    def cloneEditor(self, caller, filetype, fn) :
    INDENT
        editor = Editor(self.dbs, fn, self, filetype = filetype, editor = caller,
            tv = e4App().getObject("TaskViewer"))
        self.editors.append(editor)
        self.__connectEditor(editor)
        self.__editorOpened()
        self.emit(SIGNAL('editorOpened'), fn)
        self.emit(SIGNAL('editorOpenedEd'), editor)
        return editor
    DEDENT
    def addToRecentList(self, fn) :
    INDENT
        self.recent.removeAll(fn)
        self.recent.prepend(fn)
        maxRecent = Preferences.getUI("RecentNumber")
        if len(self.recent) > maxRecent :
        INDENT
            self.recent = self.recent [: maxRecent]
        DEDENT
        self.__saveRecent()
    DEDENT
    def showDebugSource(self, fn, line) :
    INDENT
        self.openSourceFile(fn, line)
        self.setFileLine(fn, line)
    DEDENT
    def setFileLine(self, fn, line, error = False, syntaxError = False) :
    INDENT
        try :
        INDENT
            newWin, self.currentEditor = self.getEditor(fn)
        DEDENT
        except IOError :
        INDENT
            return
        DEDENT
        enc = self.currentEditor.getEncoding()
        lang = self.currentEditor.getLanguage()
        eol = self.currentEditor.getEolIndicator()
        self.__setSbFile(fn, line, encoding = enc, language = lang, eol = eol)

        self.currentEditor.highlight(line, error, syntaxError)
        self.currentEditor.highlightVisible()
        self._checkActions(self.currentEditor, False)
    DEDENT
    def __setSbFile(self, fn = None, line = None, pos = None,
    encoding = None, language = None, eol = None) :
    INDENT
        if fn is None :
        INDENT
            fn = ''
            writ = '   '
        DEDENT
        else :
        INDENT
            if QFileInfo(fn).isWritable() :
            INDENT
                writ = ' rw'
            DEDENT
            else :
            INDENT
                writ = ' ro'
            DEDENT
        DEDENT
        self.sbWritable.setText(writ)
        self.sbFile.setTextPath(QApplication.translate('ViewManager', 'File: %1'), fn)
        if line is None :
        INDENT
            line = ''
        DEDENT
        self.sbLine.setText(QApplication.translate('ViewManager', 'Line: %1').arg(line, 5))
        if pos is None :
        INDENT
            pos = ''
        DEDENT
        self.sbPos.setText(QApplication.translate('ViewManager', 'Pos: %1').arg(pos, 5))
        if encoding is None :
        INDENT
            encoding = ''
        DEDENT
        self.sbEnc.setText(encoding)
        if language is None :
        INDENT
            language = ''
        DEDENT
        self.sbLang.setText(language)
        if eol is None :
        INDENT
            eol = ''
        DEDENT
        self.sbEol.setText(eol)
    DEDENT
    def unhighlight(self, current = False) :
    INDENT
        if current :
        INDENT
            if self.currentEditor is not None :
            INDENT
                self.currentEditor.highlight()
            DEDENT
        DEDENT
        else :
        INDENT
            for editor in self.editors :
            INDENT
                editor.highlight()
            DEDENT
        DEDENT
    DEDENT
    def getOpenFilenames(self) :
    INDENT
        filenames = []
        for editor in self.editors :
        INDENT
            fn = editor.getFileName()
            if fn is not None and fn not in filenames :
            INDENT
                filenames.append(fn)
            DEDENT
        DEDENT
        return filenames
    DEDENT
    def getEditor(self, fn, filetype = "") :
    INDENT
        newWin = False
        editor = self.activeWindow()
        if editor is None or not Utilities.samepath(fn, editor.getFileName()) :
        INDENT
            for editor in self.editors :
            INDENT
                if Utilities.samepath(fn, editor.getFileName()) :
                INDENT
                    break
                DEDENT
            DEDENT
            else :
            INDENT
                editor = Editor(self.dbs, fn, self, filetype = filetype,
                    tv = e4App().getObject("TaskViewer"))
                self.editors.append(editor)
                self.__connectEditor(editor)
                self.__editorOpened()
                self.emit(SIGNAL('editorOpened'), fn)
                self.emit(SIGNAL('editorOpenedEd'), editor)
                newWin = True
            DEDENT
        DEDENT
        if newWin :
        INDENT
            self._addView(editor, fn)
        DEDENT
        else :
        INDENT
            self._showView(editor, fn)
        DEDENT
        return (newWin, editor)
    DEDENT
    def getOpenEditors(self) :
    INDENT
        return self.editors
    DEDENT
    def getOpenEditorsCount(self) :
    INDENT
        return len(self.editors)
    DEDENT
    def getOpenEditor(self, fn) :
    INDENT
        for editor in self.editors :
        INDENT
            if Utilities.samepath(fn, editor.getFileName()) :
            INDENT
                return editor
            DEDENT
        DEDENT
        return None
    DEDENT
    def getOpenEditorCount(self, fn) :
    INDENT
        count = 0
        for editor in self.editors :
        INDENT
            if Utilities.samepath(fn, editor.getFileName()) :
            INDENT
                count += 1
            DEDENT
        DEDENT
        return count
    DEDENT
    def getActiveName(self) :
    INDENT
        aw = self.activeWindow()
        if aw :
        INDENT
            return aw.getFileName()
        DEDENT
        else :
        INDENT
            return None
        DEDENT
    DEDENT
    def saveEditor(self, fn) :
    INDENT
        for editor in self.editors :
        INDENT
            if Utilities.samepath(fn, editor.getFileName()) :
            INDENT
                break
            DEDENT
        DEDENT
        else :
        INDENT
            return True
        DEDENT
        if not editor.isModified() :
        INDENT
            return True
        DEDENT
        else :
        INDENT
            ok = editor.saveFile() [0]
            return ok
        DEDENT
    DEDENT
    def saveEditorEd(self, ed) :
    INDENT
        if ed :
        INDENT
            if not ed.isModified() :
            INDENT
                return True
            DEDENT
            else :
            INDENT
                ok, newName = ed.saveFile()
                if ok :
                INDENT
                    self.setEditorName(ed, newName)
                DEDENT
                return ok
            DEDENT
        DEDENT
        else :
        INDENT
            return False
        DEDENT
    DEDENT
    def saveCurrentEditor(self) :
    INDENT
        aw = self.activeWindow()
        self.saveEditorEd(aw)
    DEDENT
    def saveAsEditorEd(self, ed) :
    INDENT
        if ed :
        INDENT
            ok, newName = ed.saveFileAs()
            if ok :
            INDENT
                self.setEditorName(ed, newName)
            DEDENT
        DEDENT
        else :
        INDENT
            return
        DEDENT
    DEDENT
    def saveAsCurrentEditor(self) :
    INDENT
        aw = self.activeWindow()
        self.saveAsEditorEd(aw)
    DEDENT
    def saveEditorsList(self, editors) :
    INDENT
        for editor in editors :
        INDENT
            ok, newName = editor.saveFile()
            if ok :
            INDENT
                self.setEditorName(editor, newName)
            DEDENT
        DEDENT
    DEDENT
    def saveAllEditors(self) :
    INDENT
        for editor in self.editors :
        INDENT
            ok, newName = editor.saveFile()
            if ok :
            INDENT
                self.setEditorName(editor, newName)

            DEDENT
        DEDENT
        if self.autosaveInterval > 0 :
        INDENT
            self.autosaveTimer.start(self.autosaveInterval * 60000)
        DEDENT
    DEDENT
    def saveEditorToProjectEd(self, ed) :
    INDENT
        pro = e4App().getObject("Project")
        path = pro.ppath
        if ed :
        INDENT
            ok, newName = ed.saveFileAs(path)
            if ok :
            INDENT
                self.setEditorName(ed, newName)
                pro.appendFile(newName)
                ed.addedToProject()
            DEDENT
        DEDENT
        else :
        INDENT
            return
        DEDENT
    DEDENT
    def saveCurrentEditorToProject(self) :
    INDENT
        aw = self.activeWindow()
        self.saveEditorToProjectEd(aw)
    DEDENT
    def __exportMenuTriggered(self, act) :
    INDENT
        aw = self.activeWindow()
        if aw :
        INDENT
            exporterFormat = unicode(act.data().toString())
            aw.exportFile(exporterFormat)
        DEDENT
    DEDENT
    def newEditor(self) :
    INDENT
        editor = Editor(self.dbs, None, self, tv = e4App().getObject("TaskViewer"))
        self.editors.append(editor)
        self.__connectEditor(editor)
        self._addView(editor, None)
        self.__editorOpened()
        self._checkActions(editor)
        self.emit(SIGNAL('editorOpened'), "")
        self.emit(SIGNAL('editorOpenedEd'), editor)
    DEDENT
    def printEditor(self, editor) :
    INDENT
        if editor :
        INDENT
            editor.printFile()
        DEDENT
        else :
        INDENT
            return
        DEDENT
    DEDENT
    def printCurrentEditor(self) :
    INDENT
        aw = self.activeWindow()
        self.printEditor(aw)
    DEDENT
    def printPreviewCurrentEditor(self) :
    INDENT
        aw = self.activeWindow()
        if aw :
        INDENT
            aw.printPreviewFile()
        DEDENT
    DEDENT
    def __showFileMenu(self) :
    INDENT
        self.menuRecentAct.setEnabled(len(self.recent) > 0)
    DEDENT
    def __showRecentMenu(self) :
    INDENT
        self.__loadRecent()
        self.recentMenu.clear()
        idx = 1
        for rs in self.recent :
        INDENT
            if idx < 10 :
            INDENT
                formatStr = '&%d. %s'
            DEDENT
            else :
            INDENT
                formatStr = '%d. %s'
            DEDENT
            act = self.recentMenu.addAction(formatStr % (idx,
                    Utilities.compactPath(unicode(rs), self.ui.maxMenuFilePathLen)))
            act.setData(QVariant(rs))
            act.setEnabled(QFileInfo(rs).exists())
            idx += 1
        DEDENT
        self.recentMenu.addSeparator()
        self.recentMenu.addAction(QApplication.translate('ViewManager', '&Clear'), self.__clearRecent)
    DEDENT
    def __openSourceFile(self, act) :
    INDENT
        file = unicode(act.data().toString())
        if file :
        INDENT
            self.openSourceFile(file)
        DEDENT
    DEDENT
    def __clearRecent(self) :
    INDENT
        self.recent.clear()
    DEDENT
    def __showBookmarkedMenu(self) :
    INDENT
        self.bookmarkedMenu.clear()
        for rp in self.bookmarked :
        INDENT
            act = self.bookmarkedMenu.addAction(Utilities.compactPath(unicode(rp), self.ui.maxMenuFilePathLen))
            act.setData(QVariant(rp))
            act.setEnabled(QFileInfo(rp).exists())
        DEDENT
        if len(self.bookmarked) :
        INDENT
            self.bookmarkedMenu.addSeparator()
        DEDENT
        self.bookmarkedMenu.addAction(QApplication.translate('ViewManager', '&Add'), self.__addBookmarked)
        self.bookmarkedMenu.addAction(QApplication.translate('ViewManager', '&Edit...'), self.__editBookmarked)
        self.bookmarkedMenu.addAction(QApplication.translate('ViewManager', '&Clear'), self.__clearBookmarked)
    DEDENT
    def __addBookmarked(self) :
    INDENT
        an = self.getActiveName()
        if an is not None and self.bookmarked.indexOf(QString(an)) == - 1 :
        INDENT
            self.bookmarked.append(an)
        DEDENT
    DEDENT
    def __editBookmarked(self) :
    INDENT
        dlg = BookmarkedFilesDialog(self.bookmarked, self.ui)
        if dlg.exec_() == QDialog.Accepted :
        INDENT
            self.bookmarked = QStringList(dlg.getBookmarkedFiles())
        DEDENT
    DEDENT
    def __clearBookmarked(self) :
    INDENT
        self.bookmarked = QStringList()
    DEDENT
    def newProject(self) :
    INDENT
        self.saveToProjectAct.setEnabled(True)
    DEDENT
    def projectOpened(self) :
    INDENT
        self.saveToProjectAct.setEnabled(True)
        for editor in self.editors :
        INDENT
            editor.setSpellingForProject()
        DEDENT
    DEDENT
    def projectClosed(self) :
    INDENT
        self.saveToProjectAct.setEnabled(False)
    DEDENT
    def projectFileRenamed(self, oldfn, newfn) :
    INDENT
        editor = self.getOpenEditor(oldfn)
        if editor :
        INDENT
            editor.fileRenamed(newfn)
        DEDENT
    DEDENT
    def projectLexerAssociationsChanged(self) :
    INDENT
        for editor in self.editors :
        INDENT
            editor.projectLexerAssociationsChanged()
        DEDENT
    DEDENT
    def enableEditorsCheckFocusIn(self, enabled) :
    INDENT
        self.editorsCheckFocusIn = enabled
    DEDENT
    def editorsCheckFocusInEnabled(self) :
    INDENT
        return self.editorsCheckFocusIn
    DEDENT
    def __findFileName(self) :
    INDENT
        self.ui.findFileNameDialog.show()
        self.ui.findFileNameDialog.raise_()
        self.ui.findFileNameDialog.activateWindow()

    DEDENT
    def __editUndo(self) :
    INDENT
        self.activeWindow().undo()
    DEDENT
    def __editRedo(self) :
    INDENT
        self.activeWindow().redo()
    DEDENT
    def __editRevert(self) :
    INDENT
        self.activeWindow().revertToUnmodified()
    DEDENT
    def __editCut(self) :
    INDENT
        if QApplication.focusWidget() == e4App().getObject("Shell") :
        INDENT
            e4App().getObject("Shell").cut()
        DEDENT
        elif QApplication.focusWidget() == e4App().getObject("Terminal") :
        INDENT
            e4App().getObject("Terminal").cut()
        DEDENT
        else :
        INDENT
            self.activeWindow().cut()
        DEDENT
    DEDENT
    def __editCopy(self) :
    INDENT
        if QApplication.focusWidget() == e4App().getObject("Shell") :
        INDENT
            e4App().getObject("Shell").copy()
        DEDENT
        elif QApplication.focusWidget() == e4App().getObject("Terminal") :
        INDENT
            e4App().getObject("Terminal").copy()
        DEDENT
        else :
        INDENT
            self.activeWindow().copy()
        DEDENT
    DEDENT
    def __editPaste(self) :
    INDENT
        if QApplication.focusWidget() == e4App().getObject("Shell") :
        INDENT
            e4App().getObject("Shell").paste()
        DEDENT
        elif QApplication.focusWidget() == e4App().getObject("Terminal") :
        INDENT
            e4App().getObject("Terminal").paste()
        DEDENT
        else :
        INDENT
            self.activeWindow().paste()
        DEDENT
    DEDENT
    def __editDelete(self) :
    INDENT
        if QApplication.focusWidget() == e4App().getObject("Shell") :
        INDENT
            e4App().getObject("Shell").clear()
        DEDENT
        elif QApplication.focusWidget() == e4App().getObject("Terminal") :
        INDENT
            e4App().getObject("Terminal").clear()
        DEDENT
        else :
        INDENT
            self.activeWindow().clear()
        DEDENT
    DEDENT
    def __editIndent(self) :
    INDENT
        self.activeWindow().indentLineOrSelection()
    DEDENT
    def __editUnindent(self) :
    INDENT
        self.activeWindow().unindentLineOrSelection()
    DEDENT
    def __editSmartIndent(self) :
    INDENT
        self.activeWindow().smartIndentLineOrSelection()
    DEDENT
    def __editComment(self) :
    INDENT
        self.activeWindow().commentLineOrSelection()
    DEDENT
    def __editUncomment(self) :
    INDENT
        self.activeWindow().uncommentLineOrSelection()
    DEDENT
    def __editStreamComment(self) :
    INDENT
        self.activeWindow().streamCommentLineOrSelection()
    DEDENT
    def __editBoxComment(self) :
    INDENT
        self.activeWindow().boxCommentLineOrSelection()
    DEDENT
    def __editSelectBrace(self) :
    INDENT
        self.activeWindow().selectToMatchingBrace()
    DEDENT
    def __editSelectAll(self) :
    INDENT
        self.activeWindow().selectAll(True)
    DEDENT
    def __editDeselectAll(self) :
    INDENT
        self.activeWindow().selectAll(False)
    DEDENT
    def __convertEOL(self) :
    INDENT
        aw = self.activeWindow()
        aw.convertEols(aw.eolMode())
    DEDENT
    def __shortenEmptyLines(self) :
    INDENT
        self.activeWindow().shortenEmptyLines()
    DEDENT
    def __editAutoComplete(self) :
    INDENT
        self.activeWindow().autoComplete()
    DEDENT
    def __editAutoCompleteFromDoc(self) :
    INDENT
        self.activeWindow().autoCompleteFromDocument()
    DEDENT
    def __editAutoCompleteFromAPIs(self) :
    INDENT
        self.activeWindow().autoCompleteFromAPIs()
    DEDENT
    def __editAutoCompleteFromAll(self) :
    INDENT
        self.activeWindow().autoCompleteFromAll()
    DEDENT
    def __editorAutoCompletionAPIsAvailable(self, available) :
    INDENT
        self.autoCompleteFromAPIsAct.setEnabled(available)
    DEDENT
    def __editShowCallTips(self) :
    INDENT
        self.activeWindow().callTip()

    DEDENT
    def textForFind(self, getCurrentWord = True) :
    INDENT
        aw = self.activeWindow()
        if aw is None :
        INDENT
            return QString('')
        DEDENT
        return aw.getSearchText(not getCurrentWord)
    DEDENT
    def getSRHistory(self, key) :
    INDENT
        return self.srHistory [key]
    DEDENT
    def __quickSearch(self) :
    INDENT
        if not self.quickFindtextCombo.lineEdit().hasFocus() :
        INDENT
            aw = self.activeWindow()
            self.quickFindtextCombo.lastActive = aw
            if aw :
            INDENT
                self.quickFindtextCombo.lastCursorPos = aw.getCursorPosition()
            DEDENT
            else :
            INDENT
                self.quickFindtextCombo.lastCursorPos = None
            DEDENT
            tff = self.textForFind(False)
            if not tff.isEmpty() :
            INDENT
                self.quickFindtextCombo.lineEdit().setText(tff)
            DEDENT
            self.quickFindtextCombo.lineEdit().setFocus()
            self.quickFindtextCombo.lineEdit().selectAll()
        DEDENT
        else :
        INDENT
            self.__quickSearchInEditor(True, False)
        DEDENT
    DEDENT
    def __quickSearchFocusIn(self) :
    INDENT
        self.quickFindtextCombo.lastActive = self.activeWindow()
    DEDENT
    def __quickSearchEnter(self) :
    INDENT
        if self.quickFindtextCombo.lastActive :
        INDENT
            self.quickFindtextCombo.lastActive.setFocus()
        DEDENT
    DEDENT
    def __quickSearchEscape(self) :
    INDENT
        if self.quickFindtextCombo.lastActive :
        INDENT
            self.quickFindtextCombo.lastActive.setFocus()
            aw = self.activeWindow()
            if aw and self.quickFindtextCombo.lastCursorPos :
            INDENT
                aw.setCursorPosition(self.quickFindtextCombo.lastCursorPos [0],
                    self.quickFindtextCombo.lastCursorPos [1])
            DEDENT
        DEDENT
    DEDENT
    def __quickSearchText(self) :
    INDENT
        self.__quickSearchInEditor(False, False)
    DEDENT
    def __quickSearchPrev(self) :
    INDENT
        self.__quickSearchInEditor(True, True)
    DEDENT
    def __quickSearchMarkOccurrences(self, txt) :
    INDENT
        aw = self.activeWindow()
        lineFrom = 0
        indexFrom = 0
        lineTo = - 1
        indexTo = - 1
        aw.clearSearchIndicators()
        ok = aw.findFirstTarget(txt, False, False, False,
            lineFrom, indexFrom, lineTo, indexTo)
        while ok :
        INDENT
            tgtPos, tgtLen = aw.getFoundTarget()
            try :
            INDENT
                aw.setSearchIndicator(tgtPos, tgtLen)
            DEDENT
            except AttributeError :
            INDENT
                self.viewmanager.setSearchIndicator(tgtPos, tgtLen)
            DEDENT
            ok = aw.findNextTarget()
        DEDENT
    DEDENT
    def __quickSearchInEditor(self, again, back) :
    INDENT
        aw = self.activeWindow()
        if not aw :
        INDENT
            return
        DEDENT
        text = self.quickFindtextCombo.lineEdit().text()
        if text.isEmpty() :
        INDENT
            text = self.quickFindtextCombo.lastSearchText
        DEDENT
        if text.isEmpty() :
        INDENT
            if Preferences.getEditor("QuickSearchMarkersEnabled") :
            INDENT
                aw.clearSearchIndicators()
            DEDENT
            return
        DEDENT
        else :
        INDENT
            self.quickFindtextCombo.lastSearchText = text
        DEDENT
        if Preferences.getEditor("QuickSearchMarkersEnabled") :
        INDENT
            self.__quickSearchMarkOccurrences(text)
        DEDENT
        lineFrom, indexFrom, lineTo, indexTo = aw.getSelection()
        cline, cindex = aw.getCursorPosition()
        if again :
        INDENT
            if back :
            INDENT
                if indexFrom ! = 0 :
                INDENT
                    index = indexFrom - 1
                    line = lineFrom
                DEDENT
                elif lineFrom == 0 :
                INDENT
                    return
                DEDENT
                else :
                INDENT
                    line = lineFrom - 1
                    index = aw.lineLength(line)
                DEDENT
                ok = aw.findFirst(text, False, False, False, True, False, line, index)
            DEDENT
            else :
            INDENT
                ok = aw.findFirst(text, False, False, False, True, not back,
                    cline, cindex)
            DEDENT
        DEDENT
        else :
        INDENT
            ok = aw.findFirst(text, False, False, False, True, not back,
                lineFrom, indexFrom)
        DEDENT
        if not ok :
        INDENT
            palette = self.quickFindtextCombo.lineEdit().palette()
            palette.setColor(QPalette.Base, QColor("red"))
            palette.setColor(QPalette.Text, QColor("white"))
            self.quickFindtextCombo.lineEdit().setPalette(palette)
        DEDENT
        else :
        INDENT
            palette = self.quickFindtextCombo.lineEdit().palette()
            palette.setColor(QPalette.Base,
                self.quickFindtextCombo.palette().color(QPalette.Base))
            palette.setColor(QPalette.Text,
                self.quickFindtextCombo.palette().color(QPalette.Text))
            self.quickFindtextCombo.lineEdit().setPalette(palette)
        DEDENT
    DEDENT
    def __quickSearchExtend(self) :
    INDENT
        aw = self.activeWindow()
        if aw is None :
        INDENT
            return
        DEDENT
        txt = self.quickFindtextCombo.lineEdit().text()
        if txt.isEmpty() :
        INDENT
            return
        DEDENT
        line, index = aw.getCursorPosition()
        text = aw.text(line)
        re = QRegExp('[^\w_]')
        end = text.indexOf(re, index)
        if end > index :
        INDENT
            ext = text.mid(index, end - index)
            txt.append(ext)
            self.quickFindtextCombo.lineEdit().setText(txt)
        DEDENT
    DEDENT
    def __search(self) :
    INDENT
        self.replaceDlg.close()
        self.searchDlg.show(self.textForFind())
    DEDENT
    def __replace(self) :
    INDENT
        self.searchDlg.close()
        self.replaceDlg.show(self.textForFind())
    DEDENT
    def __searchClearMarkers(self) :
    INDENT
        self.activeWindow().clearSearchIndicators()
    DEDENT
    def __goto(self) :
    INDENT
        aw = self.activeWindow()
        dlg = GotoDialog(aw.lines(), self.ui, None, True)
        if dlg.exec_() == QDialog.Accepted :
        INDENT
            aw.gotoLine(dlg.getLinenumber())
        DEDENT
    DEDENT
    def __gotoBrace(self) :
    INDENT
        self.activeWindow().moveToMatchingBrace()
    DEDENT
    def __searchFiles(self) :
    INDENT
        self.ui.findFilesDialog.show(self.textForFind())
        self.ui.findFilesDialog.raise_()
        self.ui.findFilesDialog.activateWindow()
    DEDENT
    def __replaceFiles(self) :
    INDENT
        self.ui.replaceFilesDialog.show(self.textForFind())
        self.ui.replaceFilesDialog.raise_()
        self.ui.replaceFilesDialog.activateWindow()

    DEDENT
    def __zoomIn(self) :
    INDENT
        if QApplication.focusWidget() == e4App().getObject("Shell") :
        INDENT
            e4App().getObject("Shell").zoomIn()
        DEDENT
        elif QApplication.focusWidget() == e4App().getObject("Terminal") :
        INDENT
            e4App().getObject("Terminal").zoomIn()
        DEDENT
        else :
        INDENT
            aw = self.activeWindow()
            if aw :
            INDENT
                aw.zoomIn()
            DEDENT
        DEDENT
    DEDENT
    def __zoomOut(self) :
    INDENT
        if QApplication.focusWidget() == e4App().getObject("Shell") :
        INDENT
            e4App().getObject("Shell").zoomOut()
        DEDENT
        elif QApplication.focusWidget() == e4App().getObject("Terminal") :
        INDENT
            e4App().getObject("Terminal").zoomOut()
        DEDENT
        else :
        INDENT
            aw = self.activeWindow()
            if aw :
            INDENT
                aw.zoomOut()
            DEDENT
        DEDENT
    DEDENT
    def __zoom(self) :
    INDENT
        if QApplication.focusWidget() == e4App().getObject("Shell") :
        INDENT
            aw = e4App().getObject("Shell")
        DEDENT
        elif QApplication.focusWidget() == e4App().getObject("Terminal") :
        INDENT
            aw = e4App().getObject("Terminal")
        DEDENT
        else :
        INDENT
            aw = self.activeWindow()
        DEDENT
        if aw :
        INDENT
            dlg = ZoomDialog(aw.getZoom(), self.ui, None, True)
            if dlg.exec_() == QDialog.Accepted :
            INDENT
                aw.zoomTo(dlg.getZoomSize())
            DEDENT
        DEDENT
    DEDENT
    def __toggleAll(self) :
    INDENT
        aw = self.activeWindow()
        if aw :
        INDENT
            aw.foldAll()
        DEDENT
    DEDENT
    def __toggleAllChildren(self) :
    INDENT
        aw = self.activeWindow()
        if aw :
        INDENT
            aw.foldAll(True)
        DEDENT
    DEDENT
    def __toggleCurrent(self) :
    INDENT
        aw = self.activeWindow()
        if aw :
        INDENT
            line, index = aw.getCursorPosition()
            aw.foldLine(line)
        DEDENT
    DEDENT
    def __splitView(self) :
    INDENT
        self.addSplit()
    DEDENT
    def __splitOrientation(self, checked) :
    INDENT
        if checked :
        INDENT
            self.setSplitOrientation(Qt.Horizontal)
            self.splitViewAct.setIcon(UI.PixmapCache.getIcon("splitHorizontal.png"))
            self.splitRemoveAct.setIcon(UI.PixmapCache.getIcon("remsplitHorizontal.png"))
        DEDENT
        else :
        INDENT
            self.setSplitOrientation(Qt.Vertical)
            self.splitViewAct.setIcon(UI.PixmapCache.getIcon("splitVertical.png"))
            self.splitRemoveAct.setIcon(UI.PixmapCache.getIcon("remsplitVertical.png"))

        DEDENT
    DEDENT
    def __macroStartRecording(self) :
    INDENT
        self.activeWindow().macroRecordingStart()
    DEDENT
    def __macroStopRecording(self) :
    INDENT
        self.activeWindow().macroRecordingStop()
    DEDENT
    def __macroRun(self) :
    INDENT
        self.activeWindow().macroRun()
    DEDENT
    def __macroDelete(self) :
    INDENT
        self.activeWindow().macroDelete()
    DEDENT
    def __macroLoad(self) :
    INDENT
        self.activeWindow().macroLoad()
    DEDENT
    def __macroSave(self) :
    INDENT
        self.activeWindow().macroSave()

    DEDENT
    def __toggleBookmark(self) :
    INDENT
        self.activeWindow().menuToggleBookmark()
    DEDENT
    def __nextBookmark(self) :
    INDENT
        self.activeWindow().nextBookmark()
    DEDENT
    def __previousBookmark(self) :
    INDENT
        self.activeWindow().previousBookmark()
    DEDENT
    def __clearAllBookmarks(self) :
    INDENT
        for editor in self.editors :
        INDENT
            editor.clearBookmarks()
        DEDENT
        self.bookmarkNextAct.setEnabled(False)
        self.bookmarkPreviousAct.setEnabled(False)
        self.bookmarkClearAct.setEnabled(False)
    DEDENT
    def __showBookmarkMenu(self) :
    INDENT
        bookmarksFound = 0
        filenames = self.getOpenFilenames()
        for filename in filenames :
        INDENT
            editor = self.getOpenEditor(filename)
            bookmarksFound = len(editor.getBookmarks()) > 0
            if bookmarksFound :
            INDENT
                self.menuBookmarksAct.setEnabled(True)
                return
            DEDENT
        DEDENT
        self.menuBookmarksAct.setEnabled(False)
    DEDENT
    def __showBookmarksMenu(self) :
    INDENT
        self.bookmarksMenu.clear()
        filenames = self.getOpenFilenames()
        filenames.sort()
        for filename in filenames :
        INDENT
            editor = self.getOpenEditor(filename)
            for bookmark in editor.getBookmarks() :
            INDENT
                bmSuffix = " : %d" % bookmark
                act = self.bookmarksMenu.addAction("%s%s" % (Utilities.compactPath(filename,
                            self.ui.maxMenuFilePathLen - len(bmSuffix)),
                        bmSuffix))
                act.setData(QVariant([QVariant(filename), QVariant(bookmark)]))
            DEDENT
        DEDENT
    DEDENT
    def __bookmarkSelected(self, act) :
    INDENT
        try :
        INDENT
            qvList = act.data().toPyObject()
            filename = unicode(qvList [0])
            line = qvList [1]
        DEDENT
        except AttributeError :
        INDENT
            qvList = act.data().toList()
            filename = unicode(qvList [0].toString())
            line = qvList [1].toInt() [0]
        DEDENT
        self.openSourceFile(filename, line)
    DEDENT
    def __bookmarkToggled(self, editor) :
    INDENT
        if editor.hasBookmarks() :
        INDENT
            self.bookmarkNextAct.setEnabled(True)
            self.bookmarkPreviousAct.setEnabled(True)
            self.bookmarkClearAct.setEnabled(True)
        DEDENT
        else :
        INDENT
            self.bookmarkNextAct.setEnabled(False)
            self.bookmarkPreviousAct.setEnabled(False)
            self.bookmarkClearAct.setEnabled(False)
        DEDENT
        self.emit(SIGNAL('bookmarkToggled'), editor)
    DEDENT
    def __gotoSyntaxError(self) :
    INDENT
        self.activeWindow().gotoSyntaxError()
    DEDENT
    def __clearAllSyntaxErrors(self) :
    INDENT
        for editor in self.editors :
        INDENT
            editor.clearSyntaxError()
        DEDENT
    DEDENT
    def _syntaxErrorToggled(self, editor) :
    INDENT
        if editor.hasSyntaxErrors() :
        INDENT
            self.syntaxErrorGotoAct.setEnabled(True)
            self.syntaxErrorClearAct.setEnabled(True)
        DEDENT
        else :
        INDENT
            self.syntaxErrorGotoAct.setEnabled(False)
            self.syntaxErrorClearAct.setEnabled(False)
        DEDENT
        self.emit(SIGNAL('syntaxerrorToggled'), editor)
    DEDENT
    def __nextUncovered(self) :
    INDENT
        self.activeWindow().nextUncovered()
    DEDENT
    def __previousUncovered(self) :
    INDENT
        self.activeWindow().previousUncovered()
    DEDENT
    def __coverageMarkersShown(self, shown) :
    INDENT
        if shown :
        INDENT
            self.notcoveredNextAct.setEnabled(True)
            self.notcoveredPreviousAct.setEnabled(True)
        DEDENT
        else :
        INDENT
            self.notcoveredNextAct.setEnabled(False)
            self.notcoveredPreviousAct.setEnabled(False)
        DEDENT
    DEDENT
    def __taskMarkersUpdated(self, editor) :
    INDENT
        if editor.hasTaskMarkers() :
        INDENT
            self.taskNextAct.setEnabled(True)
            self.taskPreviousAct.setEnabled(True)
        DEDENT
        else :
        INDENT
            self.taskNextAct.setEnabled(False)
            self.taskPreviousAct.setEnabled(False)
        DEDENT
    DEDENT
    def __nextTask(self) :
    INDENT
        self.activeWindow().nextTask()
    DEDENT
    def __previousTask(self) :
    INDENT
        self.activeWindow().previousTask()

    DEDENT
    def __setAutoSpellChecking(self) :
    INDENT
        enabled = self.autoSpellCheckAct.isChecked()
        Preferences.setEditor("AutoSpellCheckingEnabled", int(enabled))
        for editor in self.editors :
        INDENT
            editor.setAutoSpellChecking()
        DEDENT
    DEDENT
    def __spellCheck(self) :
    INDENT
        aw = self.activeWindow()
        if aw :
        INDENT
            aw.checkSpelling()

        DEDENT
    DEDENT
    def handleResetUI(self) :
    INDENT
        editor = self.activeWindow()
        if editor is None :
        INDENT
            self.__setSbFile()
        DEDENT
        else :
        INDENT
            line, pos = editor.getCursorPosition()
            enc = editor.getEncoding()
            lang = editor.getLanguage()
            eol = editor.getEolIndicator()
            self.__setSbFile(editor.getFileName(), line + 1, pos, enc, lang, eol)
        DEDENT
    DEDENT
    def closeViewManager(self) :
    INDENT
        self.closeAllWindows()

        self.__saveRecent()

        Preferences.Prefs.settings.setValue('Bookmarked/Sources',
            QVariant(self.bookmarked))
        if len(self.editors) :
        INDENT
            return False
        DEDENT
        else :
        INDENT
            return True
        DEDENT
    DEDENT
    def __lastEditorClosed(self) :
    INDENT
        self.closeActGrp.setEnabled(False)
        self.saveActGrp.setEnabled(False)
        self.exportersMenuAct.setEnabled(False)
        self.printAct.setEnabled(False)
        if self.printPreviewAct :
        INDENT
            self.printPreviewAct.setEnabled(False)
        DEDENT
        self.editActGrp.setEnabled(False)
        self.searchActGrp.setEnabled(False)
        self.quickFindtextCombo.setEnabled(False)
        self.viewActGrp.setEnabled(False)
        self.viewFoldActGrp.setEnabled(False)
        self.unhighlightAct.setEnabled(False)
        self.splitViewAct.setEnabled(False)
        self.splitOrientationAct.setEnabled(False)
        self.macroActGrp.setEnabled(False)
        self.bookmarkActGrp.setEnabled(False)
        self.__enableSpellingActions()
        self.__setSbFile()

        if self.canSplit() :
        INDENT
            while self.removeSplit() : pass
        DEDENT
        if self.autosaveTimer.isActive() :
        INDENT
            self.autosaveTimer.stop()
        DEDENT
    DEDENT
    def __editorOpened(self) :
    INDENT
        self.closeActGrp.setEnabled(True)
        self.saveActGrp.setEnabled(True)
        self.exportersMenuAct.setEnabled(True)
        self.printAct.setEnabled(True)
        if self.printPreviewAct :
        INDENT
            self.printPreviewAct.setEnabled(True)
        DEDENT
        self.editActGrp.setEnabled(True)
        self.searchActGrp.setEnabled(True)
        self.quickFindtextCombo.setEnabled(True)
        self.viewActGrp.setEnabled(True)
        self.viewFoldActGrp.setEnabled(True)
        self.unhighlightAct.setEnabled(True)
        if self.canSplit() :
        INDENT
            self.splitViewAct.setEnabled(True)
            self.splitOrientationAct.setEnabled(True)
        DEDENT
        self.macroActGrp.setEnabled(True)
        self.bookmarkActGrp.setEnabled(True)
        self.__enableSpellingActions()

        if not self.autosaveTimer.isActive() and self.autosaveInterval > 0 :
        INDENT
            self.autosaveTimer.start(self.autosaveInterval * 60000)
        DEDENT
    DEDENT
    def __autosave(self) :
    INDENT
        for editor in self.editors :
        INDENT
            if editor.shouldAutosave() :
            INDENT
                ok, newName = editor.saveFile()
                if ok :
                INDENT
                    self.setEditorName(editor, newName)

                DEDENT
            DEDENT
        DEDENT
        if self.autosaveInterval > 0 :
        INDENT
            self.autosaveTimer.start(self.autosaveInterval * 60000)
        DEDENT
    DEDENT
    def _checkActions(self, editor, setSb = True) :
    INDENT
        if editor is not None :
        INDENT
            self.saveAct.setEnabled(editor.isModified())
            self.revertAct.setEnabled(editor.isModified())
            self.undoAct.setEnabled(editor.isUndoAvailable())
            self.redoAct.setEnabled(editor.isRedoAvailable())
            lex = editor.getLexer()
            if lex is not None :
            INDENT
                self.commentAct.setEnabled(lex.canBlockComment())
                self.uncommentAct.setEnabled(lex.canBlockComment())
                self.streamCommentAct.setEnabled(lex.canStreamComment())
                self.boxCommentAct.setEnabled(lex.canBoxComment())
            DEDENT
            else :
            INDENT
                self.commentAct.setEnabled(False)
                self.uncommentAct.setEnabled(False)
                self.streamCommentAct.setEnabled(False)
                self.boxCommentAct.setEnabled(False)
            DEDENT
            if editor.hasBookmarks() :
            INDENT
                self.bookmarkNextAct.setEnabled(True)
                self.bookmarkPreviousAct.setEnabled(True)
                self.bookmarkClearAct.setEnabled(True)
            DEDENT
            else :
            INDENT
                self.bookmarkNextAct.setEnabled(False)
                self.bookmarkPreviousAct.setEnabled(False)
                self.bookmarkClearAct.setEnabled(False)
            DEDENT
            if editor.hasSyntaxErrors() :
            INDENT
                self.syntaxErrorGotoAct.setEnabled(True)
                self.syntaxErrorClearAct.setEnabled(True)
            DEDENT
            else :
            INDENT
                self.syntaxErrorGotoAct.setEnabled(False)
                self.syntaxErrorClearAct.setEnabled(False)
            DEDENT
            if editor.hasCoverageMarkers() :
            INDENT
                self.notcoveredNextAct.setEnabled(True)
                self.notcoveredPreviousAct.setEnabled(True)
            DEDENT
            else :
            INDENT
                self.notcoveredNextAct.setEnabled(False)
                self.notcoveredPreviousAct.setEnabled(False)
            DEDENT
            if editor.hasTaskMarkers() :
            INDENT
                self.taskNextAct.setEnabled(True)
                self.taskPreviousAct.setEnabled(True)
            DEDENT
            else :
            INDENT
                self.taskNextAct.setEnabled(False)
                self.taskPreviousAct.setEnabled(False)
            DEDENT
            if editor.canAutoCompleteFromAPIs() :
            INDENT
                self.autoCompleteFromAPIsAct.setEnabled(True)
            DEDENT
            else :
            INDENT
                self.autoCompleteFromAPIsAct.setEnabled(False)
            DEDENT
            if setSb :
            INDENT
                line, pos = editor.getCursorPosition()
                enc = editor.getEncoding()
                lang = editor.getLanguage()
                eol = editor.getEolIndicator()
                self.__setSbFile(editor.getFileName(), line + 1, pos, enc, lang, eol)
            DEDENT
            self.emit(SIGNAL('checkActions'), editor)
        DEDENT
    DEDENT
    def preferencesChanged(self) :
    INDENT
        self.apisManager.reloadAPIs()

        for editor in self.editors :
        INDENT
            editor.readSettings()

        DEDENT
        self.autosaveInterval = Preferences.getEditor("AutosaveInterval")
        if len(self.editors) :
        INDENT
            if self.autosaveTimer.isActive() and self.autosaveInterval == 0 :
            INDENT
                self.autosaveTimer.stop()
            DEDENT
            elif not self.autosaveTimer.isActive() and self.autosaveInterval > 0 :
            INDENT
                self.autosaveTimer.start(self.autosaveInterval * 60000)
            DEDENT
        DEDENT
        self.__enableSpellingActions()
    DEDENT
    def __editorSaved(self, fn) :
    INDENT
        self.emit(SIGNAL('editorSaved'), fn)
    DEDENT
    def __cursorChanged(self, fn, line, pos) :
    INDENT
        editor = self.getOpenEditor(fn)
        if editor is None :
        INDENT
            editor = self.sender()
        DEDENT
        if editor is not None :
        INDENT
            enc = editor.getEncoding()
            lang = editor.getLanguage()
            eol = editor.getEolIndicator()
        DEDENT
        else :
        INDENT
            enc = None
            lang = None
            eol = None
        DEDENT
        self.__setSbFile(fn, line, pos, enc, lang, eol)
        self.emit(SIGNAL('cursorChanged'), editor)
    DEDENT
    def __breakpointToggled(self, editor) :
    INDENT
        self.emit(SIGNAL('breakpointToggled'), editor)
    DEDENT
    def getActions(self, type) :
    INDENT
        try :
        INDENT
            exec 'actionList = self.%sActions[:]' % type
        DEDENT
        except AttributeError :
        INDENT
            actionList = []
        DEDENT
        return actionList
    DEDENT
    def __editorCommand(self, cmd) :
    INDENT
        focusWidget = QApplication.focusWidget()
        if focusWidget == e4App().getObject("Shell") :
        INDENT
            e4App().getObject("Shell").editorCommand(cmd)
        DEDENT
        elif focusWidget == e4App().getObject("Terminal") :
        INDENT
            e4App().getObject("Terminal").editorCommand(cmd)
        DEDENT
        elif focusWidget == self.quickFindtextCombo :
        INDENT
            self.quickFindtextCombo._editor.editorCommand(cmd)
        DEDENT
        else :
        INDENT
            aw = self.activeWindow()
            if aw :
            INDENT
                aw.editorCommand(cmd)
            DEDENT
        DEDENT
    DEDENT
    def __newLineBelow(self) :
    INDENT
        focusWidget = QApplication.focusWidget()
        if focusWidget == e4App().getObject("Shell") or focusWidget == e4App().getObject("Terminal") or focusWidget == self.quickFindtextCombo :
        INDENT
            return
        DEDENT
        else :
        INDENT
            aw = self.activeWindow()
            if aw :
            INDENT
                aw.newLineBelow()
            DEDENT
        DEDENT
    DEDENT
    def __editorConfigChanged(self) :
    INDENT
        editor = self.sender()
        fn = editor.getFileName()
        line, pos = editor.getCursorPosition()
        enc = editor.getEncoding()
        lang = editor.getLanguage()
        eol = editor.getEolIndicator()
        self.__setSbFile(fn, line + 1, pos, encoding = enc, language = lang, eol = eol)

    DEDENT
    def _getOpenStartDir(self) :
    INDENT
        if self.activeWindow() is not None and self.activeWindow().getFileName() :
        INDENT
            return os.path.dirname(self.activeWindow().getFileName())

        DEDENT
        elif e4App().getObject("Project").isOpen() :
        INDENT
            return e4App().getObject("Project").ppath
        DEDENT
        else :
        INDENT
            return QString()
        DEDENT
    DEDENT
    def _getOpenFileFilter(self) :
    INDENT
        if self.activeWindow() is not None and self.activeWindow().getFileName() :
        INDENT
            ext = os.path.splitext(self.activeWindow().getFileName()) [1]
            rx = QRegExp(".*\*\.%s[ )].*" % ext [1 :])
            filters = QScintilla.Lexers.getOpenFileFiltersList()
            index = filters.indexOf(rx)
            if index == - 1 :
            INDENT
                return QString(Preferences.getEditor("DefaultOpenFilter"))
            DEDENT
            else :
            INDENT
                return filters [index]
            DEDENT
        DEDENT
        else :
        INDENT
            return QString(Preferences.getEditor("DefaultOpenFilter"))

        DEDENT
    DEDENT
    def getAPIsManager(self) :
    INDENT
        return self.apisManager
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="109" endline="144">
INDENT
    QObject.__init__(self)

    self.editors = []
    self.currentEditor = None
    self.untitledCount = 0
    self.srHistory = {
        "search" : QStringList(),
        "replace" : QStringList()}
    self.editorsCheckFocusIn = True
    self.recent = QStringList()
    self.__loadRecent()
    self.bookmarked = QStringList()
    bs = Preferences.Prefs.settings.value("Bookmarked/Sources")
    if bs.isValid() :
    INDENT
        self.bookmarked = bs.toStringList()

    DEDENT
    self.autosaveInterval = Preferences.getEditor("AutosaveInterval")
    self.autosaveTimer = QTimer(self)
    self.autosaveTimer.setObjectName("AutosaveTimer")
    self.autosaveTimer.setSingleShot(True)
    self.connect(self.autosaveTimer, SIGNAL('timeout()'), self.__autosave)

    self.apisManager = APIsManager(parent = self)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="133" endline="135">
INDENT
    self.bookmarked = bs.toStringList()

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="146" endline="162">
INDENT
    self.ui = ui
    self.dbs = dbs
    self.searchDlg = SearchReplaceWidget(False, self, ui)
    self.replaceDlg = SearchReplaceWidget(True, self, ui)
    self.connect(self, SIGNAL("checkActions"),
        self.searchDlg.updateSelectionCheckBox)
    self.connect(self, SIGNAL("checkActions"),
        self.replaceDlg.updateSelectionCheckBox)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="164" endline="174">
INDENT
    self.recent.clear()
    Preferences.Prefs.rsettings.sync()
    rs = Preferences.Prefs.rsettings.value(recentNameFiles)
    if rs.isValid() :
    INDENT
        for f in rs.toStringList() :
        INDENT
            if QFileInfo(f).exists() :
            INDENT
                self.recent.append(f)
            DEDENT
        DEDENT
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="171" endline="174">
INDENT
    for f in rs.toStringList() :
    INDENT
        if QFileInfo(f).exists() :
        INDENT
            self.recent.append(f)
        DEDENT
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="172" endline="174">
INDENT
    if QFileInfo(f).exists() :
    INDENT
        self.recent.append(f)
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="173" endline="174">
INDENT
    self.recent.append(f)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="176" endline="181">
INDENT
    Preferences.Prefs.rsettings.setValue(recentNameFiles, QVariant(self.recent))
    Preferences.Prefs.rsettings.sync()
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="183" endline="192">
INDENT
    if len(self.recent) :
    INDENT
        return unicode(self.recent [0])
    DEDENT
    else :
    INDENT
        return None
    DEDENT
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="189" endline="189">
INDENT
    return unicode(self.recent [0])
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="191" endline="192">
INDENT
    return None
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="194" endline="220">
INDENT
    self.sbFile = sbFile
    self.sbLine = sbLine
    self.sbPos = sbPos
    self.sbWritable = sbWritable
    self.sbEnc = sbEncoding
    self.sbLang = sbLanguage
    self.sbEol = sbEol
    self.__setSbFile()

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="222" endline="229">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="231" endline="238">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="240" endline="246">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="248" endline="254">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="256" endline="263">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="265" endline="271">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="273" endline="280">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="282" endline="291">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="293" endline="301">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="303" endline="310">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="312" endline="318">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="320" endline="328">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="330" endline="342">
INDENT
    raise RuntimeError('Not implemented')
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="344" endline="350">
INDENT
    return False
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="352" endline="356">
INDENT
    pass
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="358" endline="364">
INDENT
    return False
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="366" endline="373">
INDENT
    pass
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="375" endline="379">
INDENT
    pass
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="381" endline="385">
INDENT
    pass
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="387" endline="400">
INDENT
    return False

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="402" endline="441">
INDENT
    self.editActions = []

    self.fileActions = []

    self.searchActions = []

    self.viewActions = []

    self.windowActions = []

    self.macroActions = []

    self.bookmarkActions = []

    self.spellingActions = []
    self._initWindowActions()
    self.__initFileActions()
    self.__initEditActions()
    self.__initSearchActions()
    self.__initViewActions()
    self.__initMacroActions()
    self.__initBookmarkActions()
    self.__initSpellingActions()

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="443" endline="610">
INDENT
    self.newAct = E4Action(QApplication.translate('ViewManager', 'New'),
        UI.PixmapCache.getIcon("new.png"),
        QApplication.translate('ViewManager', '&New'),
        QKeySequence(QApplication.translate('ViewManager', "Ctrl+N", "File|New")),
        0, self, 'vm_file_new')
    self.newAct.setStatusTip(QApplication.translate('ViewManager', 'Open an empty editor window'))
    self.newAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>New</b>"""
            """<p>An empty editor window will be created.</p>"""))
    self.connect(self.newAct, SIGNAL('triggered()'), self.newEditor)
    self.fileActions.append(self.newAct)
    self.openAct = E4Action(QApplication.translate('ViewManager', 'Open'),
        UI.PixmapCache.getIcon("open.png"),
        QApplication.translate('ViewManager', '&Open...'),
        QKeySequence(QApplication.translate('ViewManager', "Ctrl+O", "File|Open")),
        0, self, 'vm_file_open')
    self.openAct.setStatusTip(QApplication.translate('ViewManager', 'Open a file'))
    self.openAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Open a file</b>"""
            """<p>You will be asked for the name of a file to be opened"""
            """ in an editor window.</p>"""))
    self.connect(self.openAct, SIGNAL('triggered()'), self.openFiles)
    self.fileActions.append(self.openAct)
    self.closeActGrp = createActionGroup(self)
    self.closeAct = E4Action(QApplication.translate('ViewManager', 'Close'),
        UI.PixmapCache.getIcon("close.png"),
        QApplication.translate('ViewManager', '&Close'),
        QKeySequence(QApplication.translate('ViewManager', "Ctrl+W", "File|Close")),
        0, self.closeActGrp, 'vm_file_close')
    self.closeAct.setStatusTip(QApplication.translate('ViewManager', 'Close the current window'))
    self.closeAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Close Window</b>"""
            """<p>Close the current window.</p>"""))
    self.connect(self.closeAct, SIGNAL('triggered()'), self.closeCurrentWindow)
    self.fileActions.append(self.closeAct)
    self.closeAllAct = E4Action(QApplication.translate('ViewManager', 'Close All'),
        QApplication.translate('ViewManager', 'Clos&e All'),
        0, 0, self.closeActGrp, 'vm_file_close_all')
    self.closeAllAct.setStatusTip(QApplication.translate('ViewManager', 'Close all editor windows'))
    self.closeAllAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Close All Windows</b>"""
            """<p>Close all editor windows.</p>"""))
    self.connect(self.closeAllAct, SIGNAL('triggered()'), self.closeAllWindows)
    self.fileActions.append(self.closeAllAct)
    self.closeActGrp.setEnabled(False)
    self.saveActGrp = createActionGroup(self)
    self.saveAct = E4Action(QApplication.translate('ViewManager', 'Save'),
        UI.PixmapCache.getIcon("fileSave.png"),
        QApplication.translate('ViewManager', '&Save'),
        QKeySequence(QApplication.translate('ViewManager', "Ctrl+S", "File|Save")),
        0, self.saveActGrp, 'vm_file_save')
    self.saveAct.setStatusTip(QApplication.translate('ViewManager', 'Save the current file'))
    self.saveAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Save File</b>"""
            """<p>Save the contents of current editor window.</p>"""))
    self.connect(self.saveAct, SIGNAL('triggered()'), self.saveCurrentEditor)
    self.fileActions.append(self.saveAct)
    self.saveAsAct = E4Action(QApplication.translate('ViewManager', 'Save as'),
        UI.PixmapCache.getIcon("fileSaveAs.png"),
        QApplication.translate('ViewManager', 'Save &as...'),
        QKeySequence(QApplication.translate('ViewManager',
                "Shift+Ctrl+S", "File|Save As")),
        0, self.saveActGrp, 'vm_file_save_as')
    self.saveAsAct.setStatusTip(QApplication.translate('ViewManager',
            'Save the current file to a new one'))
    self.saveAsAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Save File as</b>"""
            """<p>Save the contents of current editor window to a new file."""
            """ The file can be entered in a file selection dialog.</p>"""))
    self.connect(self.saveAsAct, SIGNAL('triggered()'), self.saveAsCurrentEditor)
    self.fileActions.append(self.saveAsAct)
    self.saveAllAct = E4Action(QApplication.translate('ViewManager', 'Save all'),
        UI.PixmapCache.getIcon("fileSaveAll.png"),
        QApplication.translate('ViewManager', 'Save a&ll...'),
        0, 0, self.saveActGrp, 'vm_file_save_all')
    self.saveAllAct.setStatusTip(QApplication.translate('ViewManager',
            'Save all files'))
    self.saveAllAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Save All Files</b>"""
            """<p>Save the contents of all editor windows.</p>"""))
    self.connect(self.saveAllAct, SIGNAL('triggered()'), self.saveAllEditors)
    self.fileActions.append(self.saveAllAct)
    self.saveActGrp.setEnabled(False)
    self.saveToProjectAct = E4Action(QApplication.translate('ViewManager',
            'Save to Project'),
        UI.PixmapCache.getIcon("fileSaveProject.png"),
        QApplication.translate('ViewManager', 'Save to Pro&ject'),
        0, 0, self, 'vm_file_save_to_project')
    self.saveToProjectAct.setStatusTip(QApplication.translate('ViewManager',
            'Save the current file to the current project'))
    self.saveToProjectAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Save to Project</b>"""
            """<p>Save the contents of the current editor window to the"""
            """ current project. After the file has been saved, it is"""
            """ automatically added to the current project.</p>"""))
    self.connect(self.saveToProjectAct, SIGNAL('triggered()'),
        self.saveCurrentEditorToProject)
    self.saveToProjectAct.setEnabled(False)
    self.fileActions.append(self.saveToProjectAct)
    self.printAct = E4Action(QApplication.translate('ViewManager', 'Print'),
        UI.PixmapCache.getIcon("print.png"),
        QApplication.translate('ViewManager', '&Print'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+P", "File|Print")),
        0, self, 'vm_file_print')
    self.printAct.setStatusTip(QApplication.translate('ViewManager',
            'Print the current file'))
    self.printAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Print File</b>"""
            """<p>Print the contents of current editor window.</p>"""))
    self.connect(self.printAct, SIGNAL('triggered()'), self.printCurrentEditor)
    self.printAct.setEnabled(False)
    self.fileActions.append(self.printAct)
    self.printPreviewAct = E4Action(QApplication.translate('ViewManager', 'Print Preview'),
        UI.PixmapCache.getIcon("printPreview.png"),
        QApplication.translate('ViewManager', 'Print Preview'),
        0, 0, self, 'vm_file_print_preview')
    self.printPreviewAct.setStatusTip(QApplication.translate('ViewManager',
            'Print preview of the current file'))
    self.printPreviewAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Print Preview</b>"""
            """<p>Print preview of the current editor window.</p>"""))
    self.connect(self.printPreviewAct, SIGNAL('triggered()'),
        self.printPreviewCurrentEditor)
    self.printPreviewAct.setEnabled(False)
    self.fileActions.append(self.printPreviewAct)
    self.findFileNameAct = E4Action(QApplication.translate('ViewManager',
            'Search File'),
        QApplication.translate('ViewManager', 'Search &File...'),
        QKeySequence(QApplication.translate('ViewManager',
                "Alt+Ctrl+F", "File|Search File")),
        0, self, 'vm_file_search_file')
    self.findFileNameAct.setStatusTip(QApplication.translate('ViewManager',
            'Search for a file'))
    self.findFileNameAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Search File</b>"""
            """<p>Search for a file.</p>"""))
    self.connect(self.findFileNameAct, SIGNAL('triggered()'), self.__findFileName)
    self.fileActions.append(self.findFileNameAct)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="612" endline="657">
INDENT
    menu = QMenu(QApplication.translate('ViewManager', '&File'), self.ui)
    self.recentMenu = QMenu(QApplication.translate('ViewManager',
            'Open &Recent Files'), menu)
    self.bookmarkedMenu = QMenu(QApplication.translate('ViewManager',
            'Open &Bookmarked Files'), menu)
    self.exportersMenu = self.__initContextMenuExporters()
    menu.setTearOffEnabled(True)
    menu.addAction(self.newAct)
    menu.addAction(self.openAct)
    self.menuRecentAct = menu.addMenu(self.recentMenu)
    menu.addMenu(self.bookmarkedMenu)
    menu.addSeparator()
    menu.addAction(self.closeAct)
    menu.addAction(self.closeAllAct)
    menu.addSeparator()
    menu.addAction(self.findFileNameAct)
    menu.addSeparator()
    menu.addAction(self.saveAct)
    menu.addAction(self.saveAsAct)
    menu.addAction(self.saveAllAct)
    menu.addAction(self.saveToProjectAct)
    self.exportersMenuAct = menu.addMenu(self.exportersMenu)
    menu.addSeparator()
    menu.addAction(self.printPreviewAct)
    menu.addAction(self.printAct)
    self.connect(self.recentMenu, SIGNAL('aboutToShow()'),
        self.__showRecentMenu)
    self.connect(self.recentMenu, SIGNAL('triggered(QAction *)'),
        self.__openSourceFile)
    self.connect(self.bookmarkedMenu, SIGNAL('aboutToShow()'),
        self.__showBookmarkedMenu)
    self.connect(self.bookmarkedMenu, SIGNAL('triggered(QAction *)'),
        self.__openSourceFile)
    self.connect(menu, SIGNAL('aboutToShow()'), self.__showFileMenu)
    self.exportersMenuAct.setEnabled(False)
    return menu
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="659" endline="685">
INDENT
    tb = QToolBar(QApplication.translate('ViewManager', 'File'), self.ui)
    tb.setIconSize(UI.Config.ToolBarIconSize)
    tb.setObjectName("FileToolbar")
    tb.setToolTip(QApplication.translate('ViewManager', 'File'))
    tb.addAction(self.newAct)
    tb.addAction(self.openAct)
    tb.addAction(self.closeAct)
    tb.addSeparator()
    tb.addAction(self.saveAct)
    tb.addAction(self.saveAsAct)
    tb.addAction(self.saveAllAct)
    tb.addAction(self.saveToProjectAct)
    tb.addSeparator()
    tb.addAction(self.printPreviewAct)
    tb.addAction(self.printAct)
    toolbarManager.addToolBar(tb, tb.windowTitle())
    return tb
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="687" endline="706">
INDENT
    menu = QMenu(QApplication.translate('ViewManager', "Export as"))
    supportedExporters = QScintilla.Exporters.getSupportedFormats()
    exporters = supportedExporters.keys()
    exporters.sort()
    for exporter in exporters :
    INDENT
        act = menu.addAction(supportedExporters [exporter])
        act.setData(QVariant(exporter))
    DEDENT
    self.connect(menu, SIGNAL('triggered(QAction *)'), self.__exportMenuTriggered)
    return menu

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="696" endline="698">
INDENT
    act = menu.addAction(supportedExporters [exporter])
    act.setData(QVariant(exporter))
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="708" endline="1787">
INDENT
    self.editActGrp = createActionGroup(self)
    self.undoAct = E4Action(QApplication.translate('ViewManager', 'Undo'),
        UI.PixmapCache.getIcon("editUndo.png"),
        QApplication.translate('ViewManager', '&Undo'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Z", "Edit|Undo")),
        QKeySequence(QApplication.translate('ViewManager',
                "Alt+Backspace", "Edit|Undo")),
        self.editActGrp, 'vm_edit_undo')
    self.undoAct.setStatusTip(QApplication.translate('ViewManager',
            'Undo the last change'))
    self.undoAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Undo</b>"""
            """<p>Undo the last change done in the current editor.</p>"""))
    self.connect(self.undoAct, SIGNAL('triggered()'), self.__editUndo)
    self.editActions.append(self.undoAct)
    self.redoAct = E4Action(QApplication.translate('ViewManager', 'Redo'),
        UI.PixmapCache.getIcon("editRedo.png"),
        QApplication.translate('ViewManager', '&Redo'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Shift+Z", "Edit|Redo")),
        0, self.editActGrp, 'vm_edit_redo')
    self.redoAct.setStatusTip(QApplication.translate('ViewManager',
            'Redo the last change'))
    self.redoAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Redo</b>"""
            """<p>Redo the last change done in the current editor.</p>"""))
    self.connect(self.redoAct, SIGNAL('triggered()'), self.__editRedo)
    self.editActions.append(self.redoAct)
    self.revertAct = E4Action(QApplication.translate('ViewManager',
            'Revert to last saved state'),
        QApplication.translate('ViewManager', 'Re&vert to last saved state'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Y", "Edit|Revert")),
        0,
        self.editActGrp, 'vm_edit_revert')
    self.revertAct.setStatusTip(QApplication.translate('ViewManager',
            'Revert to last saved state'))
    self.revertAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Revert to last saved state</b>"""
            """<p>Undo all changes up to the last saved state"""
            """ of the current editor.</p>"""))
    self.connect(self.revertAct, SIGNAL('triggered()'), self.__editRevert)
    self.editActions.append(self.revertAct)
    self.copyActGrp = createActionGroup(self.editActGrp)
    self.cutAct = E4Action(QApplication.translate('ViewManager', 'Cut'),
        UI.PixmapCache.getIcon("editCut.png"),
        QApplication.translate('ViewManager', 'Cu&t'),
        QKeySequence(QApplication.translate('ViewManager', "Ctrl+X", "Edit|Cut")),
        QKeySequence(QApplication.translate('ViewManager',
                "Shift+Del", "Edit|Cut")),
        self.copyActGrp, 'vm_edit_cut')
    self.cutAct.setStatusTip(QApplication.translate('ViewManager',
            'Cut the selection'))
    self.cutAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Cut</b>"""
            """<p>Cut the selected text of the current editor to the clipboard.</p>"""))
    self.connect(self.cutAct, SIGNAL('triggered()'), self.__editCut)
    self.editActions.append(self.cutAct)
    self.copyAct = E4Action(QApplication.translate('ViewManager', 'Copy'),
        UI.PixmapCache.getIcon("editCopy.png"),
        QApplication.translate('ViewManager', '&Copy'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+C", "Edit|Copy")),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Ins", "Edit|Copy")),
        self.copyActGrp, 'vm_edit_copy')
    self.copyAct.setStatusTip(QApplication.translate('ViewManager',
            'Copy the selection'))
    self.copyAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Copy</b>"""
            """<p>Copy the selected text of the current editor to the clipboard.</p>"""))
    self.connect(self.copyAct, SIGNAL('triggered()'), self.__editCopy)
    self.editActions.append(self.copyAct)
    self.pasteAct = E4Action(QApplication.translate('ViewManager', 'Paste'),
        UI.PixmapCache.getIcon("editPaste.png"),
        QApplication.translate('ViewManager', '&Paste'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+V", "Edit|Paste")),
        QKeySequence(QApplication.translate('ViewManager',
                "Shift+Ins", "Edit|Paste")),
        self.copyActGrp, 'vm_edit_paste')
    self.pasteAct.setStatusTip(QApplication.translate('ViewManager',
            'Paste the last cut/copied text'))
    self.pasteAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Paste</b>"""
            """<p>Paste the last cut/copied text from the clipboard to"""
            """ the current editor.</p>"""))
    self.connect(self.pasteAct, SIGNAL('triggered()'), self.__editPaste)
    self.editActions.append(self.pasteAct)
    self.deleteAct = E4Action(QApplication.translate('ViewManager', 'Clear'),
        UI.PixmapCache.getIcon("editDelete.png"),
        QApplication.translate('ViewManager', 'Cl&ear'),
        QKeySequence(QApplication.translate('ViewManager',
                "Alt+Shift+C", "Edit|Clear")),
        0,
        self.copyActGrp, 'vm_edit_clear')
    self.deleteAct.setStatusTip(QApplication.translate('ViewManager',
            'Clear all text'))
    self.deleteAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Clear</b>"""
            """<p>Delete all text of the current editor.</p>"""))
    self.connect(self.deleteAct, SIGNAL('triggered()'), self.__editDelete)
    self.editActions.append(self.deleteAct)
    self.indentAct = E4Action(QApplication.translate('ViewManager', 'Indent'),
        UI.PixmapCache.getIcon("editIndent.png"),
        QApplication.translate('ViewManager', '&Indent'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+I", "Edit|Indent")),
        0,
        self.editActGrp, 'vm_edit_indent')
    self.indentAct.setStatusTip(QApplication.translate('ViewManager', 'Indent line'))
    self.indentAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Indent</b>"""
            """<p>Indents the current line or the lines of the"""
            """ selection by one level.</p>"""))
    self.connect(self.indentAct, SIGNAL('triggered()'), self.__editIndent)
    self.editActions.append(self.indentAct)
    self.unindentAct = E4Action(QApplication.translate('ViewManager', 'Unindent'),
        UI.PixmapCache.getIcon("editUnindent.png"),
        QApplication.translate('ViewManager', 'U&nindent'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Shift+I", "Edit|Unindent")),
        0,
        self.editActGrp, 'vm_edit_unindent')
    self.unindentAct.setStatusTip(QApplication.translate('ViewManager',
            'Unindent line'))
    self.unindentAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Unindent</b>"""
            """<p>Unindents the current line or the lines of the"""
            """ selection by one level.</p>"""))
    self.connect(self.unindentAct, SIGNAL('triggered()'), self.__editUnindent)
    self.editActions.append(self.unindentAct)
    self.smartIndentAct = E4Action(QApplication.translate('ViewManager',
            'Smart indent'),
        UI.PixmapCache.getIcon("editSmartIndent.png"),
        QApplication.translate('ViewManager', 'Smart indent'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Alt+I", "Edit|Smart indent")),
        0,
        self.editActGrp, 'vm_edit_smart_indent')
    self.smartIndentAct.setStatusTip(QApplication.translate('ViewManager',
            'Smart indent Line or Selection'))
    self.smartIndentAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Smart indent</b>"""
            """<p>Indents the current line or the lines of the"""
            """ current selection smartly.</p>"""))
    self.connect(self.smartIndentAct, SIGNAL('triggered()'), self.__editSmartIndent)
    self.editActions.append(self.smartIndentAct)
    self.commentAct = E4Action(QApplication.translate('ViewManager', 'Comment'),
        UI.PixmapCache.getIcon("editComment.png"),
        QApplication.translate('ViewManager', 'C&omment'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+M", "Edit|Comment")),
        0,
        self.editActGrp, 'vm_edit_comment')
    self.commentAct.setStatusTip(QApplication.translate('ViewManager',
            'Comment Line or Selection'))
    self.commentAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Comment</b>"""
            """<p>Comments the current line or the lines of the"""
            """ current selection.</p>"""))
    self.connect(self.commentAct, SIGNAL('triggered()'), self.__editComment)
    self.editActions.append(self.commentAct)
    self.uncommentAct = E4Action(QApplication.translate('ViewManager', 'Uncomment'),
        UI.PixmapCache.getIcon("editUncomment.png"),
        QApplication.translate('ViewManager', 'Unco&mment'),
        QKeySequence(QApplication.translate('ViewManager',
                "Alt+Ctrl+M", "Edit|Uncomment")),
        0,
        self.editActGrp, 'vm_edit_uncomment')
    self.uncommentAct.setStatusTip(QApplication.translate('ViewManager',
            'Uncomment Line or Selection'))
    self.uncommentAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Uncomment</b>"""
            """<p>Uncomments the current line or the lines of the"""
            """ current selection.</p>"""))
    self.connect(self.uncommentAct, SIGNAL('triggered()'), self.__editUncomment)
    self.editActions.append(self.uncommentAct)
    self.streamCommentAct = E4Action(QApplication.translate('ViewManager',
            'Stream Comment'),
        QApplication.translate('ViewManager', 'Stream Comment'),
        0, 0, self.editActGrp, 'vm_edit_stream_comment')
    self.streamCommentAct.setStatusTip(QApplication.translate('ViewManager',
            'Stream Comment Line or Selection'))
    self.streamCommentAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Stream Comment</b>"""
            """<p>Stream comments the current line or the current selection.</p>"""))
    self.connect(self.streamCommentAct, SIGNAL('triggered()'),
        self.__editStreamComment)
    self.editActions.append(self.streamCommentAct)
    self.boxCommentAct = E4Action(QApplication.translate('ViewManager',
            'Box Comment'),
        QApplication.translate('ViewManager', 'Box Comment'),
        0, 0, self.editActGrp, 'vm_edit_box_comment')
    self.boxCommentAct.setStatusTip(QApplication.translate('ViewManager',
            'Box Comment Line or Selection'))
    self.boxCommentAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Box Comment</b>"""
            """<p>Box comments the current line or the lines of the"""
            """ current selection.</p>"""))
    self.connect(self.boxCommentAct, SIGNAL('triggered()'), self.__editBoxComment)
    self.editActions.append(self.boxCommentAct)
    self.selectBraceAct = E4Action(QApplication.translate('ViewManager',
            'Select to brace'),
        QApplication.translate('ViewManager', 'Select to &brace'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+E", "Edit|Select to brace")),
        0,
        self.editActGrp, 'vm_edit_select_to_brace')
    self.selectBraceAct.setStatusTip(QApplication.translate('ViewManager',
            'Select text to the matching brace'))
    self.selectBraceAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Select to brace</b>"""
            """<p>Select text of the current editor to the matching brace.</p>"""))
    self.connect(self.selectBraceAct, SIGNAL('triggered()'), self.__editSelectBrace)
    self.editActions.append(self.selectBraceAct)
    self.selectAllAct = E4Action(QApplication.translate('ViewManager', 'Select all'),
        QApplication.translate('ViewManager', '&Select all'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+A", "Edit|Select all")),
        0,
        self.editActGrp, 'vm_edit_select_all')
    self.selectAllAct.setStatusTip(QApplication.translate('ViewManager',
            'Select all text'))
    self.selectAllAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Select All</b>"""
            """<p>Select all text of the current editor.</p>"""))
    self.connect(self.selectAllAct, SIGNAL('triggered()'), self.__editSelectAll)
    self.editActions.append(self.selectAllAct)
    self.deselectAllAct = E4Action(QApplication.translate('ViewManager',
            'Deselect all'),
        QApplication.translate('ViewManager', '&Deselect all'),
        QKeySequence(QApplication.translate('ViewManager',
                "Alt+Ctrl+A", "Edit|Deselect all")),
        0,
        self.editActGrp, 'vm_edit_deselect_all')
    self.deselectAllAct.setStatusTip(QApplication.translate('ViewManager',
            'Deselect all text'))
    self.deselectAllAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Deselect All</b>"""
            """<p>Deselect all text of the current editor.</p>"""))
    self.connect(self.deselectAllAct, SIGNAL('triggered()'), self.__editDeselectAll)
    self.editActions.append(self.deselectAllAct)
    self.convertEOLAct = E4Action(QApplication.translate('ViewManager',
            'Convert Line End Characters'),
        QApplication.translate('ViewManager', 'Convert &Line End Characters'),
        0, 0, self.editActGrp, 'vm_edit_convert_eol')
    self.convertEOLAct.setStatusTip(QApplication.translate('ViewManager',
            'Convert Line End Characters'))
    self.convertEOLAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Convert Line End Characters</b>"""
            """<p>Convert the line end characters to the currently set type.</p>"""))
    self.connect(self.convertEOLAct, SIGNAL('triggered()'), self.__convertEOL)
    self.editActions.append(self.convertEOLAct)
    self.shortenEmptyAct = E4Action(QApplication.translate('ViewManager',
            'Shorten empty lines'),
        QApplication.translate('ViewManager', 'Shorten empty lines'),
        0, 0, self.editActGrp, 'vm_edit_shorten_empty_lines')
    self.shortenEmptyAct.setStatusTip(QApplication.translate('ViewManager',
            'Shorten empty lines'))
    self.shortenEmptyAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Shorten empty lines</b>"""
            """<p>Shorten lines consisting solely of whitespace characters.</p>"""))
    self.connect(self.shortenEmptyAct, SIGNAL('triggered()'),
        self.__shortenEmptyLines)
    self.editActions.append(self.shortenEmptyAct)
    self.autoCompleteAct = E4Action(QApplication.translate('ViewManager',
            'Autocomplete'),
        QApplication.translate('ViewManager', '&Autocomplete'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Space", "Edit|Autocomplete")),
        0,
        self.editActGrp, 'vm_edit_autocomplete')
    self.autoCompleteAct.setStatusTip(QApplication.translate('ViewManager',
            'Autocomplete current word'))
    self.autoCompleteAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Autocomplete</b>"""
            """<p>Performs an autocompletion of the word containing the cursor.</p>"""))
    self.connect(self.autoCompleteAct, SIGNAL('triggered()'), self.__editAutoComplete)
    self.editActions.append(self.autoCompleteAct)
    self.autoCompleteFromDocAct = E4Action(QApplication.translate('ViewManager',
            'Autocomplete from Document'),
        QApplication.translate('ViewManager', 'Autocomplete from Document'),
        QKeySequence(QApplication.translate('ViewManager', "Ctrl+Shift+Space",
                "Edit|Autocomplete from Document")),
        0, self.editActGrp, 'vm_edit_autocomplete_from_document')
    self.autoCompleteFromDocAct.setStatusTip(QApplication.translate('ViewManager',
            'Autocomplete current word from Document'))
    self.autoCompleteFromDocAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Autocomplete from Document</b>"""
            """<p>Performs an autocompletion from document of the word"""
            """ containing the cursor.</p>"""))
    self.connect(self.autoCompleteFromDocAct, SIGNAL('triggered()'),
        self.__editAutoCompleteFromDoc)
    self.editActions.append(self.autoCompleteFromDocAct)
    self.autoCompleteFromAPIsAct = E4Action(QApplication.translate('ViewManager',
            'Autocomplete from APIs'),
        QApplication.translate('ViewManager', 'Autocomplete from APIs'),
        QKeySequence(QApplication.translate('ViewManager', "Ctrl+Alt+Space",
                "Edit|Autocomplete from APIs")),
        0, self.editActGrp, 'vm_edit_autocomplete_from_api')
    self.autoCompleteFromAPIsAct.setStatusTip(QApplication.translate('ViewManager',
            'Autocomplete current word from APIs'))
    self.autoCompleteFromAPIsAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Autocomplete from APIs</b>"""
            """<p>Performs an autocompletion from APIs of the word containing"""
            """ the cursor.</p>"""))
    self.connect(self.autoCompleteFromAPIsAct, SIGNAL('triggered()'),
        self.__editAutoCompleteFromAPIs)
    self.editActions.append(self.autoCompleteFromAPIsAct)
    self.autoCompleteFromAllAct = E4Action(QApplication.translate('ViewManager',
            'Autocomplete from Document and APIs'),
        QApplication.translate('ViewManager',
            'Autocomplete from Document and APIs'),
        QKeySequence(QApplication.translate('ViewManager', "Alt+Shift+Space",
                "Edit|Autocomplete from Document and APIs")),
        0, self.editActGrp, 'vm_edit_autocomplete_from_all')
    self.autoCompleteFromAllAct.setStatusTip(QApplication.translate('ViewManager',
            'Autocomplete current word from Document and APIs'))
    self.autoCompleteFromAllAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Autocomplete from Document and APIs</b>"""
            """<p>Performs an autocompletion from document and APIs"""
            """ of the word containing the cursor.</p>"""))
    self.connect(self.autoCompleteFromAllAct, SIGNAL('triggered()'),
        self.__editAutoCompleteFromAll)
    self.editActions.append(self.autoCompleteFromAllAct)
    self.calltipsAct = E4Action(QApplication.translate('ViewManager',
            'Calltip'),
        QApplication.translate('ViewManager', '&Calltip'),
        QKeySequence(QApplication.translate('ViewManager',
                "Alt+Space", "Edit|Calltip")),
        0,
        self.editActGrp, 'vm_edit_calltip')
    self.calltipsAct.setStatusTip(QApplication.translate('ViewManager',
            'Show Calltips'))
    self.calltipsAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Calltip</b>"""
            """<p>Show calltips based on the characters immediately to the"""
            """ left of the cursor.</p>"""))
    self.connect(self.calltipsAct, SIGNAL('triggered()'), self.__editShowCallTips)
    self.editActions.append(self.calltipsAct)
    self.editActGrp.setEnabled(False)
    self.copyActGrp.setEnabled(False)

    self.esm = QSignalMapper(self)
    self.connect(self.esm, SIGNAL('mapped(int)'), self.__editorCommand)
    self.editorActGrp = createActionGroup(self.editActGrp)
    act = E4Action(QApplication.translate('ViewManager', 'Move left one character'),
        QApplication.translate('ViewManager', 'Move left one character'),
        QKeySequence(QApplication.translate('ViewManager', 'Left')), 0,
        self.editorActGrp, 'vm_edit_move_left_char')
    self.esm.setMapping(act, QsciScintilla.SCI_CHARLEFT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move right one character'),
        QApplication.translate('ViewManager', 'Move right one character'),
        QKeySequence(QApplication.translate('ViewManager', 'Right')), 0,
        self.editorActGrp, 'vm_edit_move_right_char')
    self.esm.setMapping(act, QsciScintilla.SCI_CHARRIGHT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move up one line'),
        QApplication.translate('ViewManager', 'Move up one line'),
        QKeySequence(QApplication.translate('ViewManager', 'Up')), 0,
        self.editorActGrp, 'vm_edit_move_up_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEUP)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move down one line'),
        QApplication.translate('ViewManager', 'Move down one line'),
        QKeySequence(QApplication.translate('ViewManager', 'Down')), 0,
        self.editorActGrp, 'vm_edit_move_down_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEDOWN)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move left one word part'),
        QApplication.translate('ViewManager', 'Move left one word part'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Left')), 0,
        self.editorActGrp, 'vm_edit_move_left_word_part')
    self.esm.setMapping(act, QsciScintilla.SCI_WORDPARTLEFT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move right one word part'),
        QApplication.translate('ViewManager', 'Move right one word part'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Right')), 0,
        self.editorActGrp, 'vm_edit_move_right_word_part')
    self.esm.setMapping(act, QsciScintilla.SCI_WORDPARTRIGHT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move left one word'),
        QApplication.translate('ViewManager', 'Move left one word'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Left')), 0,
        self.editorActGrp, 'vm_edit_move_left_word')
    self.esm.setMapping(act, QsciScintilla.SCI_WORDLEFT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move right one word'),
        QApplication.translate('ViewManager', 'Move right one word'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Right')),
        0,
        self.editorActGrp, 'vm_edit_move_right_word')
    self.esm.setMapping(act, QsciScintilla.SCI_WORDRIGHT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Move to first visible character in line'),
        QApplication.translate('ViewManager',
            'Move to first visible character in line'),
        QKeySequence(QApplication.translate('ViewManager', 'Home')), 0,
        self.editorActGrp, 'vm_edit_move_first_visible_char')
    self.esm.setMapping(act, QsciScintilla.SCI_VCHOME)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Move to start of displayed line'),
        QApplication.translate('ViewManager',
            'Move to start of displayed line'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Home')), 0,
        self.editorActGrp, 'vm_edit_move_start_line')
    self.esm.setMapping(act, QsciScintilla.SCI_HOMEDISPLAY)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move to end of line'),
        QApplication.translate('ViewManager', 'Move to end of line'),
        QKeySequence(QApplication.translate('ViewManager', 'End')), 0,
        self.editorActGrp, 'vm_edit_move_end_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Scroll view down one line'),
        QApplication.translate('ViewManager', 'Scroll view down one line'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Down')), 0,
        self.editorActGrp, 'vm_edit_scroll_down_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINESCROLLDOWN)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Scroll view up one line'),
        QApplication.translate('ViewManager', 'Scroll view up one line'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Up')), 0,
        self.editorActGrp, 'vm_edit_scroll_up_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINESCROLLUP)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move up one paragraph'),
        QApplication.translate('ViewManager', 'Move up one paragraph'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Up')), 0,
        self.editorActGrp, 'vm_edit_move_up_para')
    self.esm.setMapping(act, QsciScintilla.SCI_PARAUP)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move down one paragraph'),
        QApplication.translate('ViewManager', 'Move down one paragraph'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Down')), 0,
        self.editorActGrp, 'vm_edit_move_down_para')
    self.esm.setMapping(act, QsciScintilla.SCI_PARADOWN)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move up one page'),
        QApplication.translate('ViewManager', 'Move up one page'),
        QKeySequence(QApplication.translate('ViewManager', 'PgUp')), 0,
        self.editorActGrp, 'vm_edit_move_up_page')
    self.esm.setMapping(act, QsciScintilla.SCI_PAGEUP)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move down one page'),
        QApplication.translate('ViewManager', 'Move down one page'),
        QKeySequence(QApplication.translate('ViewManager', 'PgDown')), 0,
        self.editorActGrp, 'vm_edit_move_down_page')
    self.esm.setMapping(act, QsciScintilla.SCI_PAGEDOWN)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move to start of text'),
        QApplication.translate('ViewManager', 'Move to start of text'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Home')), 0,
        self.editorActGrp, 'vm_edit_move_start_text')
    self.esm.setMapping(act, QsciScintilla.SCI_DOCUMENTSTART)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Move to end of text'),
        QApplication.translate('ViewManager', 'Move to end of text'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+End')), 0,
        self.editorActGrp, 'vm_edit_move_end_text')
    self.esm.setMapping(act, QsciScintilla.SCI_DOCUMENTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Indent one level'),
        QApplication.translate('ViewManager', 'Indent one level'),
        QKeySequence(QApplication.translate('ViewManager', 'Tab')), 0,
        self.editorActGrp, 'vm_edit_indent_one_level')
    self.esm.setMapping(act, QsciScintilla.SCI_TAB)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Unindent one level'),
        QApplication.translate('ViewManager', 'Unindent one level'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+Tab')), 0,
        self.editorActGrp, 'vm_edit_unindent_one_level')
    self.esm.setMapping(act, QsciScintilla.SCI_BACKTAB)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection left one character'),
        QApplication.translate('ViewManager',
            'Extend selection left one character'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+Left')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_left_char')
    self.esm.setMapping(act, QsciScintilla.SCI_CHARLEFTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection right one character'),
        QApplication.translate('ViewManager',
            'Extend selection right one character'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+Right')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_right_char')
    self.esm.setMapping(act, QsciScintilla.SCI_CHARRIGHTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection up one line'),
        QApplication.translate('ViewManager',
            'Extend selection up one line'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+Up')), 0,
        self.editorActGrp, 'vm_edit_extend_selection_up_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEUPEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection down one line'),
        QApplication.translate('ViewManager',
            'Extend selection down one line'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+Down')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_down_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEDOWNEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection left one word part'),
        QApplication.translate('ViewManager',
            'Extend selection left one word part'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Shift+Left')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_left_word_part')
    self.esm.setMapping(act, QsciScintilla.SCI_WORDPARTLEFTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection right one word part'),
        QApplication.translate('ViewManager',
            'Extend selection right one word part'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Shift+Right')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_right_word_part')
    self.esm.setMapping(act, QsciScintilla.SCI_WORDPARTRIGHTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection left one word'),
        QApplication.translate('ViewManager',
            'Extend selection left one word'),
        QKeySequence(QApplication.translate('ViewManager',
                'Ctrl+Shift+Left')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_left_word')
    self.esm.setMapping(act, QsciScintilla.SCI_WORDLEFTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection right one word'),
        QApplication.translate('ViewManager',
            'Extend selection right one word'),
        QKeySequence(QApplication.translate('ViewManager',
                'Ctrl+Shift+Right')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_right_word')
    self.esm.setMapping(act, QsciScintilla.SCI_WORDRIGHTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection to first visible character in line'),
        QApplication.translate('ViewManager',
            'Extend selection to first visible character in line'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+Home')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_first_visible_char')
    self.esm.setMapping(act, QsciScintilla.SCI_VCHOMEEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection to start of line'),
        QApplication.translate('ViewManager',
            'Extend selection to start of line'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Shift+Home')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_start_line')
    self.esm.setMapping(act, QsciScintilla.SCI_HOMEDISPLAYEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection to end of line'),
        QApplication.translate('ViewManager',
            'Extend selection to end of line'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+End')), 0,
        self.editorActGrp, 'vm_edit_extend_selection_end_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEENDEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection up one paragraph'),
        QApplication.translate('ViewManager',
            'Extend selection up one paragraph'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Shift+Up')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_up_para')
    self.esm.setMapping(act, QsciScintilla.SCI_PARAUPEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection down one paragraph'),
        QApplication.translate('ViewManager',
            'Extend selection down one paragraph'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Shift+Down')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_down_para')
    self.esm.setMapping(act, QsciScintilla.SCI_PARADOWNEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection up one page'),
        QApplication.translate('ViewManager',
            'Extend selection up one page'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+PgUp')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_up_page')
    self.esm.setMapping(act, QsciScintilla.SCI_PAGEUPEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection down one page'),
        QApplication.translate('ViewManager',
            'Extend selection down one page'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+PgDown')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_down_page')
    self.esm.setMapping(act, QsciScintilla.SCI_PAGEDOWNEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection to start of text'),
        QApplication.translate('ViewManager',
            'Extend selection to start of text'),
        QKeySequence(QApplication.translate('ViewManager',
                'Ctrl+Shift+Home')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_start_text')
    self.esm.setMapping(act, QsciScintilla.SCI_DOCUMENTSTARTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection to end of text'),
        QApplication.translate('ViewManager',
            'Extend selection to end of text'),
        QKeySequence(QApplication.translate('ViewManager',
                'Ctrl+Shift+End')),
        0,
        self.editorActGrp, 'vm_edit_extend_selection_end_text')
    self.esm.setMapping(act, QsciScintilla.SCI_DOCUMENTENDEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Delete previous character'),
        QApplication.translate('ViewManager', 'Delete previous character'),
        QKeySequence(QApplication.translate('ViewManager', 'Backspace')),
        QKeySequence(QApplication.translate('ViewManager',
                'Shift+Backspace')),
        self.editorActGrp, 'vm_edit_delete_previous_char')
    self.esm.setMapping(act, QsciScintilla.SCI_DELETEBACK)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Delete previous character if not at line start'),
        QApplication.translate('ViewManager',
            'Delete previous character if not at line start'),
        0, 0,
        self.editorActGrp, 'vm_edit_delet_previous_char_not_line_start')
    self.esm.setMapping(act, QsciScintilla.SCI_DELETEBACKNOTLINE)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Delete current character'),
        QApplication.translate('ViewManager', 'Delete current character'),
        QKeySequence(QApplication.translate('ViewManager', 'Del')), 0,
        self.editorActGrp, 'vm_edit_delete_current_char')
    self.esm.setMapping(act, QsciScintilla.SCI_CLEAR)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Delete word to left'),
        QApplication.translate('ViewManager', 'Delete word to left'),
        QKeySequence(QApplication.translate('ViewManager',
                'Ctrl+Backspace')),
        0,
        self.editorActGrp, 'vm_edit_delete_word_left')
    self.esm.setMapping(act, QsciScintilla.SCI_DELWORDLEFT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Delete word to right'),
        QApplication.translate('ViewManager', 'Delete word to right'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Del')), 0,
        self.editorActGrp, 'vm_edit_delete_word_right')
    self.esm.setMapping(act, QsciScintilla.SCI_DELWORDRIGHT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Delete line to left'),
        QApplication.translate('ViewManager', 'Delete line to left'),
        QKeySequence(QApplication.translate('ViewManager',
                'Ctrl+Shift+Backspace')),
        0,
        self.editorActGrp, 'vm_edit_delete_line_left')
    self.esm.setMapping(act, QsciScintilla.SCI_DELLINELEFT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Delete line to right'),
        QApplication.translate('ViewManager', 'Delete line to right'),
        QKeySequence(QApplication.translate('ViewManager',
                'Ctrl+Shift+Del')),
        0,
        self.editorActGrp, 'vm_edit_delete_line_right')
    self.esm.setMapping(act, QsciScintilla.SCI_DELLINERIGHT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Insert new line'),
        QApplication.translate('ViewManager', 'Insert new line'),
        QKeySequence(QApplication.translate('ViewManager', 'Return')),
        QKeySequence(QApplication.translate('ViewManager', 'Enter')),
        self.editorActGrp, 'vm_edit_insert_line')
    self.esm.setMapping(act, QsciScintilla.SCI_NEWLINE)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Insert new line below current line'),
        QApplication.translate('ViewManager',
            'Insert new line below current line'),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+Return')),
        QKeySequence(QApplication.translate('ViewManager', 'Shift+Enter')),
        self.editorActGrp, 'vm_edit_insert_line_below')
    self.connect(act, SIGNAL('triggered()'), self.__newLineBelow)
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Delete current line'),
        QApplication.translate('ViewManager', 'Delete current line'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+U')),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Shift+L')),
        self.editorActGrp, 'vm_edit_delete_current_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEDELETE)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Duplicate current line'),
        QApplication.translate('ViewManager', 'Duplicate current line'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+D')), 0,
        self.editorActGrp, 'vm_edit_duplicate_current_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEDUPLICATE)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Swap current and previous lines'),
        QApplication.translate('ViewManager',
            'Swap current and previous lines'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+T')), 0,
        self.editorActGrp, 'vm_edit_swap_current_previous_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINETRANSPOSE)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Cut current line'),
        QApplication.translate('ViewManager', 'Cut current line'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Shift+L')),
        0,
        self.editorActGrp, 'vm_edit_cut_current_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINECUT)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Copy current line'),
        QApplication.translate('ViewManager', 'Copy current line'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Shift+T')),
        0,
        self.editorActGrp, 'vm_edit_copy_current_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINECOPY)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Toggle insert/overtype'),
        QApplication.translate('ViewManager', 'Toggle insert/overtype'),
        QKeySequence(QApplication.translate('ViewManager', 'Ins')), 0,
        self.editorActGrp, 'vm_edit_toggle_insert_overtype')
    self.esm.setMapping(act, QsciScintilla.SCI_EDITTOGGLEOVERTYPE)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Convert selection to lower case'),
        QApplication.translate('ViewManager',
            'Convert selection to lower case'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Shift+U')),
        0,
        self.editorActGrp, 'vm_edit_convert_selection_lower')
    self.esm.setMapping(act, QsciScintilla.SCI_LOWERCASE)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Convert selection to upper case'),
        QApplication.translate('ViewManager',
            'Convert selection to upper case'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Shift+U')),
        0,
        self.editorActGrp, 'vm_edit_convert_selection_upper')
    self.esm.setMapping(act, QsciScintilla.SCI_UPPERCASE)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Move to end of displayed line'),
        QApplication.translate('ViewManager',
            'Move to end of displayed line'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+End')), 0,
        self.editorActGrp, 'vm_edit_move_end_displayed_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEENDDISPLAY)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend selection to end of displayed line'),
        QApplication.translate('ViewManager',
            'Extend selection to end of displayed line'),
        0, 0,
        self.editorActGrp, 'vm_edit_extend_selection_end_displayed_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEENDDISPLAYEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Formfeed'),
        QApplication.translate('ViewManager', 'Formfeed'),
        0, 0,
        self.editorActGrp, 'vm_edit_formfeed')
    self.esm.setMapping(act, QsciScintilla.SCI_FORMFEED)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager', 'Escape'),
        QApplication.translate('ViewManager', 'Escape'),
        QKeySequence(QApplication.translate('ViewManager', 'Esc')), 0,
        self.editorActGrp, 'vm_edit_escape')
    self.esm.setMapping(act, QsciScintilla.SCI_CANCEL)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend rectangular selection down one line'),
        QApplication.translate('ViewManager',
            'Extend rectangular selection down one line'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Ctrl+Down')),
        0,
        self.editorActGrp, 'vm_edit_extend_rect_selection_down_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEDOWNRECTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend rectangular selection up one line'),
        QApplication.translate('ViewManager',
            'Extend rectangular selection up one line'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Ctrl+Up')),
        0,
        self.editorActGrp, 'vm_edit_extend_rect_selection_up_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEUPRECTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend rectangular selection left one character'),
        QApplication.translate('ViewManager',
            'Extend rectangular selection left one character'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Ctrl+Left')),
        0,
        self.editorActGrp, 'vm_edit_extend_rect_selection_left_char')
    self.esm.setMapping(act, QsciScintilla.SCI_CHARLEFTRECTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend rectangular selection right one character'),
        QApplication.translate('ViewManager',
            'Extend rectangular selection right one character'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Ctrl+Right')),
        0,
        self.editorActGrp, 'vm_edit_extend_rect_selection_right_char')
    self.esm.setMapping(act, QsciScintilla.SCI_CHARRIGHTRECTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend rectangular selection to first'
            ' visible character in line'),
        QApplication.translate('ViewManager',
            'Extend rectangular selection to first'
            ' visible character in line'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Ctrl+Home')),
        0,
        self.editorActGrp,
        'vm_edit_extend_rect_selection_first_visible_char')
    self.esm.setMapping(act, QsciScintilla.SCI_VCHOMERECTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend rectangular selection to end of line'),
        QApplication.translate('ViewManager',
            'Extend rectangular selection to end of line'),
        QKeySequence(QApplication.translate('ViewManager', 'Alt+Ctrl+End')),
        0,
        self.editorActGrp, 'vm_edit_extend_rect_selection_end_line')
    self.esm.setMapping(act, QsciScintilla.SCI_LINEENDRECTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend rectangular selection up one page'),
        QApplication.translate('ViewManager',
            'Extend rectangular selection up one page'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Ctrl+PgUp')),
        0,
        self.editorActGrp, 'vm_edit_extend_rect_selection_up_page')
    self.esm.setMapping(act, QsciScintilla.SCI_PAGEUPRECTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Extend rectangular selection down one page'),
        QApplication.translate('ViewManager',
            'Extend rectangular selection down one page'),
        QKeySequence(QApplication.translate('ViewManager',
                'Alt+Ctrl+PgDown')),
        0,
        self.editorActGrp, 'vm_edit_extend_rect_selection_down_page')
    self.esm.setMapping(act, QsciScintilla.SCI_PAGEDOWNRECTEXTEND)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    act = E4Action(QApplication.translate('ViewManager',
            'Duplicate current selection'),
        QApplication.translate('ViewManager',
            'Duplicate current selection'),
        QKeySequence(QApplication.translate('ViewManager', 'Ctrl+Shift+D')),
        0,
        self.editorActGrp, 'vm_edit_duplicate_current_selection')
    self.esm.setMapping(act, QsciScintilla.SCI_SELECTIONDUPLICATE)
    self.connect(act, SIGNAL('triggered()'), self.esm, SLOT('map()'))
    self.editActions.append(act)
    self.editorActGrp.setEnabled(False)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="1789" endline="1852">
INDENT
    autocompletionMenu = QMenu(QApplication.translate('ViewManager', '&Autocomplete'), self.ui)
    autocompletionMenu.setTearOffEnabled(True)
    autocompletionMenu.addAction(self.autoCompleteAct)
    autocompletionMenu.addAction(self.autoCompleteFromDocAct)
    autocompletionMenu.addAction(self.autoCompleteFromAPIsAct)
    autocompletionMenu.addAction(self.autoCompleteFromAllAct)
    autocompletionMenu.addSeparator()
    autocompletionMenu.addAction(self.calltipsAct)
    searchMenu = QMenu(QApplication.translate('ViewManager', '&Search'), self.ui)
    searchMenu.setTearOffEnabled(True)
    searchMenu.addAction(self.quickSearchAct)
    searchMenu.addAction(self.quickSearchBackAct)
    searchMenu.addAction(self.searchAct)
    searchMenu.addAction(self.searchNextAct)
    searchMenu.addAction(self.searchPrevAct)
    searchMenu.addAction(self.replaceAct)
    searchMenu.addSeparator()
    searchMenu.addAction(self.searchClearMarkersAct)
    searchMenu.addSeparator()
    searchMenu.addAction(self.searchFilesAct)
    searchMenu.addAction(self.replaceFilesAct)
    menu = QMenu(QApplication.translate('ViewManager', '&Edit'), self.ui)
    menu.setTearOffEnabled(True)
    menu.addAction(self.undoAct)
    menu.addAction(self.redoAct)
    menu.addAction(self.revertAct)
    menu.addSeparator()
    menu.addAction(self.cutAct)
    menu.addAction(self.copyAct)
    menu.addAction(self.pasteAct)
    menu.addAction(self.deleteAct)
    menu.addSeparator()
    menu.addAction(self.indentAct)
    menu.addAction(self.unindentAct)
    menu.addAction(self.smartIndentAct)
    menu.addSeparator()
    menu.addAction(self.commentAct)
    menu.addAction(self.uncommentAct)
    menu.addAction(self.streamCommentAct)
    menu.addAction(self.boxCommentAct)
    menu.addSeparator()
    menu.addMenu(autocompletionMenu)
    menu.addSeparator()
    menu.addMenu(searchMenu)
    menu.addSeparator()
    menu.addAction(self.gotoAct)
    menu.addAction(self.gotoBraceAct)
    menu.addSeparator()
    menu.addAction(self.selectBraceAct)
    menu.addAction(self.selectAllAct)
    menu.addAction(self.deselectAllAct)
    menu.addSeparator()
    menu.addAction(self.shortenEmptyAct)
    menu.addAction(self.convertEOLAct)
    return menu
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="1854" endline="1887">
INDENT
    tb = QToolBar(QApplication.translate('ViewManager', 'Edit'), self.ui)
    tb.setIconSize(UI.Config.ToolBarIconSize)
    tb.setObjectName("EditToolbar")
    tb.setToolTip(QApplication.translate('ViewManager', 'Edit'))
    tb.addAction(self.undoAct)
    tb.addAction(self.redoAct)
    tb.addSeparator()
    tb.addAction(self.cutAct)
    tb.addAction(self.copyAct)
    tb.addAction(self.pasteAct)
    tb.addAction(self.deleteAct)
    tb.addSeparator()
    tb.addAction(self.indentAct)
    tb.addAction(self.unindentAct)
    tb.addSeparator()
    tb.addAction(self.commentAct)
    tb.addAction(self.uncommentAct)
    toolbarManager.addToolBar(tb, tb.windowTitle())
    toolbarManager.addAction(self.smartIndentAct, tb.windowTitle())
    return tb

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="1889" endline="2109">
INDENT
    self.searchActGrp = createActionGroup(self)
    self.searchAct = E4Action(QApplication.translate('ViewManager', 'Search'),
        UI.PixmapCache.getIcon("find.png"),
        QApplication.translate('ViewManager', '&Search...'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+F", "Search|Search")),
        0,
        self.searchActGrp, 'vm_search')
    self.searchAct.setStatusTip(QApplication.translate('ViewManager',
            'Search for a text'))
    self.searchAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Search</b>"""
            """<p>Search for some text in the current editor. A"""
            """ dialog is shown to enter the searchtext and options"""
            """ for the search.</p>"""))
    self.connect(self.searchAct, SIGNAL('triggered()'), self.__search)
    self.searchActions.append(self.searchAct)
    self.searchNextAct = E4Action(QApplication.translate('ViewManager',
            'Search next'),
        UI.PixmapCache.getIcon("findNext.png"),
        QApplication.translate('ViewManager', 'Search &next'),
        QKeySequence(QApplication.translate('ViewManager',
                "F3", "Search|Search next")),
        0,
        self.searchActGrp, 'vm_search_next')
    self.searchNextAct.setStatusTip(QApplication.translate('ViewManager',
            'Search next occurrence of text'))
    self.searchNextAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Search next</b>"""
            """<p>Search the next occurrence of some text in the current editor."""
            """ The previously entered searchtext and options are reused.</p>"""))
    self.connect(self.searchNextAct, SIGNAL('triggered()'), self.searchDlg.findNext)
    self.searchActions.append(self.searchNextAct)
    self.searchPrevAct = E4Action(QApplication.translate('ViewManager',
            'Search previous'),
        UI.PixmapCache.getIcon("findPrev.png"),
        QApplication.translate('ViewManager', 'Search &previous'),
        QKeySequence(QApplication.translate('ViewManager',
                "Shift+F3", "Search|Search previous")),
        0,
        self.searchActGrp, 'vm_search_previous')
    self.searchPrevAct.setStatusTip(QApplication.translate('ViewManager',
            'Search previous occurrence of text'))
    self.searchPrevAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Search previous</b>"""
            """<p>Search the previous occurrence of some text in the current editor."""
            """ The previously entered searchtext and options are reused.</p>"""))
    self.connect(self.searchPrevAct, SIGNAL('triggered()'), self.searchDlg.findPrev)
    self.searchActions.append(self.searchPrevAct)
    self.searchClearMarkersAct = E4Action(QApplication.translate('ViewManager',
            'Clear search markers'),
        UI.PixmapCache.getIcon("findClear.png"),
        QApplication.translate('ViewManager', 'Clear search markers'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+3", "Search|Clear search markers")),
        0,
        self.searchActGrp, 'vm_clear_search_markers')
    self.searchClearMarkersAct.setStatusTip(QApplication.translate('ViewManager',
            'Clear all displayed search markers'))
    self.searchClearMarkersAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Clear search markers</b>"""
            """<p>Clear all displayed search markers.</p>"""))
    self.connect(self.searchClearMarkersAct, SIGNAL('triggered()'),
        self.__searchClearMarkers)
    self.searchActions.append(self.searchClearMarkersAct)
    self.replaceAct = E4Action(QApplication.translate('ViewManager', 'Replace'),
        QApplication.translate('ViewManager', '&Replace...'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+R", "Search|Replace")),
        0,
        self.searchActGrp, 'vm_search_replace')
    self.replaceAct.setStatusTip(QApplication.translate('ViewManager',
            'Replace some text'))
    self.replaceAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Replace</b>"""
            """<p>Search for some text in the current editor and replace it. A"""
            """ dialog is shown to enter the searchtext, the replacement text"""
            """ and options for the search and replace.</p>"""))
    self.connect(self.replaceAct, SIGNAL('triggered()'), self.__replace)
    self.searchActions.append(self.replaceAct)
    self.quickSearchAct = E4Action(QApplication.translate('ViewManager',
            'Quicksearch'),
        UI.PixmapCache.getIcon("quickFindNext.png"),
        QApplication.translate('ViewManager', '&Quicksearch'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Shift+K", "Search|Quicksearch")),
        0,
        self.searchActGrp, 'vm_quicksearch')
    self.quickSearchAct.setStatusTip(QApplication.translate('ViewManager',
            'Perform a quicksearch'))
    self.quickSearchAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Quicksearch</b>"""
            """<p>This activates the quicksearch function of the IDE by"""
            """ giving focus to the quicksearch entry field. If this field"""
            """ is already active and contains text, it searches for the"""
            """ next occurrence of this text.</p>"""))
    self.connect(self.quickSearchAct, SIGNAL('triggered()'), self.__quickSearch)
    self.searchActions.append(self.quickSearchAct)
    self.quickSearchBackAct = E4Action(QApplication.translate('ViewManager',
            'Quicksearch backwards'),
        UI.PixmapCache.getIcon("quickFindPrev.png"),
        QApplication.translate('ViewManager', 'Quicksearch &backwards'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Shift+J", "Search|Quicksearch backwards")),
        0, self.searchActGrp, 'vm_quicksearch_backwards')
    self.quickSearchBackAct.setStatusTip(QApplication.translate('ViewManager',
            'Perform a quicksearch backwards'))
    self.quickSearchBackAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Quicksearch backwards</b>"""
            """<p>This searches the previous occurrence of the quicksearch text.</p>"""))
    self.connect(self.quickSearchBackAct, SIGNAL('triggered()'),
        self.__quickSearchPrev)
    self.searchActions.append(self.quickSearchBackAct)
    self.quickSearchExtendAct = E4Action(QApplication.translate('ViewManager',
            'Quicksearch extend'),
        UI.PixmapCache.getIcon("quickFindExtend.png"),
        QApplication.translate('ViewManager', 'Quicksearch e&xtend'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Shift+H", "Search|Quicksearch extend")),
        0,
        self.searchActGrp, 'vm_quicksearch_extend')
    self.quickSearchExtendAct.setStatusTip(QApplication.translate('ViewManager', 'Extend the quicksearch to the end of the current word'))
    self.quickSearchExtendAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Quicksearch extend</b>"""
            """<p>This extends the quicksearch text to the end of the word"""
            """ currently found.</p>"""))
    self.connect(self.quickSearchExtendAct, SIGNAL('triggered()'),
        self.__quickSearchExtend)
    self.searchActions.append(self.quickSearchExtendAct)
    self.gotoAct = E4Action(QApplication.translate('ViewManager', 'Goto Line'),
        UI.PixmapCache.getIcon("goto.png"),
        QApplication.translate('ViewManager', '&Goto Line...'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+G", "Search|Goto Line")),
        0,
        self.searchActGrp, 'vm_search_goto_line')
    self.gotoAct.setStatusTip(QApplication.translate('ViewManager', 'Goto Line'))
    self.gotoAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Goto Line</b>"""
            """<p>Go to a specific line of text in the current editor."""
            """ A dialog is shown to enter the linenumber.</p>"""))
    self.connect(self.gotoAct, SIGNAL('triggered()'), self.__goto)
    self.searchActions.append(self.gotoAct)
    self.gotoBraceAct = E4Action(QApplication.translate('ViewManager', 'Goto Brace'),
        UI.PixmapCache.getIcon("gotoBrace.png"),
        QApplication.translate('ViewManager', 'Goto &Brace'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+L", "Search|Goto Brace")),
        0,
        self.searchActGrp, 'vm_search_goto_brace')
    self.gotoBraceAct.setStatusTip(QApplication.translate('ViewManager',
            'Goto Brace'))
    self.gotoBraceAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Goto Brace</b>"""
            """<p>Go to the matching brace in the current editor.</p>"""))
    self.connect(self.gotoBraceAct, SIGNAL('triggered()'), self.__gotoBrace)
    self.searchActions.append(self.gotoBraceAct)
    self.searchActGrp.setEnabled(False)
    self.searchFilesAct = E4Action(QApplication.translate('ViewManager',
            'Search in Files'),
        UI.PixmapCache.getIcon("projectFind.png"),
        QApplication.translate('ViewManager', 'Search in &Files...'),
        QKeySequence(QApplication.translate('ViewManager',
                "Shift+Ctrl+F", "Search|Search Files")),
        0,
        self, 'vm_search_in_files')
    self.searchFilesAct.setStatusTip(QApplication.translate('ViewManager',
            'Search for a text in files'))
    self.searchFilesAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Search in Files</b>"""
            """<p>Search for some text in the files of a directory tree"""
            """ or the project. A dialog is shown to enter the searchtext"""
            """ and options for the search and to display the result.</p>"""))
    self.connect(self.searchFilesAct, SIGNAL('triggered()'), self.__searchFiles)
    self.searchActions.append(self.searchFilesAct)
    self.replaceFilesAct = E4Action(QApplication.translate('ViewManager',
            'Replace in Files'),
        QApplication.translate('ViewManager', 'Replace in F&iles...'),
        QKeySequence(QApplication.translate('ViewManager',
                "Shift+Ctrl+R", "Search|Replace in Files")),
        0,
        self, 'vm_replace_in_files')
    self.replaceFilesAct.setStatusTip(QApplication.translate('ViewManager',
            'Search for a text in files and replace it'))
    self.replaceFilesAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Replace in Files</b>"""
            """<p>Search for some text in the files of a directory tree"""
            """ or the project and replace it. A dialog is shown to enter"""
            """ the searchtext, the replacement text and options for the"""
            """ search and to display the result.</p>"""))
    self.connect(self.replaceFilesAct, SIGNAL('triggered()'), self.__replaceFiles)
    self.searchActions.append(self.replaceFilesAct)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2111" endline="2197">
INDENT
    qtb = QToolBar(QApplication.translate('ViewManager', 'Quicksearch'), self.ui)
    qtb.setIconSize(UI.Config.ToolBarIconSize)
    qtb.setObjectName("QuicksearchToolbar")
    qtb.setToolTip(QApplication.translate('ViewManager', 'Quicksearch'))
    self.quickFindLineEdit = QuickSearchLineEdit(self)
    self.quickFindtextCombo = QComboBox(self)
    self.quickFindtextCombo.setEditable(True)
    self.quickFindtextCombo.setLineEdit(self.quickFindLineEdit)
    self.quickFindtextCombo.setDuplicatesEnabled(False)
    self.quickFindtextCombo.setInsertPolicy(QComboBox.InsertAtTop)
    self.quickFindtextCombo.lastActive = None
    self.quickFindtextCombo.lastCursorPos = None
    self.quickFindtextCombo.leForegroundColor = self.quickFindtextCombo.lineEdit().palette().color(QPalette.Text)
    self.quickFindtextCombo.leBackgroundColor = self.quickFindtextCombo.lineEdit().palette().color(QPalette.Base)
    self.quickFindtextCombo.lastSearchText = QString()
    self.quickFindtextCombo._editor = self.quickFindtextCombo.lineEdit()

    self.quickFindtextCombo.setAutoCompletion(False)
    self.quickFindtextCombo.setMinimumWidth(250)
    self.quickFindtextCombo.addItem("")
    self.quickFindtextCombo.setWhatsThis(QApplication.translate('ViewManager',
            """<p>Enter the searchtext directly into this field."""
            """ The search will be performed case insensitive."""
            """ The quicksearch function is activated upon activation"""
            """ of the quicksearch next action (default key Ctrl+Shift+K),"""
            """ if this entry field does not have the input focus."""
            """ Otherwise it searches for the next occurrence of the"""
            """ text entered. The quicksearch backwards action"""
            """ (default key Ctrl+Shift+J) searches backward."""
            """ Activating the 'quicksearch extend' action"""
            """ (default key Ctrl+Shift+H) extends the current"""
            """ searchtext to the end of the currently found word."""
            """ The quicksearch can be ended by pressing the Return key"""
            """ while the quicksearch entry has the the input focus.</p>"""))
    self.connect(self.quickFindtextCombo._editor, SIGNAL('returnPressed()'),
        self.__quickSearchEnter)
    self.connect(self.quickFindtextCombo._editor,
        SIGNAL('textChanged(const QString&)'), self.__quickSearchText)
    self.connect(self.quickFindtextCombo._editor, SIGNAL('escPressed()'),
        self.__quickSearchEscape)
    self.connect(self.quickFindtextCombo._editor, SIGNAL('gotFocus()'),
        self.__quickSearchFocusIn)
    self.quickFindtextAction = QWidgetAction(self)
    self.quickFindtextAction.setDefaultWidget(self.quickFindtextCombo)
    self.quickFindtextAction.setObjectName("vm_quickfindtext_action")
    self.quickFindtextAction.setText(self.trUtf8("Quicksearch Textedit"))
    qtb.addAction(self.quickFindtextAction)
    qtb.addAction(self.quickSearchAct)
    qtb.addAction(self.quickSearchBackAct)
    qtb.addAction(self.quickSearchExtendAct)
    self.quickFindtextCombo.setEnabled(False)
    tb = QToolBar(QApplication.translate('ViewManager', 'Search'), self.ui)
    tb.setIconSize(UI.Config.ToolBarIconSize)
    tb.setObjectName("SearchToolbar")
    tb.setToolTip(QApplication.translate('ViewManager', 'Search'))
    tb.addAction(self.searchAct)
    tb.addAction(self.searchNextAct)
    tb.addAction(self.searchPrevAct)
    tb.addSeparator()
    tb.addAction(self.searchClearMarkersAct)
    tb.addSeparator()
    tb.addAction(self.searchFilesAct)
    tb.setAllowedAreas(Qt.ToolBarAreas(Qt.TopToolBarArea | Qt.BottomToolBarArea))
    toolbarManager.addToolBar(qtb, qtb.windowTitle())
    toolbarManager.addToolBar(tb, tb.windowTitle())
    toolbarManager.addAction(self.gotoAct, tb.windowTitle())
    toolbarManager.addAction(self.gotoBraceAct, tb.windowTitle())
    return tb, qtb

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2199" endline="2392">
INDENT
    self.viewActGrp = createActionGroup(self)
    self.viewFoldActGrp = createActionGroup(self)
    self.zoomInAct = E4Action(QApplication.translate('ViewManager', 'Zoom in'),
        UI.PixmapCache.getIcon("zoomIn.png"),
        QApplication.translate('ViewManager', 'Zoom &in'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl++", "View|Zoom in")),
        0,
        self.viewActGrp, 'vm_view_zoom_in')
    self.zoomInAct.setStatusTip(QApplication.translate('ViewManager',
            'Zoom in on the text'))
    self.zoomInAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Zoom in</b>"""
            """<p>Zoom in on the text. This makes the text bigger.</p>"""))
    self.connect(self.zoomInAct, SIGNAL('triggered()'), self.__zoomIn)
    self.viewActions.append(self.zoomInAct)
    self.zoomOutAct = E4Action(QApplication.translate('ViewManager', 'Zoom out'),
        UI.PixmapCache.getIcon("zoomOut.png"),
        QApplication.translate('ViewManager', 'Zoom &out'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+-", "View|Zoom out")),
        0,
        self.viewActGrp, 'vm_view_zoom_out')
    self.zoomOutAct.setStatusTip(QApplication.translate('ViewManager',
            'Zoom out on the text'))
    self.zoomOutAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Zoom out</b>"""
            """<p>Zoom out on the text. This makes the text smaller.</p>"""))
    self.connect(self.zoomOutAct, SIGNAL('triggered()'), self.__zoomOut)
    self.viewActions.append(self.zoomOutAct)
    self.zoomToAct = E4Action(QApplication.translate('ViewManager', 'Zoom'),
        UI.PixmapCache.getIcon("zoomTo.png"),
        QApplication.translate('ViewManager', '&Zoom'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+#", "View|Zoom")),
        0,
        self.viewActGrp, 'vm_view_zoom')
    self.zoomToAct.setStatusTip(QApplication.translate('ViewManager',
            'Zoom the text'))
    self.zoomToAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Zoom</b>"""
            """<p>Zoom the text. This opens a dialog where the"""
            """ desired size can be entered.</p>"""))
    self.connect(self.zoomToAct, SIGNAL('triggered()'), self.__zoom)
    self.viewActions.append(self.zoomToAct)
    self.toggleAllAct = E4Action(QApplication.translate('ViewManager',
            'Toggle all folds'),
        QApplication.translate('ViewManager', 'Toggle &all folds'),
        0, 0, self.viewFoldActGrp, 'vm_view_toggle_all_folds')
    self.toggleAllAct.setStatusTip(QApplication.translate('ViewManager',
            'Toggle all folds'))
    self.toggleAllAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Toggle all folds</b>"""
            """<p>Toggle all folds of the current editor.</p>"""))
    self.connect(self.toggleAllAct, SIGNAL('triggered()'), self.__toggleAll)
    self.viewActions.append(self.toggleAllAct)
    self.toggleAllChildrenAct = E4Action(QApplication.translate('ViewManager',
            'Toggle all folds (including children)'),
        QApplication.translate('ViewManager',
            'Toggle all &folds (including children)'),
        0, 0, self.viewFoldActGrp, 'vm_view_toggle_all_folds_children')
    self.toggleAllChildrenAct.setStatusTip(QApplication.translate('ViewManager',
            'Toggle all folds (including children)'))
    self.toggleAllChildrenAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Toggle all folds (including children)</b>"""
            """<p>Toggle all folds of the current editor including"""
            """ all children.</p>"""))
    self.connect(self.toggleAllChildrenAct, SIGNAL('triggered()'),
        self.__toggleAllChildren)
    self.viewActions.append(self.toggleAllChildrenAct)
    self.toggleCurrentAct = E4Action(QApplication.translate('ViewManager',
            'Toggle current fold'),
        QApplication.translate('ViewManager', 'Toggle &current fold'),
        0, 0, self.viewFoldActGrp, 'vm_view_toggle_current_fold')
    self.toggleCurrentAct.setStatusTip(QApplication.translate('ViewManager',
            'Toggle current fold'))
    self.toggleCurrentAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Toggle current fold</b>"""
            """<p>Toggle the folds of the current line of the current editor.</p>"""))
    self.connect(self.toggleCurrentAct, SIGNAL('triggered()'), self.__toggleCurrent)
    self.viewActions.append(self.toggleCurrentAct)
    self.unhighlightAct = E4Action(QApplication.translate('ViewManager',
            'Remove all highlights'),
        UI.PixmapCache.getIcon("unhighlight.png"),
        QApplication.translate('ViewManager',
            'Remove all highlights'),
        0, 0, self, 'vm_view_unhighlight')
    self.unhighlightAct.setStatusTip(QApplication.translate('ViewManager',
            'Remove all highlights'))
    self.unhighlightAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Remove all highlights</b>"""
            """<p>Remove the highlights of all editors.</p>"""))
    self.connect(self.unhighlightAct, SIGNAL('triggered()'), self.unhighlight)
    self.viewActions.append(self.unhighlightAct)
    self.splitViewAct = E4Action(QApplication.translate('ViewManager', 'Split view'),
        UI.PixmapCache.getIcon("splitVertical.png"),
        QApplication.translate('ViewManager', '&Split view'),
        0, 0, self, 'vm_view_split_view')
    self.splitViewAct.setStatusTip(QApplication.translate('ViewManager',
            'Add a split to the view'))
    self.splitViewAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Split view</b>"""
            """<p>Add a split to the view.</p>"""))
    self.connect(self.splitViewAct, SIGNAL('triggered()'), self.__splitView)
    self.viewActions.append(self.splitViewAct)
    self.splitOrientationAct = E4Action(QApplication.translate('ViewManager',
            'Arrange horizontally'),
        QApplication.translate('ViewManager',
            'Arrange &horizontally'),
        0, 0, self, 'vm_view_arrange_horizontally', True)
    self.splitOrientationAct.setStatusTip(QApplication.translate('ViewManager',
            'Arrange the splitted views horizontally'))
    self.splitOrientationAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Arrange horizontally</b>"""
            """<p>Arrange the splitted views horizontally.</p>"""))
    self.splitOrientationAct.setChecked(False)
    self.connect(self.splitOrientationAct, SIGNAL('toggled(bool)'),
        self.__splitOrientation)
    self.viewActions.append(self.splitOrientationAct)
    self.splitRemoveAct = E4Action(QApplication.translate('ViewManager',
            'Remove split'),
        UI.PixmapCache.getIcon("remsplitVertical.png"),
        QApplication.translate('ViewManager', '&Remove split'),
        0, 0, self, 'vm_view_remove_split')
    self.splitRemoveAct.setStatusTip(QApplication.translate('ViewManager',
            'Remove the current split'))
    self.splitRemoveAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Remove split</b>"""
            """<p>Remove the current split.</p>"""))
    self.connect(self.splitRemoveAct, SIGNAL('triggered()'), self.removeSplit)
    self.viewActions.append(self.splitRemoveAct)
    self.nextSplitAct = E4Action(QApplication.translate('ViewManager', 'Next split'),
        QApplication.translate('ViewManager', '&Next split'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Alt+N", "View|Next split")),
        0,
        self, 'vm_next_split')
    self.nextSplitAct.setStatusTip(QApplication.translate('ViewManager',
            'Move to the next split'))
    self.nextSplitAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Next split</b>"""
            """<p>Move to the next split.</p>"""))
    self.connect(self.nextSplitAct, SIGNAL('triggered()'), self.nextSplit)
    self.viewActions.append(self.nextSplitAct)
    self.prevSplitAct = E4Action(QApplication.translate('ViewManager',
            'Previous split'),
        QApplication.translate('ViewManager', '&Previous split'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+Alt+P", "View|Previous split")),
        0, self, 'vm_previous_split')
    self.prevSplitAct.setStatusTip(QApplication.translate('ViewManager',
            'Move to the previous split'))
    self.prevSplitAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Previous split</b>"""
            """<p>Move to the previous split.</p>"""))
    self.connect(self.prevSplitAct, SIGNAL('triggered()'), self.prevSplit)
    self.viewActions.append(self.prevSplitAct)
    self.viewActGrp.setEnabled(False)
    self.viewFoldActGrp.setEnabled(False)
    self.unhighlightAct.setEnabled(False)
    self.splitViewAct.setEnabled(False)
    self.splitOrientationAct.setEnabled(False)
    self.splitRemoveAct.setEnabled(False)
    self.nextSplitAct.setEnabled(False)
    self.prevSplitAct.setEnabled(False)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2394" endline="2415">
INDENT
    menu = QMenu(QApplication.translate('ViewManager', '&View'), self.ui)
    menu.setTearOffEnabled(True)
    menu.addActions(self.viewActGrp.actions())
    menu.addSeparator()
    menu.addActions(self.viewFoldActGrp.actions())
    menu.addSeparator()
    menu.addAction(self.unhighlightAct)
    if self.canSplit() :
    INDENT
        menu.addSeparator()
        menu.addAction(self.splitViewAct)
        menu.addAction(self.splitOrientationAct)
        menu.addAction(self.splitRemoveAct)
        menu.addAction(self.nextSplitAct)
        menu.addAction(self.prevSplitAct)
    DEDENT
    return menu
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2407" endline="2413">
INDENT
    menu.addSeparator()
    menu.addAction(self.splitViewAct)
    menu.addAction(self.splitOrientationAct)
    menu.addAction(self.splitRemoveAct)
    menu.addAction(self.nextSplitAct)
    menu.addAction(self.prevSplitAct)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2417" endline="2440">
INDENT
    tb = QToolBar(QApplication.translate('ViewManager', 'View'), self.ui)
    tb.setIconSize(UI.Config.ToolBarIconSize)
    tb.setObjectName("ViewToolbar")
    tb.setToolTip(QApplication.translate('ViewManager', 'View'))
    tb.addActions(self.viewActGrp.actions())
    toolbarManager.addToolBar(tb, tb.windowTitle())
    toolbarManager.addAction(self.unhighlightAct, tb.windowTitle())
    toolbarManager.addAction(self.splitViewAct, tb.windowTitle())
    toolbarManager.addAction(self.splitRemoveAct, tb.windowTitle())
    return tb

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2442" endline="2526">
INDENT
    self.macroActGrp = createActionGroup(self)
    self.macroStartRecAct = E4Action(QApplication.translate('ViewManager',
            'Start Macro Recording'),
        QApplication.translate('ViewManager',
            'S&tart Macro Recording'),
        0, 0, self.macroActGrp, 'vm_macro_start_recording')
    self.macroStartRecAct.setStatusTip(QApplication.translate('ViewManager',
            'Start Macro Recording'))
    self.macroStartRecAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Start Macro Recording</b>"""
            """<p>Start recording editor commands into a new macro.</p>"""))
    self.connect(self.macroStartRecAct, SIGNAL('triggered()'),
        self.__macroStartRecording)
    self.macroActions.append(self.macroStartRecAct)
    self.macroStopRecAct = E4Action(QApplication.translate('ViewManager',
            'Stop Macro Recording'),
        QApplication.translate('ViewManager',
            'Sto&p Macro Recording'),
        0, 0, self.macroActGrp, 'vm_macro_stop_recording')
    self.macroStopRecAct.setStatusTip(QApplication.translate('ViewManager',
            'Stop Macro Recording'))
    self.macroStopRecAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Stop Macro Recording</b>"""
            """<p>Stop recording editor commands into a new macro.</p>"""))
    self.connect(self.macroStopRecAct, SIGNAL('triggered()'),
        self.__macroStopRecording)
    self.macroActions.append(self.macroStopRecAct)
    self.macroRunAct = E4Action(QApplication.translate('ViewManager', 'Run Macro'),
        QApplication.translate('ViewManager', '&Run Macro'),
        0, 0, self.macroActGrp, 'vm_macro_run')
    self.macroRunAct.setStatusTip(QApplication.translate('ViewManager', 'Run Macro'))
    self.macroRunAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Run Macro</b>"""
            """<p>Run a previously recorded editor macro.</p>"""))
    self.connect(self.macroRunAct, SIGNAL('triggered()'), self.__macroRun)
    self.macroActions.append(self.macroRunAct)
    self.macroDeleteAct = E4Action(QApplication.translate('ViewManager',
            'Delete Macro'),
        QApplication.translate('ViewManager', '&Delete Macro'),
        0, 0, self.macroActGrp, 'vm_macro_delete')
    self.macroDeleteAct.setStatusTip(QApplication.translate('ViewManager',
            'Delete Macro'))
    self.macroDeleteAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Delete Macro</b>"""
            """<p>Delete a previously recorded editor macro.</p>"""))
    self.connect(self.macroDeleteAct, SIGNAL('triggered()'), self.__macroDelete)
    self.macroActions.append(self.macroDeleteAct)
    self.macroLoadAct = E4Action(QApplication.translate('ViewManager', 'Load Macro'),
        QApplication.translate('ViewManager', '&Load Macro'),
        0, 0, self.macroActGrp, 'vm_macro_load')
    self.macroLoadAct.setStatusTip(QApplication.translate('ViewManager',
            'Load Macro'))
    self.macroLoadAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Load Macro</b>"""
            """<p>Load an editor macro from a file.</p>"""))
    self.connect(self.macroLoadAct, SIGNAL('triggered()'), self.__macroLoad)
    self.macroActions.append(self.macroLoadAct)
    self.macroSaveAct = E4Action(QApplication.translate('ViewManager', 'Save Macro'),
        QApplication.translate('ViewManager', '&Save Macro'),
        0, 0, self.macroActGrp, 'vm_macro_save')
    self.macroSaveAct.setStatusTip(QApplication.translate('ViewManager',
            'Save Macro'))
    self.macroSaveAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Save Macro</b>"""
            """<p>Save a previously recorded editor macro to a file.</p>"""))
    self.connect(self.macroSaveAct, SIGNAL('triggered()'), self.__macroSave)
    self.macroActions.append(self.macroSaveAct)
    self.macroActGrp.setEnabled(False)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2528" endline="2542">
INDENT
    menu = QMenu(QApplication.translate('ViewManager', "&Macros"), self.ui)
    menu.setTearOffEnabled(True)
    menu.addActions(self.macroActGrp.actions())
    return menu

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2544" endline="2710">
INDENT
    self.bookmarkActGrp = createActionGroup(self)
    self.bookmarkToggleAct = E4Action(QApplication.translate('ViewManager',
            'Toggle Bookmark'),
        UI.PixmapCache.getIcon("bookmarkToggle.png"),
        QApplication.translate('ViewManager', '&Toggle Bookmark'),
        QKeySequence(QApplication.translate('ViewManager',
                "Alt+Ctrl+T", "Bookmark|Toggle")), 0,
        self.bookmarkActGrp, 'vm_bookmark_toggle')
    self.bookmarkToggleAct.setStatusTip(QApplication.translate('ViewManager',
            'Toggle Bookmark'))
    self.bookmarkToggleAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Toggle Bookmark</b>"""
            """<p>Toggle a bookmark at the current line of the current editor.</p>"""))
    self.connect(self.bookmarkToggleAct, SIGNAL('triggered()'), self.__toggleBookmark)
    self.bookmarkActions.append(self.bookmarkToggleAct)
    self.bookmarkNextAct = E4Action(QApplication.translate('ViewManager',
            'Next Bookmark'),
        UI.PixmapCache.getIcon("bookmarkNext.png"),
        QApplication.translate('ViewManager', '&Next Bookmark'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+PgDown", "Bookmark|Next")), 0,
        self.bookmarkActGrp, 'vm_bookmark_next')
    self.bookmarkNextAct.setStatusTip(QApplication.translate('ViewManager',
            'Next Bookmark'))
    self.bookmarkNextAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Next Bookmark</b>"""
            """<p>Go to next bookmark of the current editor.</p>"""))
    self.connect(self.bookmarkNextAct, SIGNAL('triggered()'), self.__nextBookmark)
    self.bookmarkActions.append(self.bookmarkNextAct)
    self.bookmarkPreviousAct = E4Action(QApplication.translate('ViewManager',
            'Previous Bookmark'),
        UI.PixmapCache.getIcon("bookmarkPrevious.png"),
        QApplication.translate('ViewManager', '&Previous Bookmark'),
        QKeySequence(QApplication.translate('ViewManager',
                "Ctrl+PgUp", "Bookmark|Previous")),
        0, self.bookmarkActGrp, 'vm_bookmark_previous')
    self.bookmarkPreviousAct.setStatusTip(QApplication.translate('ViewManager',
            'Previous Bookmark'))
    self.bookmarkPreviousAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Previous Bookmark</b>"""
            """<p>Go to previous bookmark of the current editor.</p>"""))
    self.connect(self.bookmarkPreviousAct, SIGNAL('triggered()'),
        self.__previousBookmark)
    self.bookmarkActions.append(self.bookmarkPreviousAct)
    self.bookmarkClearAct = E4Action(QApplication.translate('ViewManager',
            'Clear Bookmarks'),
        QApplication.translate('ViewManager', '&Clear Bookmarks'),
        QKeySequence(QApplication.translate('ViewManager',
                "Alt+Ctrl+C", "Bookmark|Clear")),
        0,
        self.bookmarkActGrp, 'vm_bookmark_clear')
    self.bookmarkClearAct.setStatusTip(QApplication.translate('ViewManager',
            'Clear Bookmarks'))
    self.bookmarkClearAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Clear Bookmarks</b>"""
            """<p>Clear bookmarks of all editors.</p>"""))
    self.connect(self.bookmarkClearAct, SIGNAL('triggered()'),
        self.__clearAllBookmarks)
    self.bookmarkActions.append(self.bookmarkClearAct)
    self.syntaxErrorGotoAct = E4Action(QApplication.translate('ViewManager',
            'Goto Syntax Error'),
        UI.PixmapCache.getIcon("syntaxErrorGoto.png"),
        QApplication.translate('ViewManager', '&Goto Syntax Error'),
        0, 0,
        self.bookmarkActGrp, 'vm_syntaxerror_goto')
    self.syntaxErrorGotoAct.setStatusTip(QApplication.translate('ViewManager',
            'Goto Syntax Error'))
    self.syntaxErrorGotoAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Goto Syntax Error</b>"""
            """<p>Go to next syntax error of the current editor.</p>"""))
    self.connect(self.syntaxErrorGotoAct, SIGNAL('triggered()'), self.__gotoSyntaxError)
    self.bookmarkActions.append(self.syntaxErrorGotoAct)
    self.syntaxErrorClearAct = E4Action(QApplication.translate('ViewManager',
            'Clear Syntax Errors'),
        QApplication.translate('ViewManager', 'Clear &Syntax Errors'),
        0, 0,
        self.bookmarkActGrp, 'vm_syntaxerror_clear')
    self.syntaxErrorClearAct.setStatusTip(QApplication.translate('ViewManager',
            'Clear Syntax Errors'))
    self.syntaxErrorClearAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Clear Syntax Errors</b>"""
            """<p>Clear syntax errors of all editors.</p>"""))
    self.connect(self.syntaxErrorClearAct, SIGNAL('triggered()'),
        self.__clearAllSyntaxErrors)
    self.bookmarkActions.append(self.syntaxErrorClearAct)
    self.notcoveredNextAct = E4Action(QApplication.translate('ViewManager',
            'Next uncovered line'),
        UI.PixmapCache.getIcon("notcoveredNext.png"),
        QApplication.translate('ViewManager', '&Next uncovered line'),
        0, 0,
        self.bookmarkActGrp, 'vm_uncovered_next')
    self.notcoveredNextAct.setStatusTip(QApplication.translate('ViewManager',
            'Next uncovered line'))
    self.notcoveredNextAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Next uncovered line</b>"""
            """<p>Go to next line of the current editor marked as not covered.</p>"""))
    self.connect(self.notcoveredNextAct, SIGNAL('triggered()'), self.__nextUncovered)
    self.bookmarkActions.append(self.notcoveredNextAct)
    self.notcoveredPreviousAct = E4Action(QApplication.translate('ViewManager',
            'Previous uncovered line'),
        UI.PixmapCache.getIcon("notcoveredPrev.png"),
        QApplication.translate('ViewManager',
            '&Previous uncovered line'),
        0, 0,
        self.bookmarkActGrp, 'vm_uncovered_previous')
    self.notcoveredPreviousAct.setStatusTip(QApplication.translate('ViewManager',
            'Previous uncovered line'))
    self.notcoveredPreviousAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Previous uncovered line</b>"""
            """<p>Go to previous line of the current editor marked"""
            """ as not covered.</p>"""))
    self.connect(self.notcoveredPreviousAct, SIGNAL('triggered()'),
        self.__previousUncovered)
    self.bookmarkActions.append(self.notcoveredPreviousAct)
    self.taskNextAct = E4Action(QApplication.translate('ViewManager',
            'Next Task'),
        UI.PixmapCache.getIcon("taskNext.png"),
        QApplication.translate('ViewManager', '&Next Task'),
        0, 0,
        self.bookmarkActGrp, 'vm_task_next')
    self.taskNextAct.setStatusTip(QApplication.translate('ViewManager',
            'Next Task'))
    self.taskNextAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Next Task</b>"""
            """<p>Go to next line of the current editor having a task.</p>"""))
    self.connect(self.taskNextAct, SIGNAL('triggered()'), self.__nextTask)
    self.bookmarkActions.append(self.taskNextAct)
    self.taskPreviousAct = E4Action(QApplication.translate('ViewManager',
            'Previous Task'),
        UI.PixmapCache.getIcon("taskPrev.png"),
        QApplication.translate('ViewManager',
            '&Previous Task'),
        0, 0,
        self.bookmarkActGrp, 'vm_task_previous')
    self.taskPreviousAct.setStatusTip(QApplication.translate('ViewManager',
            'Previous Task'))
    self.taskPreviousAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Previous Task</b>"""
            """<p>Go to previous line of the current editor having a task.</p>"""))
    self.connect(self.taskPreviousAct, SIGNAL('triggered()'), self.__previousTask)
    self.bookmarkActions.append(self.taskPreviousAct)
    self.bookmarkActGrp.setEnabled(False)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2712" endline="2745">
INDENT
    menu = QMenu(QApplication.translate('ViewManager', '&Bookmarks'), self.ui)
    self.bookmarksMenu = QMenu(QApplication.translate('ViewManager', '&Bookmarks'),
        menu)
    menu.setTearOffEnabled(True)
    menu.addAction(self.bookmarkToggleAct)
    menu.addAction(self.bookmarkNextAct)
    menu.addAction(self.bookmarkPreviousAct)
    menu.addAction(self.bookmarkClearAct)
    menu.addSeparator()
    self.menuBookmarksAct = menu.addMenu(self.bookmarksMenu)
    menu.addSeparator()
    menu.addAction(self.syntaxErrorGotoAct)
    menu.addAction(self.syntaxErrorClearAct)
    menu.addSeparator()
    menu.addAction(self.notcoveredNextAct)
    menu.addAction(self.notcoveredPreviousAct)
    menu.addSeparator()
    menu.addAction(self.taskNextAct)
    menu.addAction(self.taskPreviousAct)
    self.connect(self.bookmarksMenu, SIGNAL('aboutToShow()'),
        self.__showBookmarksMenu)
    self.connect(self.bookmarksMenu, SIGNAL('triggered(QAction *)'),
        self.__bookmarkSelected)
    self.connect(menu, SIGNAL('aboutToShow()'), self.__showBookmarkMenu)
    return menu
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2747" endline="2776">
INDENT
    tb = QToolBar(QApplication.translate('ViewManager', 'Bookmarks'), self.ui)
    tb.setIconSize(UI.Config.ToolBarIconSize)
    tb.setObjectName("BookmarksToolbar")
    tb.setToolTip(QApplication.translate('ViewManager', 'Bookmarks'))
    tb.addAction(self.bookmarkToggleAct)
    tb.addAction(self.bookmarkNextAct)
    tb.addAction(self.bookmarkPreviousAct)
    tb.addSeparator()
    tb.addAction(self.syntaxErrorGotoAct)
    tb.addSeparator()
    tb.addAction(self.taskNextAct)
    tb.addAction(self.taskPreviousAct)
    toolbarManager.addToolBar(tb, tb.windowTitle())
    toolbarManager.addAction(self.notcoveredNextAct, tb.windowTitle())
    toolbarManager.addAction(self.notcoveredPreviousAct, tb.windowTitle())
    return tb

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2778" endline="2823">
INDENT
    self.spellingActGrp = createActionGroup(self)
    self.spellCheckAct = E4Action(QApplication.translate('ViewManager',
            'Spell check'),
        UI.PixmapCache.getIcon("spellchecking.png"),
        QApplication.translate('ViewManager',
            '&Spell Check...'),
        QKeySequence(QApplication.translate('ViewManager',
                "Shift+F7", "Spelling|Spell Check")),
        0,
        self.spellingActGrp, 'vm_spelling_spellcheck')
    self.spellCheckAct.setStatusTip(QApplication.translate('ViewManager',
            'Perform spell check of current editor'))
    self.spellCheckAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Spell check</b>"""
            """<p>Perform a spell check of the current editor.</p>"""))
    self.connect(self.spellCheckAct, SIGNAL('triggered()'), self.__spellCheck)
    self.spellingActions.append(self.spellCheckAct)
    self.autoSpellCheckAct = E4Action(QApplication.translate('ViewManager',
            'Automatic spell checking'),
        UI.PixmapCache.getIcon("autospellchecking.png"),
        QApplication.translate('ViewManager',
            '&Automatic spell checking'),
        0, 0,
        self.spellingActGrp, 'vm_spelling_autospellcheck')
    self.autoSpellCheckAct.setStatusTip(QApplication.translate('ViewManager',
            '(De-)Activate automatic spell checking'))
    self.autoSpellCheckAct.setWhatsThis(QApplication.translate('ViewManager',
            """<b>Automatic spell checking</b>"""
            """<p>Activate or deactivate the automatic spell checking function of"""
            """ all editors.</p>"""))
    self.autoSpellCheckAct.setCheckable(True)
    self.autoSpellCheckAct.setChecked(
        Preferences.getEditor("AutoSpellCheckingEnabled"))
    self.connect(self.autoSpellCheckAct, SIGNAL('triggered()'),
        self.__setAutoSpellChecking)
    self.spellingActions.append(self.autoSpellCheckAct)
    self.__enableSpellingActions()
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2825" endline="2832">
INDENT
    spellingAvailable = SpellChecker.isAvailable()
    self.spellCheckAct.setEnabled(len(self.editors) ! = 0 and spellingAvailable)
    self.autoSpellCheckAct.setEnabled(spellingAvailable)
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2834" endline="2840">
INDENT
    menu.addAction(self.spellCheckAct)
    menu.addAction(self.autoSpellCheckAct)
    menu.addSeparator()
DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2842" endline="2863">
INDENT
    tb = QToolBar(QApplication.translate('ViewManager', 'Spelling'), self.ui)
    tb.setIconSize(UI.Config.ToolBarIconSize)
    tb.setObjectName("SpellingToolbar")
    tb.setToolTip(QApplication.translate('ViewManager', 'Spelling'))
    tb.addAction(self.spellCheckAct)
    tb.addAction(self.autoSpellCheckAct)
    toolbarManager.addToolBar(tb, tb.windowTitle())
    return tb

DEDENT

</source>
<source file="systems/py/Eric/trunk/ViewManager/ViewManager.py.pyindent" startline="2865" endline="2889">
INDENT
    if prog is None :
    INDENT
        filter = self._getOpenFileFilter()
        progs = KQFileDialog.getOpenFileNames(self.ui,
            QApplication.translate('ViewManager', "Open files"),
            self._getOpenStartDir(),
            QScintilla.Lexers.getOpenFileFiltersList(True, True),
            filter)
    DEDENT
    else :
    INDENT
        progs = [prog]
    DEDENT
    for prog in progs :
    INDENT
        prog = Utilities.normabspath(unicode(prog))
        self.openSourceFile(prog)
    DEDENT
DEDENT

</source>
