<source file="systems/cs/Castle-SourceCode/Facilities/BatchRegistration/Castle.Facilities.BatchRegistration/ComponentDefinition.cs.ifdefed" startline="1" endline="67">
namespace Castle.Facilities.BatchRegistration
{
    using System;

    public sealed class ComponentDefinition
    {
        private String _key;
        private String _service;
        private String _class;
        private Type _serviceType;
        private Type _classType;
        public ComponentDefinition (String key, String service, String className)
        {
            _key = key;
            _service = service;
            _class = className;
        }

        public ComponentDefinition (String key, Type serviceType, Type classType)
        {
            _key = key;
            _serviceType = serviceType;
            _classType = classType;
        }

        public String Key
        {
            get {
                return _key;
            }
        }

        public String Service
        {
            get {
                return _service;
            }
        }

        public String ClassName
        {
            get {
                return _class;
            }
        }

        public Type ServiceType
        {
            get {
                return _serviceType;
            }
        }

        public Type ClassType
        {
            get {
                return _classType;
            }
        }

    }

}

</source>
<source file="systems/cs/Castle-SourceCode/Facilities/BatchRegistration/Castle.Facilities.BatchRegistration/TypeLoadUtil.cs.ifdefed" startline="1" endline="55">
namespace Castle.Facilities.BatchRegistration
{
    using System;
    using System.Reflection;
    using System.Configuration;

    public abstract class TypeLoadUtil
    {
        public static Type GetType (Assembly assembly, String typeName)
        {
            Type type = assembly.GetType (typeName, false, false);
            if (type == null) {
                String message = String.Format ("Could not load type {0} from {1}", typeName, assembly.FullName);
                throw new ConfigurationErrorsException (message);
            }
            return type;
        }

        public static Type GetType (String typeName)
        {
            Type type = Type.GetType (typeName, false, false);
            if (type == null) {
                String message = String.Format ("Could not load type {0}", typeName);
                throw new ConfigurationErrorsException (message);
            }
            return type;
        }

    }

}

</source>
<source file="systems/cs/Castle-SourceCode/Facilities/BatchRegistration/Castle.Facilities.BatchRegistration.Tests/AssemblyInfo.cs.ifdefed" startline="1" endline="28">
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly : CLSCompliantAttribute (true)] [assembly : ComVisibleAttribute (false)] [assembly : AssemblyTitleAttribute ("Castle.Facilities.BatchRegistration.Tests for Microsoft .NET Framework 2.0")] [assembly : AssemblyDescriptionAttribute ("")] [assembly : AssemblyCompanyAttribute ("Castle Project")] [assembly : AssemblyProductAttribute ("Castle.Facilities.BatchRegistration.Tests")] [assembly : AssemblyCopyrightAttribute ("Castle Project, original author or authors")] [assembly : AssemblyVersionAttribute ("1.0.3.0")] [assembly : AssemblyInformationalVersionAttribute ("1.0.3.4333")] [assembly : AssemblyFileVersionAttribute ("1.0.3.4333")] [assembly : AssemblyDelaySignAttribute (false)]
</source>
<source file="systems/cs/Castle-SourceCode/Facilities/BatchRegistration/Castle.Facilities.BatchRegistration.Tests/Components/OtherComponent.cs.ifdefed" startline="1" endline="26">
namespace Castle.Facilities.BatchRegistration.Tests.Components
{
    using System;

    public class OtherComponent
    {
        public OtherComponent ()
        {
        }

    }

}

</source>
<source file="systems/cs/Castle-SourceCode/Facilities/BatchRegistration/Castle.Facilities.BatchRegistration.Tests/Components/Component1.cs.ifdefed" startline="1" endline="29">
namespace Castle.Facilities.BatchRegistration.Tests.Components
{
    using System;
    using Castle.Core;

    [CastleComponent ("comp1")]
    public class Component1
    {
        public Component1 ()
        {
        }

    }

}

</source>
<source file="systems/cs/Castle-SourceCode/Facilities/BatchRegistration/Castle.Facilities.BatchRegistration.Tests/Components/Component2.cs.ifdefed" startline="1" endline="29">
namespace Castle.Facilities.BatchRegistration.Tests.Components
{
    using System;
    using Castle.Core;

    [CastleComponent ("comp2")]
    public class Component2
    {
        public Component2 ()
        {
        }

    }

}

</source>
<source file="systems/cs/Castle-SourceCode/Facilities/BatchRegistration/Castle.Facilities.BatchRegistration.Tests/BatchRegistrationFacilityTestCase.cs.ifdefed" startline="1" endline="164">
namespace Castle.Facilities.BatchRegistration.Tests
{
    using System;
    using System.Configuration;
    using Castle.Core.Resource;
    using Castle.MicroKernel;
    using Castle.Windsor.Configuration.Interpreters;
    using Castle.Facilities.BatchRegistration.Tests.Components;
    using NUnit.Framework;

    [TestFixture]
    public class BatchRegistrationFacilityTestCase
    {
        private IKernel _kernel;
        [SetUp]
        public void Init ()
        {
            _kernel = new DefaultKernel ();
        }

        [TearDown]
        public void Finish ()
        {
            _kernel.Dispose ();
        }

        [Test]
        public void UsingAttributes ()
        {
            String xml = "<configuration>" + "	<facilities>" + "		<facility id=\"batchregistration\">" + "			<assemblyBatch name=\"Castle.Facilities.BatchRegistration.Tests\" useAttributes=\"true\" />" + "		</facility>" + "	</facilities>" + "</configuration>";
            XmlInterpreter interpreter = new XmlInterpreter (new StaticContentResource (xml));
            interpreter.ProcessResource (interpreter.Source, _kernel.ConfigurationStore);
            _kernel.AddFacility ("batchregistration", new BatchRegistrationFacility ());
            Assert.IsTrue (_kernel.HasComponent ("comp1"));
            Assert.IsTrue (_kernel.HasComponent ("comp2"));
            Assert.IsTrue (_kernel.HasComponent (typeof (Component1)));
            Assert.IsTrue (_kernel.HasComponent (typeof (Component2)));
        }

        [Test]
        public void UsingAttributesWithExcludes ()
        {
            String xml = "<configuration>" + "	<facilities>" + "		<facility id=\"batchregistration\">" + "			<assemblyBatch name=\"Castle.Facilities.BatchRegistration.Tests\" useAttributes=\"true\" >" + "				<exclude type=\"Castle.Facilities.BatchRegistration.Tests.Components.Component2\" />" + "			</assemblyBatch>" + "		</facility>" + "	</facilities>" + "</configuration>";
            XmlInterpreter interpreter = new XmlInterpreter (new StaticContentResource (xml));
            interpreter.ProcessResource (interpreter.Source, _kernel.ConfigurationStore);
            _kernel.AddFacility ("batchregistration", new BatchRegistrationFacility ());
            Assert.IsTrue (_kernel.HasComponent ("comp1"));
            Assert.IsFalse (_kernel.HasComponent ("comp2"));
            Assert.IsTrue (_kernel.HasComponent (typeof (Component1)));
            Assert.IsFalse (_kernel.HasComponent (typeof (Component2)));
        }

        [Test]
        public void Includes ()
        {
            String xml = "<configuration>" + "	<facilities>" + "		<facility id=\"batchregistration\">" + "			<assemblyBatch name=\"Castle.Facilities.BatchRegistration.Tests\" useAttributes=\"false\" >" + "				<include key=\"other\" component=\"Castle.Facilities.BatchRegistration.Tests.Components.OtherComponent\" />" + "			</assemblyBatch>" + "		</facility>" + "	</facilities>" + "</configuration>";
            XmlInterpreter interpreter = new XmlInterpreter (new StaticContentResource (xml));
            interpreter.ProcessResource (interpreter.Source, _kernel.ConfigurationStore);
            _kernel.AddFacility ("batchregistration", new BatchRegistrationFacility ());
            Assert.IsTrue (_kernel.HasComponent ("other"));
            Assert.IsFalse (_kernel.HasComponent ("comp2"));
            Assert.IsTrue (_kernel.HasComponent (typeof (OtherComponent)));
            Assert.IsFalse (_kernel.HasComponent (typeof (Component2)));
        }

        [Test]
        [ExpectedException (typeof (ConfigurationErrorsException))]
        public void InvalidAssemblyName ()
        {
            String xml = "<configuration>" + "	<facilities>" + "		<facility id=\"batchregistration\">" + "			<assemblyBatch name=\"MyCastle.Facilities.BatchRegistration.Tests\" useAttributes=\"false\" >" + "				<include key=\"other\" component=\"Castle.Facilities.BatchRegistration.Tests.Components.OtherComponent\" />" + "			</assemblyBatch>" + "		</facility>" + "	</facilities>" + "</configuration>";
            XmlInterpreter interpreter = new XmlInterpreter (new StaticContentResource (xml));
            interpreter.ProcessResource (interpreter.Source, _kernel.ConfigurationStore);
            _kernel.AddFacility ("batchregistration", new BatchRegistrationFacility ());
        }

        [Test]
        public void AddFacilities ()
        {
            String xml = "<configuration>" + "	<facilities>" + "		<facility id=\"batchregistration\">" + "			<addFacility id=\"facility1\" type=\"Castle.Facilities.BatchRegistration.Tests.Facilities.Facility1, Castle.Facilities.BatchRegistration.Tests\" />" + "			<addFacility id=\"facility2\" type=\"Castle.Facilities.BatchRegistration.Tests.Facilities.Facility2, Castle.Facilities.BatchRegistration.Tests\" />" + "		</facility>" + "	</facilities>" + "</configuration>";
            XmlInterpreter interpreter = new XmlInterpreter (new StaticContentResource (xml));
            interpreter.ProcessResource (interpreter.Source, _kernel.ConfigurationStore);
            _kernel.AddFacility ("batchregistration", new BatchRegistrationFacility ());
            IFacility [] facilities = _kernel.GetFacilities ();
            Assert.AreEqual (3, facilities.Length);
        }

    }

}

</source>
<source file="systems/cs/Castle-SourceCode/Facilities/BatchRegistration/Castle.Facilities.BatchRegistration.Tests/Facilities/Facility1.cs.ifdefed" startline="1" endline="34">
namespace Castle.Facilities.BatchRegistration.Tests.Facilities
{
    using System;
    using Castle.MicroKernel.Facilities;

    public class Facility1 : AbstractFacility
    {
        public Facility1 ()
        {
        }

        protected override void Init ()
        {
        }

    }

}

</source>
<source file="systems/cs/Castle-SourceCode/Facilities/BatchRegistration/Castle.Facilities.BatchRegistration.Tests/Facilities/Facility2.cs.ifdefed" startline="1" endline="34">
namespace Castle.Facilities.BatchRegistration.Tests.Facilities
{
    using System;
    using Castle.MicroKernel.Facilities;

    public class Facility2 : AbstractFacility
    {
        public Facility2 ()
        {
        }

        protected override void Init ()
        {
        }

    }

}

</source>
