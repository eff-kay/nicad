<source file="systems/ruby/spree-master/api/app/controllers/spree/api/v1/shipments_controller.rb" startline="91" endline="109">
def transfer_to_shipment
    @target_shipment = Spree :: Shipment.find_by! (number : params [:target_shipment_number])
    error =
    if @quantity < 0 && @target_shipment == @original_shipment
        "#{Spree.t(:negative_quantity, scope: 'api')}, \n#{Spree.t('wrong_shipment_target', scope: 'api')}"
    elsif @target_shipment == @original_shipment
        Spree.t (:wrong_shipment_target, scope : 'api')
    elsif @quantity < 0
        Spree.t (:negative_quantity, scope : 'api')
    end
    if error
        unprocessable_entity ("#{Spree.t(:shipment_transfer_errors_occured, scope: 'api')} \n#{error}")
    else
        @original_shipment.transfer_to_shipment (@variant, @quantity, @target_shipment)
        render json : {success : true, message : Spree.t (:shipment_transfer_success)

            }, status : 201
    end
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/v1/shipments_controller.rb" startline="113" endline="119">
def load_transfer_params
    @original_shipment = Spree :: Shipment.find_by! (number : params [:original_shipment_number])
    @variant = Spree :: Variant.find (params [:variant_id])
    @quantity = params [:quantity].to_i
    authorize! :read, @original_shipment
    authorize! :create, Shipment
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/v1/shipments_controller.rb" startline="121" endline="125">
def find_and_update_shipment
    @shipment = Spree :: Shipment.accessible_by (current_ability, :update).readonly (false).find_by! (number : params [:id])
    @shipment.update_attributes (shipment_params)
    @shipment.reload
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/v1/shipments_controller.rb" startline="127" endline="133">
def shipment_params
    if params [:shipment] && ! params [:shipment].empty?
        params.require (:shipment).permit (permitted_shipment_attributes)
    else
        {
        }
    end
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/v1/shipments_controller.rb" startline="135" endline="137">
def variant
    @variant ||= Spree :: Variant.unscoped.find (params.fetch (:variant_id))
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/v1/shipments_controller.rb" startline="139" endline="170">
def mine_includes
    {
    order : {
    bill_address : {
    state : {
    },
    country : {
    }

    },
    ship_address : {
    state : {
    },
    country : {
    }

    },
    adjustments : {
    },
    payments : {
    order : {
    },
    payment_method : {
    }

    }

    },
    inventory_units : {
    line_item : {
    product : {
    },
    variant : {
    }

    },
    variant : {
    product : {
    },
    default_price : {
    },
    option_values : {
    option_type : {
    }

    }

    }

    }

    }
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/v1/customer_returns_controller.rb" startline="5" endline="8">
def index
    collection (Spree :: CustomerReturn)
    respond_with (@collection)
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/v1/customer_returns_controller.rb" startline="12" endline="20">
def collection (resource)
    return @collection if @collection.present?
    params [:q] ||= {
    }
    @collection = resource.all
    @search = @collection.ransack (params [:q])
    @collection = @search.result.order (created_at : :desc).page (params [:page]).per (params [:per_page])
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="27" endline="33">
def permitted_line_item_attributes
    if @current_user_roles.include? ('admin')
        super + [:price, :variant_id, :sku]
    else
        super
    end
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="35" endline="42">
def content_type
    case params [:format]
        when 'json'
            'application/json; charset=utf-8'
        when 'xml'
            'text/xml; charset=utf-8'
    end
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="46" endline="48">
def set_content_type
    headers ['Content-Type'] = content_type
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="50" endline="52">
def load_user
    @current_api_user = Spree.user_class.find_by (spree_api_key : api_key.to_s)
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="54" endline="65">
def authenticate_user
    return if @current_api_user
    if requires_authentication? && api_key.blank? && order_token.blank?
        must_specify_api_key and return
    elsif order_token.blank? && (requires_authentication? || api_key.present?)
        invalid_api_key and return
    else
        @current_api_user = Spree.user_class.new
    end
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="67" endline="69">
def invalid_api_key
    render 'spree/api/errors/invalid_api_key', status : 401
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="71" endline="73">
def must_specify_api_key
    render 'spree/api/errors/must_specify_api_key', status : 401
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="75" endline="77">
def load_user_roles
    @current_user_roles = @current_api_user ? @current_api_user.spree_roles.pluck (:name) : []
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="79" endline="81">
def unauthorized
    render 'spree/api/errors/unauthorized', status : 401 and return
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="83" endline="88">
def error_during_processing (exception)
    Rails.logger.error exception.message
    Rails.logger.error exception.backtrace.join ("\n")

    unprocessable_entity (exception.message)
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="90" endline="92">
def unprocessable_entity (message)
    render plain : {exception : message

        }.to_json, status : 422
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="94" endline="97">
def gateway_error (exception)
    @order.errors.add (:base, exception.message)
    invalid_resource! (@order)
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="99" endline="101">
def requires_authentication?
    Spree :: Api :: Config [:requires_authentication]
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="103" endline="105">
def not_found
    render 'spree/api/errors/not_found', status : 404 and return
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="107" endline="109">
def current_ability
    Spree :: Ability.new (current_api_user)
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="111" endline="114">
def invalid_resource! (resource)
    @resource = resource
    render 'spree/api/errors/invalid_resource', status : 422
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="116" endline="118">
def api_key
    request.headers ['X-Spree-Token'] || params [:token]
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="121" endline="123">
def order_token
    request.headers ['X-Spree-Order-Token'] || params [:order_token]
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="125" endline="130">
def find_product (id)
    @product = product_scope.friendly.distinct (false).find (id.to_s)
rescue ActiveRecord :: RecordNotFound
    @product = product_scope.find_by (id : id)
    not_found unless @product
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="132" endline="143">
def product_scope
    if @current_user_roles.include? ('admin')
        scope = Product.with_deleted.accessible_by (current_ability, :read).includes (* product_includes)
        scope = scope.not_deleted unless params [:show_deleted]
        scope = scope.not_discontinued unless params [:show_discontinued]
    else
        scope = Product.accessible_by (current_ability, :read).active.includes (* product_includes)
    end
    scope
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="145" endline="147">
def variants_associations
    [{option_values : :option_type

        }, :default_price, :images]
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="149" endline="151">
def product_includes
    [:option_types, :taxons, product_properties : :property, variants : variants_associations, master : variants_associations]
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="153" endline="155">
def order_id
    params [:order_id] || params [:checkout_id] || params [:order_number]
end
</source>
<source file="systems/ruby/spree-master/api/app/controllers/spree/api/base_controller.rb" startline="157" endline="160">
def authorize_for_order
    @order = Spree :: Order.find_by (number : order_id)
    authorize! :read, @order, order_token
end
</source>
<source file="systems/ruby/spree-master/api/app/helpers/spree/api/api_helpers.rb" startline="40" endline="50">
def required_fields_for (model)
    required_fields = model._validators.select do |_field,validations|
        validations.any? {|v| v.is_a? (ActiveModel :: Validations :: PresenceValidator)
        }
    end.map (& :first)
    required_fields.map! (& :to_s).delete ('permalink')
    required_fields.delete ('slug')
    required_fields
end
</source>
<source file="systems/ruby/spree-master/api/app/helpers/spree/api/api_helpers.rb" startline="179" endline="185">
def variant_attributes
    if @current_user_roles && @current_user_roles.include? ('admin')
        @@variant_attributes + [:cost_price]
    else
        @@variant_attributes
    end
end
</source>
<source file="systems/ruby/spree-master/api/spec/support/controller_hacks.rb" startline="9" endline="11">
def api_get (action, params = {
}, session = nil, flash = nil)
    api_process (action, params, session, flash, 'GET')
end
</source>
<source file="systems/ruby/spree-master/api/spec/support/controller_hacks.rb" startline="13" endline="15">
def api_post (action, params = {
}, session = nil, flash = nil)
    api_process (action, params, session, flash, 'POST')
end
</source>
<source file="systems/ruby/spree-master/api/spec/support/controller_hacks.rb" startline="17" endline="19">
def api_put (action, params = {
}, session = nil, flash = nil)
    api_process (action, params, session, flash, 'PUT')
end
</source>
<source file="systems/ruby/spree-master/api/spec/support/controller_hacks.rb" startline="21" endline="23">
def api_delete (action, params = {
}, session = nil, flash = nil)
    api_process (action, params, session, flash, 'DELETE')
end
</source>
<source file="systems/ruby/spree-master/api/spec/support/controller_hacks.rb" startline="25" endline="35">
def api_process (action, params = {
}, session = nil, flash = nil, method = 'get')
    scoping = respond_to? (:resource_scoping) ? resource_scoping : {
    }
    process (
            action,
            method : method,
            params : params.merge (scoping),
            session : session,
            flash : flash,
            format : :json
        )
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/v1/taxons_controller_spec.rb" startline="3" endline="6">
def expect_single_taxon_result (taxon_name)
    expect (json_response ['taxons'].count).to eq (1)
    expect (json_response ['taxons'].first ['name']).to eq (taxon_name)
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/v1/option_types_controller_spec.rb" startline="15" endline="19">
def check_option_values (option_values)
    expect (option_values.count).to eq (1)
    expect (option_values.first).to have_attributes ([:id, :name, :presentation,
                    :option_type_id, :option_type_name])
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/v1/orders_controller_spec.rb" startline="314" endline="318">
def clean_address (address)
    address.delete (:state)
    address.delete (:country)
    address
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/v1/option_values_controller_spec.rb" startline="15" endline="19">
def check_option_values (option_values)
    expect (option_values.count).to eq (1)
    expect (option_values.first).to have_attributes ([:id, :name, :presentation,
                    :option_type_name, :option_type_id])
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/v1/checkouts_controller_spec.rb" startline="22" endline="24">
def controller.load_order (*)
    respond_with (@order, default_template : 'spree/api/v1/orders/show', status : 200)
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/v1/checkouts_controller_spec.rb" startline="291" endline="293">
def send_request
    api_put :update, id : order.to_param, order_token : order.guest_token
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/v1/checkouts_controller_spec.rb" startline="341" endline="343">
def send_request
    api_put :next, id : order.to_param, order_token : order.guest_token
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/v1/checkouts_controller_spec.rb" startline="361" endline="363">
def send_request
    api_put :advance, id : order.to_param, order_token : order.guest_token
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/v1/products_controller_spec.rb" startline="411" endline="413">
def send_request
    api_get :show, id : product.id
end
</source>
<source file="systems/ruby/spree-master/api/spec/controllers/spree/api/base_controller_spec.rb" startline="9" endline="11">
def index
    render plain : {'products' => []

        }.to_json
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/responders/rabl_template.rb" startline="5" endline="13">
def to_format
    if template
        render template, status : options [:status] || 200
    else
        super
    end
rescue ActionView :: MissingTemplate => e
    api_behavior
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/responders/rabl_template.rb" startline="15" endline="17">
def template
    options [:default_template]
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/responders/rabl_template.rb" startline="19" endline="24">
def api_behavior
    if controller.params [:action] == 'destroy'
        super
    end
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/controller_setup.rb" startline="6" endline="17">
def self.included (klass)
    klass.class_eval do
        include CanCan :: ControllerAdditions
        include Spree :: Core :: ControllerHelpers :: Auth

        prepend_view_path Rails.root + 'app/views'
        append_view_path File.expand_path ('../../../app/views', File.dirname (__FILE__))

        self.responder = Spree :: Api :: Responders :: AppResponder
        respond_to :json
    end
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/testing_support/helpers.rb" startline="5" endline="12">
def json_response
    case body = JSON.parse (response.body)
        when Hash
            body.with_indifferent_access
        when Array
            body
    end
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/testing_support/helpers.rb" startline="14" endline="17">
def assert_not_found!
    expect (json_response).to eq ('error' => 'The resource you were looking for could not be found.')
    expect (response.status).to eq 404
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/testing_support/helpers.rb" startline="19" endline="22">
def assert_unauthorized!
    expect (json_response).to eq ('error' => 'You are not authorized to perform that action.')
    expect (response.status).to eq 401
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/testing_support/helpers.rb" startline="24" endline="26">
def stub_authentication!
    allow (Spree.user_class).to receive (:find_by).with (hash_including (:spree_api_key)) {current_api_user
        }
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/testing_support/helpers.rb" startline="30" endline="32">
def current_api_user
    @current_api_user ||= stub_model (Spree.user_class, email : 'spree@example.com')
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/testing_support/helpers.rb" startline="34" endline="36">
def image (filename)
    File.open (Spree :: Api :: Engine.root + 'spec/fixtures' + filename)
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/testing_support/helpers.rb" startline="38" endline="40">
def upload_image (filename)
    fixture_file_upload (image (filename).path, 'image/jpg')
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/testing_support/setup.rb" startline="5" endline="12">
def sign_in_as_admin!
    let! (:current_api_user) do
        user = stub_model (Spree.user_class)
        allow (user).to receive_message_chain (:spree_roles, :pluck).and_return (['admin'])
        allow (user).to receive (:has_spree_role?).with ('admin').and_return (true)
        user
    end
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/engine.rb" startline="35" endline="39">
def self.activate
    Dir.glob (File.join (File.dirname (__FILE__), '../../../app/**/*_decorator*.rb')) do |c|
        Rails.configuration.cache_classes ? require (c) : load (c)
    end
end
</source>
<source file="systems/ruby/spree-master/api/lib/spree/api/engine.rb" startline="42" endline="44">
def self.root
    @root ||= Pathname.new (File.expand_path ('../../../../', __FILE__))
end
</source>
<source file="systems/ruby/spree-master/api/db/migrate/20120411123334_resize_api_key_field.rb" startline="2" endline="6">
def change
    unless defined? (User)
        change_column :spree_users, :api_key, :string, limit : 48
    end
end
</source>
<source file="systems/ruby/spree-master/api/db/migrate/20100107141738_add_api_key_to_spree_users.rb" startline="2" endline="6">
def change
    unless defined? (User)
        add_column :spree_users, :api_key, :string, limit : 40
    end
end
</source>
<source file="systems/ruby/spree-master/api/db/migrate/20131017162334_add_index_to_user_spree_api_key.rb" startline="2" endline="6">
def change
    unless defined? (User)
        add_index :spree_users, :spree_api_key
    end
end
</source>
<source file="systems/ruby/spree-master/api/db/migrate/20120530054546_rename_api_key_to_spree_api_key.rb" startline="2" endline="6">
def change
    unless defined? (User)
        rename_column :spree_users, :api_key, :spree_api_key
    end
end
</source>
