<source file="systems/atl/ATL_Zoo/UML2OWL/UML2OWL/UML2OWL.atl" startline="497" endline="508">
rule addCardinality (p : UML!uml::Property, class : UML!uml::Class) {
    to
        c : OWL!CardinalityRestriction (
            superClass <- class
            ,
            OWLCardinality <- literal
            ,
            OWLOnProperty <- p

        ),
        literal : OWL!TypedLiteral (
            lexicalForm <- p.upper.toString ()
            ,
            datatypeURI <- thisModule.getIntegerURI ()

        )
}
</source>
<source file="systems/atl/ATL_Zoo/UML2OWL/UML2OWL/UML2OWL.atl" startline="510" endline="521">
rule addMinCardinality (p : UML!uml::Property, class : UML!uml::Class) {
    to
        c : OWL!MinCardinalityRestriction (
            superClass <- class
            ,
            OWLMinCardinality <- literal
            ,
            OWLOnProperty <- p

        ),
        literal : OWL!TypedLiteral (
            lexicalForm <- p.lower.toString ()
            ,
            datatypeURI <- thisModule.getIntegerURI ()

        )
}
</source>
<source file="systems/atl/ATL_Zoo/UML2OWL/UML2OWL/UML2OWL.atl" startline="523" endline="534">
rule addMaxCardinality (p : UML!uml::Property, class : UML!uml::Class) {
    to
        c : OWL!MaxCardinalityRestriction (
            superClass <- class
            ,
            OWLMaxCardinality <- literal
            ,
            OWLOnProperty <- p

        ),
        literal : OWL!TypedLiteral (
            lexicalForm <- p.upper.toString ()
            ,
            datatypeURI <- thisModule.getIntegerURI ()

        )
}
</source>
<source file="systems/atl/ATL_Zoo/UML2OWL/UML2OWL/UML2OWL.atl" startline="540" endline="553">
rule InstanceSpecification2Individual {
    from
        i : UML!uml::InstanceSpecification (i.oclIsTypeOf (UML!uml::InstanceSpecification
            )
        )
    to
        ind : OWL!Individual (
            uriRef <- u
            ,
            type <- i.classifier

        ),
        u : OWL!URIReference (
            fragmentIdentifier <- l
            ,
            uri <- uri

        ),
        l : OWL!LocalName (
            name <- i.name

        ),
        uri : OWL!UniformResourceIdentifier (
            name <- i.name

        )
}
</source>
<source file="systems/atl/ATL_Zoo/UML2OWL/UML2OWL/UML2OWL.atl" startline="557" endline="584">
rule SlotPrimitive2Statement {
    from
        s : UML!uml::Slot (s.definingFeature.type.oclIsTypeOf (UML!uml::PrimitiveType
            )
        )
    to
        state : OWL!OWLStatement (
            graph <- UML!uml::Model.allInstances () -> asSequence () -> any (m | m.oclIsTypeOf (UML!uml::Model
            )
            )
            ,
            RDFsubject <- s.owningInstance
            ,
            RDFpredicate <- s.definingFeature
            ,
            RDFobject <- o

        ),
        o : OWL!Individual (
            type <- s.definingFeature.type
            ,
            uriRef <- u

        ),
        u : OWL!URIReference (
            fragmentIdentifier <- l
            ,
            uri <- uri

        ),
        l : OWL!LocalName (
            name <- s.value -> asSequence () -> any (e | e.oclIsKindOf (UML!uml::LiteralSpecification
            )
            ).value

        ),
        uri : OWL!UniformResourceIdentifier (
            name <- s.value -> asSequence () -> any (e | e.oclIsKindOf (UML!uml::LiteralSpecification
            )
            ).value

        )
}
</source>
<source file="systems/atl/ATL_Zoo/UML2OWL/UML2OWL/UML2OWL.atl" startline="586" endline="599">
rule SlotClass2Statement {
    from
        s : UML!uml::Slot (s.definingFeature.type.oclIsTypeOf (UML!uml::Class
            ) or s.definingFeature.type.oclIsTypeOf (UML!uml::Enumeration
            )
        )
    do {for (i in s.value
    ) {
            thisModule.createStatement (s
            , i
            )
        ;
    }}}
</source>
<source file="systems/atl/ATL_Zoo/UML2OWL/UML2OWL/UML2OWL.atl" startline="601" endline="610">
rule createStatement (s : UML!uml::Slot, i : UML!uml::InstanceValue) {
    to
        state : OWL!OWLStatement (
            graph <- UML!uml::Model.allInstances () -> asSequence () -> any (m | m.oclIsTypeOf (UML!uml::Model
            )
            )
            ,
            RDFsubject <- s.owningInstance
            ,
            RDFpredicate <- s.definingFeature
            ,
            RDFobject <- i.instance

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="7" endline="14">
rule METAHFile2ACMEFile {
    from
        m : METAH!METAHFile
    to
        a : ACME!ACMEFile (
            entries <- m.entries

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="18" endline="27">
rule ProcessDeclaration2ComponentType {
    from
        p : METAH!ProcessDeclaration
    to
        c : ACME!ComponentType (
            name <- p.procDecName
            ,
            ports <- p.ports
            ,
            extend <- 'MH_Process'

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="33" endline="49">
rule Port2Port {
    from
        p1 : METAH!Port
    to
        p2 : ACME!Port (
            name <- p1.portName
            ,
            property <- Sequence {port_type
            , port_subclass
            }

        ),
        port_type : ACME!Property (
            name <- 'MH_port_type'
            ,
            val <- p1.portType

        ),
        port_subclass : ACME!Property (
            name <- 'MH_port_subclass'
            ,
            val <- 'MH_' + p1.portCom

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="54" endline="63">
rule ProcessImplementation2ComponentType {
    from
        p1 : METAH!ProcessImplementation
    to
        p2 : ACME!ComponentType (
            name <- p1.declaration + '_' + p1.procImpName
            ,
            property <- p1.processAttributes
            ,
            extend <- p1.declaration

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="67" endline="75">
rule ProcessAttribute2Property {
    from
        a : METAH!ProcessAttribute
    to
        p : ACME!Property (
            name <- 'MH_' + a.attName
            ,
            val <- a.attValue.toString ().concat (' '
            ).concat (a.attValueType
            )

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="79" endline="88">
rule MacroDeclaration2ComponentType {
    from
        m : METAH!MacroDeclaration
    to
        c : ACME!ComponentType (
            name <- m.name
            ,
            ports <- m.ports
            ,
            extend <- 'MH_macro'

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="92" endline="109">
rule MacroImplementation2ComponentType {
    from
        m : METAH!MacroImplementation
    to
        c : ACME!ComponentType (
            name <- m.macroImpName
            ,
            extend <- m.declaration
            ,
            representations <- Sequence {r
            }

        ),
        r : ACME!Representation (
            systems <- Sequence {s
            }

        ),
        s : ACME!System (
            name <- 'MH_little_System'
            ,
            componentDeclaration <- m.process
            ,
            attachments <- m.connections

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="113" endline="126">
rule Process2Component {
    from
        p : METAH!Process
    to
        c : ACME!ComponentInstance (
            name <- p.procName
            ,
            instanceOf <- p.declaration + '_' + p.implementation
            ,
            property <- period

        ),
        period : ACME!Property (
            name <- 'MH_Process_subclass'
            ,
            val <- 'MH_' + p.periodic

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="130" endline="162">
rule Connection2Connector {
    from
        c1 : METAH!Connection (not ((c1.compSrc.oclIsUndefined ()
            ) or (c1.compDest.oclIsUndefined ()
            )
            )
        )
    to
        attach1 : ACME!Attachment (
            comp <- c1.compSrc
            ,
            port <- c1.portSrc
            ,
            con <- c1.compSrc + '_to_' + c1.compDest
            ,
            role <- 'MH_sink'
            ,
            systemAttachment <- thisModule.resolveTemp (METAH!MacroImplementation.allInstances () -> asSequence () -> first ()
            , 's'
            )

        ),
        attach2 : ACME!Attachment (
            comp <- c1.compDest
            ,
            port <- c1.portDest
            ,
            con <- c1.compSrc + '_to_' + c1.compDest
            ,
            role <- 'MH_source'
            ,
            systemAttachment <- thisModule.resolveTemp (METAH!MacroImplementation.allInstances () -> asSequence () -> first ()
            , 's'
            )

        ),
        c2 : ACME!Connector (
            name <- c1.compSrc + '_to_' + c1.compDest
            ,
            roles <- Sequence {r1
            , r2
            }
            ,
            system <- thisModule.resolveTemp (METAH!MacroImplementation.allInstances () -> asSequence () -> first ()
            , 's'
            )

        ),
        r1 : ACME!Role (
            name <- 'MH_sink'

        ),
        r2 : ACME!Role (
            name <- 'MH_source'

        )
}
</source>
<source file="systems/atl/ATL_Zoo/METAH2ACME/METAH2ACME.atl" startline="166" endline="179">
rule Connection2Binding {
    from
        b1 : METAH!Connection (((b1.compSrc.oclIsUndefined ()
            ) or (b1.compDest.oclIsUndefined ()
            )
            )
        )
    to
        b2 : ACME!Binding (
            compSrc <- b1.compSrc
            ,
            compDest <- b1.compDest
            ,
            portDest <- b1.portDest
            ,
            portSrc <- b1.portSrc
            ,
            systemBinding <- thisModule.resolveTemp (METAH!MacroImplementation.allInstances () -> asSequence () -> first ()
            , 's'
            )

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/without_context/ForeignKey.atl" startline="15" endline="23">
rule Metamodel {
    from
        inputMm : KM3!Metamodel
    to
        outputMm : KM3target!Metamodel (
            location <- inputMm.location
            ,
            contents <- inputMm.contents

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/without_context/ForeignKey.atl" startline="27" endline="35">
rule Package {
    from
        inputPkg : KM3!Package
    to
        outputPkg : KM3target!Package (
            name <- inputPkg.name
            ,
            contents <- inputPkg.contents

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/without_context/ForeignKey.atl" startline="39" endline="48">
rule Class {
    from
        inputA : KM3!Class
    to
        outputA : KM3target!Class (
            name <- inputA.name
            ,
            isAbstract <- inputA.isAbstract
            ,
            structuralFeatures <- inputA.structuralFeatures

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/without_context/ForeignKey.atl" startline="52" endline="60">
rule DataType {
    from
        inputData : KM3!DataType
    to
        outputData : KM3target!DataType (
            name <- inputData.name
            ,
            location <- inputData.location

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/without_context/ForeignKey.atl" startline="64" endline="80">
rule reference2Key {
    from
        r : KM3!Reference (r.upper = 1
        )
    to
        key : KM3target!Attribute (
            name <- r.type.name.toLower () + 'ForeignKey'
            ,
            isOrdered <- false
            ,
            isUnique <- false
            ,
            location <- ''
            ,
            lower <- 1
            ,
            upper <- 1
            ,
            type <- KM3!DataType.allInstances () -> select (a | a.name = 'Integer'
            ) -> first ()
            ,
            owner <- r.owner

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/without_context/ForeignKey.atl" startline="84" endline="99">
rule attribute {
    from
        inputAtt : KM3!Attribute
    to
        outputAtt : KM3target!Attribute (
            name <- inputAtt.name
            ,
            isOrdered <- inputAtt.isOrdered
            ,
            isUnique <- inputAtt.isUnique
            ,
            location <- inputAtt.location
            ,
            lower <- inputAtt.lower
            ,
            upper <- inputAtt.upper
            ,
            type <- inputAtt.type
            ,
            owner <- inputAtt.owner

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/with_context/ForeignKey.atl" startline="26" endline="34">
rule Metamodel {
    from
        inputMm : KM3!Metamodel
    to
        outputMm : KM3target!Metamodel (
            location <- inputMm.location
            ,
            contents <- inputMm.contents

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/with_context/ForeignKey.atl" startline="38" endline="46">
rule Package {
    from
        inputPkg : KM3!Package
    to
        outputPkg : KM3target!Package (
            name <- inputPkg.name
            ,
            contents <- inputPkg.contents

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/with_context/ForeignKey.atl" startline="50" endline="70">
rule Class {
    from
        inputA : KM3!Class
    to
        outputA : KM3target!Class (
            name <- inputA.name
            ,
            isAbstract <- inputA.isAbstract
            ,
            structuralFeatures <- inputA.structuralFeatures

        ),
        key : KM3target!Attribute (
            name <- inputA.name.toLower () + 'Key'
            ,
            isOrdered <- false
            ,
            isUnique <- false
            ,
            location <- ''
            ,
            lower <- 1
            ,
            upper <- 1
            ,
            type <- KM3!DataType.allInstances () -> select (a | a.name = 'Integer'
            ) -> first ()
            ,
            owner <- inputA

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/with_context/ForeignKey.atl" startline="74" endline="89">
rule attribute {
    from
        inputAtt : KM3!Attribute
    to
        outputAtt : KM3target!Attribute (
            name <- inputAtt.name
            ,
            isOrdered <- inputAtt.isOrdered
            ,
            isUnique <- inputAtt.isUnique
            ,
            location <- inputAtt.location
            ,
            lower <- inputAtt.lower
            ,
            upper <- inputAtt.upper
            ,
            type <- inputAtt.type
            ,
            owner <- inputAtt.owner

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/with_context/ForeignKey.atl" startline="93" endline="101">
rule DataType {
    from
        inputData : KM3!DataType
    to
        outputData : KM3target!DataType (
            name <- inputData.name
            ,
            location <- inputData.location

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/with_context/ForeignKey.atl" startline="105" endline="121">
rule reference2Key {
    from
        r : KM3!Reference (r.upper = 1
        )
    to
        key : KM3target!Attribute (
            name <- r.type.name.toLower () + 'ForeignKey'
            ,
            isOrdered <- false
            ,
            isUnique <- false
            ,
            location <- ''
            ,
            lower <- 1
            ,
            upper <- 1
            ,
            type <- KM3!DataType.allInstances () -> select (a | a.name = 'Integer'
            ) -> first ()
            ,
            owner <- r.owner

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/with_context/ForeignKey.atl" startline="125" endline="135">
rule enumeration {
    from
        inputEnum : KM3!Enumeration
    to
        outputEnum : KM3target!Enumeration (
            location <- inputEnum.location
            ,
            name <- inputEnum.name
            ,
            package <- inputEnum.package

        )
}
</source>
<source file="systems/atl/ATL_Zoo/ReplaceAssociationByForeignKey/with_context/ForeignKey.atl" startline="139" endline="149">
rule literal {
    from
        inputEnum : KM3!EnumLiteral
    to
        outputEnum : KM3target!EnumLiteral (
            location <- inputEnum.location
            ,
            name <- inputEnum.name
            ,
            enum <- inputEnum.enum

        )
}
</source>
