<source file="systems/c/httpd-2.2.8/modules/metadata/mod_headers.c.ifdefed" startline="759" endline="768">
static int header_pre_config (apr_pool_t *p, apr_pool_t *plog, apr_pool_t *ptemp) {
    format_tag_hash = apr_hash_make (p);
    register_format_tag_handler ("D", (const void *) header_request_duration);
    register_format_tag_handler ("t", (const void *) header_request_time);
    register_format_tag_handler ("e", (const void *) header_request_env_var);
    register_format_tag_handler ("s", (const void *) header_request_ssl_var);
    return OK;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/metadata/mod_headers.c.ifdefed" startline="770" endline="775">
static int header_post_config (apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *ptemp, server_rec *s) {
    header_ssl_lookup = APR_RETRIEVE_OPTIONAL_FN (ssl_var_lookup);
    return OK;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/metadata/mod_headers.c.ifdefed" startline="777" endline="790">
static void register_hooks (apr_pool_t *p) {
    ap_register_output_filter ("FIXUP_HEADERS_OUT", ap_headers_output_filter, NULL, AP_FTYPE_CONTENT_SET);
    ap_register_output_filter ("FIXUP_HEADERS_ERR", ap_headers_error_filter, NULL, AP_FTYPE_CONTENT_SET);
    ap_hook_pre_config (header_pre_config, NULL, NULL, APR_HOOK_MIDDLE);
    ap_hook_post_config (header_post_config, NULL, NULL, APR_HOOK_MIDDLE);
    ap_hook_insert_filter (ap_headers_insert_output_filter, NULL, NULL, APR_HOOK_LAST);
    ap_hook_insert_error_filter (ap_headers_insert_error_filter, NULL, NULL, APR_HOOK_LAST);
    ap_hook_fixups (ap_headers_fixup, NULL, NULL, APR_HOOK_LAST);
    ap_hook_post_read_request (ap_headers_early, NULL, NULL, APR_HOOK_FIRST);
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="48" endline="91">
static void dumpit (ap_filter_t *f, apr_bucket *b) {
    conn_rec *c = f->c;
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (c->base_server->module_config, &dumpio_module);
    ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio:  %s (%s-%s): %" APR_SIZE_T_FMT " bytes", f->frec->name, (APR_BUCKET_IS_METADATA (b)) ? "metadata" : "data", b->type->name, b->length);
    if (!(APR_BUCKET_IS_METADATA (b))) {
        const char *buf;
        apr_size_t nbytes;
        char *obuf;
        if (apr_bucket_read (b, &buf, &nbytes, APR_BLOCK_READ) == APR_SUCCESS) {
            if (nbytes) {
                obuf = malloc (nbytes + 1);
                memcpy (obuf, buf, nbytes);
                obuf[nbytes] = '\0';
                ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio:  %s (%s-%s): %s", f->frec->name, (APR_BUCKET_IS_METADATA (b)) ? "metadata" : "data", b->type->name, obuf);
                free (obuf);
            }
        }
        else {
            ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio:  %s (%s-%s): %s", f->frec->name, (APR_BUCKET_IS_METADATA (b)) ? "metadata" : "data", b->type->name, "error reading data");
        }
    }
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="102" endline="132">
static int dumpio_input_filter (ap_filter_t *f, apr_bucket_brigade *bb, ap_input_mode_t mode, apr_read_type_e block, apr_off_t readbytes) {
    apr_bucket *b;
    apr_status_t ret;
    conn_rec *c = f->c;
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (c->base_server->module_config, &dumpio_module);
    ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio: %s [%s-%s] %" APR_OFF_T_FMT " readbytes", f->frec->name, whichmode (mode), ((block) == APR_BLOCK_READ) ? "blocking" : "nonblocking", readbytes);
    ret = ap_get_brigade (f->next, bb, mode, block, readbytes);
    if (ret == APR_SUCCESS) {
        for (b = APR_BRIGADE_FIRST (bb); b != APR_BRIGADE_SENTINEL (bb); b = APR_BUCKET_NEXT (b)) {
            dumpit (f, b);
        }
    }
    else {
        ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio: %s - %d", f->frec->name, ret);
    }
    return APR_SUCCESS;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="134" endline="156">
static int dumpio_output_filter (ap_filter_t *f, apr_bucket_brigade *bb) {
    apr_bucket *b;
    conn_rec *c = f->c;
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (c->base_server->module_config, &dumpio_module);
    ap_log_error (APLOG_MARK, ptr->loglevel, 0, c->base_server, "mod_dumpio: %s", f->frec->name);
    for (b = APR_BRIGADE_FIRST (bb); b != APR_BRIGADE_SENTINEL (bb); b = APR_BUCKET_NEXT (b)) {
        if (APR_BUCKET_IS_EOS (b)) {
            apr_bucket *flush = apr_bucket_flush_create (f->c->bucket_alloc);
            APR_BUCKET_INSERT_BEFORE (b, flush);
        }
        dumpit (f, b);
    }
    return ap_pass_brigade (f->next, bb);
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="158" endline="169">
static int dumpio_pre_conn (conn_rec *c, void *csd) {
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (c->base_server->module_config, &dumpio_module);
    if (ptr->enable_input)
        ap_add_input_filter ("DUMPIO_IN", NULL, NULL, c);
    if (ptr->enable_output)
        ap_add_output_filter ("DUMPIO_OUT", NULL, NULL, c);
    return OK;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="171" endline="183">
static void dumpio_register_hooks (apr_pool_t *p) {
    ap_register_output_filter ("DUMPIO_OUT", dumpio_output_filter, NULL, AP_FTYPE_CONNECTION +3);
    ap_register_input_filter ("DUMPIO_IN", dumpio_input_filter, NULL, AP_FTYPE_CONNECTION +3);
    ap_hook_pre_connection (dumpio_pre_conn, NULL, NULL, APR_HOOK_MIDDLE);
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="185" endline="191">
static void *dumpio_create_sconfig (apr_pool_t *p, server_rec *s) {
    dumpio_conf_t *ptr = apr_pcalloc (p, sizeof *ptr);
    ptr->enable_input = ptr->enable_output = 0;
    ptr->loglevel = APLOG_DEBUG;
    return ptr;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="193" endline="201">
static const char *dumpio_enable_input (cmd_parms *cmd, void *dummy, int arg) {
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (cmd->server->module_config, &dumpio_module);
    ptr->enable_input = arg;
    return NULL;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="203" endline="211">
static const char *dumpio_enable_output (cmd_parms *cmd, void *dummy, int arg) {
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (cmd->server->module_config, &dumpio_module);
    ptr->enable_output = arg;
    return NULL;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_dumpio.c.ifdefed" startline="213" endline="261">
static const char *set_loglevel (cmd_parms *cmd, void *dummy, const char *arg) {
    char *str;
    dumpio_conf_t *ptr = (dumpio_conf_t *) ap_get_module_config (cmd->server->module_config, &dumpio_module);
    const char *err = ap_check_cmd_context (cmd, NOT_IN_DIR_LOC_FILE | NOT_IN_LIMIT);
    if (err != NULL) {
        return err;
    }
    if ((str = ap_getword_conf (cmd->pool, &arg))) {
        if (!strcasecmp (str, "emerg")) {
            ptr->loglevel = APLOG_EMERG;
        }
        else if (!strcasecmp (str, "alert")) {
            ptr->loglevel = APLOG_ALERT;
        }
        else if (!strcasecmp (str, "crit")) {
            ptr->loglevel = APLOG_CRIT;
        }
        else if (!strcasecmp (str, "error")) {
            ptr->loglevel = APLOG_ERR;
        }
        else if (!strcasecmp (str, "warn")) {
            ptr->loglevel = APLOG_WARNING;
        }
        else if (!strcasecmp (str, "notice")) {
            ptr->loglevel = APLOG_NOTICE;
        }
        else if (!strcasecmp (str, "info")) {
            ptr->loglevel = APLOG_INFO;
        }
        else if (!strcasecmp (str, "debug")) {
            ptr->loglevel = APLOG_DEBUG;
        }
        else {
            return "DumpIOLogLevel requires level keyword: one of " "emerg/alert/crit/error/warn/notice/info/debug";
        }
    }
    else {
        return "DumpIOLogLevel requires level keyword";
    }
    return NULL;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="45" endline="54">
static void *create_bucketeer_server_config (apr_pool_t *p, server_rec *s) {
    bucketeer_filter_config_t *c = apr_pcalloc (p, sizeof *c);
    c->bucketdelimiter = 0x02;
    c->passdelimiter = 0x10;
    c->flushdelimiter = 0x06;
    return c;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="61" endline="164">
static apr_status_t bucketeer_out_filter (ap_filter_t *f, apr_bucket_brigade *bb) {
    apr_bucket *e;
    request_rec *r = f->r;
    bucketeer_ctx_t *ctx = f->ctx;
    bucketeer_filter_config_t *c;
    c = ap_get_module_config (r->server->module_config, &bucketeer_module);
    if (!ctx) {
        if (!r->content_type || strncmp (r->content_type, "text/", 5)) {
            ap_remove_output_filter (f);
            return ap_pass_brigade (f->next, bb);
        }
        ctx = f->ctx = apr_pcalloc (f->r->pool, sizeof (*ctx));
        ctx->bb = apr_brigade_create (f->r->pool, f->c->bucket_alloc);
        apr_table_unset (f->r->headers_out, "Content-Length");
    }
    for (e = APR_BRIGADE_FIRST (bb); e != APR_BRIGADE_SENTINEL (bb); e = APR_BUCKET_NEXT (e)) {
        const char *data;
        apr_size_t len, i, lastpos;
        if (APR_BUCKET_IS_EOS (e)) {
            APR_BUCKET_REMOVE (e);
            APR_BRIGADE_INSERT_TAIL (ctx->bb, e);
            return ap_pass_brigade (f->next, ctx->bb);
        }
        if (APR_BUCKET_IS_FLUSH (e)) {
            continue;
        }
        if (APR_BUCKET_IS_METADATA (e)) {
            apr_bucket *cpy;
            apr_bucket_copy (e, &cpy);
            APR_BRIGADE_INSERT_TAIL (ctx->bb, cpy);
            continue;
        }
        apr_bucket_read (e, &data, &len, APR_BLOCK_READ);
        if (len > 0) {
            lastpos = 0;
            for (i = 0; i < len; i++) {
                if (data[i] == c->flushdelimiter || data[i] == c->bucketdelimiter || data[i] == c->passdelimiter) {
                    apr_bucket *p;
                    if (i - lastpos > 0) {
                        p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
                        APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
                    }
                    lastpos = i + 1;
                    if (data[i] == c->flushdelimiter) {
                        p = apr_bucket_flush_create (f->c->bucket_alloc);
                        APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
                    }
                    if (data[i] == c->flushdelimiter || data[i] == c->passdelimiter) {
                        ap_pass_brigade (f->next, ctx->bb);
                    }
                }
            }
            if (lastpos < i) {
                apr_bucket *p;
                p = apr_bucket_pool_create (apr_pmemdup (f->r->pool, &data[lastpos], i - lastpos), i - lastpos, f->r->pool, f->c->bucket_alloc);
                lastpos = i;
                APR_BRIGADE_INSERT_TAIL (ctx->bb, p);
            }
        }
    }
    return APR_SUCCESS;
}
</source>
<source file="systems/c/httpd-2.2.8/modules/debug/mod_bucketeer.c.ifdefed" startline="166" endline="170">
static void register_hooks (apr_pool_t *p) {
    ap_register_output_filter (bucketeerFilterName, bucketeer_out_filter, NULL, AP_FTYPE_RESOURCE -1);
}
</source>
