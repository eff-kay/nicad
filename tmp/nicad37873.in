<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="275" endline="277">
public void execute () {
    promptOpen ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="282" endline="284">
public void execute () {
    promptSaveAs ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="290" endline="292">
public void execute () {
    print ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="298" endline="300">
public void execute () {
    exit ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="310" endline="334">
protected JMenu createEditMenu () {
    CommandMenu menu = new CommandMenu ("Edit");
    menu.add (new UndoableCommand (new SelectAllCommand ("Select All", this)), new MenuShortcut ('a'));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new CutCommand ("Cut", this)), new MenuShortcut ('x'));
    menu.add (new CopyCommand ("Copy", this), new MenuShortcut ('c'));
    menu.add (new UndoableCommand (new PasteCommand ("Paste", this)), new MenuShortcut ('v'));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new DuplicateCommand ("Duplicate", this)), new MenuShortcut ('d'));
    menu.add (new UndoableCommand (new DeleteCommand ("Delete", this)));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new GroupCommand ("Group", this)));
    menu.add (new UndoableCommand (new UngroupCommand ("Ungroup", this)));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new SendToBackCommand ("Send to Back", this)));
    menu.add (new UndoableCommand (new BringToFrontCommand ("Bring to Front", this)));
    menu.addSeparator ();
    menu.add (new UndoCommand ("Undo Command", this));
    menu.add (new RedoCommand ("Redo Command", this));
    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="340" endline="358">
protected JMenu createAlignmentMenu () {
    CommandMenu menu = new CommandMenu ("Align");
    menu.addCheckItem (new ToggleGridCommand ("Toggle Snap to Grid", this, new Point (4, 4)));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.LEFTS, this)));
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.CENTERS, this)));
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.RIGHTS, this)));
    menu.addSeparator ();
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.TOPS, this)));
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.MIDDLES, this)));
    menu.add (new UndoableCommand (new AlignCommand (AlignCommand.Alignment.BOTTOMS, this)));
    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="364" endline="381">
protected JMenu createDebugMenu () {
    CommandMenu menu = new CommandMenu ("Debug");
    Command cmd = new AbstractCommand ("Simple Update", this) {
        public void execute () {
            this.view ().setDisplayUpdate (new SimpleUpdateStrategy ());
        }}

    ;
    menu.add (cmd);
    cmd = new AbstractCommand ("Buffered Update", this) {
        public void execute () {
            this.view ().setDisplayUpdate (new BufferedUpdateStrategy ());
        }}

    ;
    menu.add (cmd);
    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="368" endline="370">
public void execute () {
    this.view ().setDisplayUpdate (new SimpleUpdateStrategy ());
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="375" endline="377">
public void execute () {
    this.view ().setDisplayUpdate (new BufferedUpdateStrategy ());
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="387" endline="398">
protected JMenu createAttributesMenu () {
    JMenu menu = new JMenu ("Attributes");
    menu.add (createColorMenu ("Fill Color", FigureAttributeConstant.FILL_COLOR));
    menu.add (createColorMenu ("Pen Color", FigureAttributeConstant.FRAME_COLOR));
    menu.add (createArrowMenu ());
    menu.addSeparator ();
    menu.add (createFontMenu ());
    menu.add (createFontSizeMenu ());
    menu.add (createFontStyleMenu ());
    menu.add (createColorMenu ("Text Color", FigureAttributeConstant.TEXT_COLOR));
    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="403" endline="417">
protected JMenu createColorMenu (String title, FigureAttributeConstant attribute) {
    CommandMenu menu = new CommandMenu (title);
    for (int i = 0;
    i < ColorMap.size (); i ++) menu.add (new UndoableCommand (new ChangeAttributeCommand (ColorMap.name (i), attribute, ColorMap.color (i), this)));

    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="422" endline="434">
protected JMenu createArrowMenu () {
    FigureAttributeConstant arrowMode = FigureAttributeConstant.ARROW_MODE;
    CommandMenu menu = new CommandMenu ("Arrow");
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("none", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_NONE), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("at Start", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_START), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("at End", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_END), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("at Both", arrowMode, new Integer (PolyLineFigure.ARROW_TIP_BOTH), this)));
    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="440" endline="448">
protected JMenu createFontMenu () {
    CommandMenu menu = new CommandMenu ("Font");
    String fonts [] = Toolkit.getDefaultToolkit ().getFontList ();
    for (int i = 0;
    i < fonts.length; i ++) {
        menu.add (new UndoableCommand (new ChangeAttributeCommand (fonts [i], FigureAttributeConstant.FONT_NAME, fonts [i], this)));
    }
    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="453" endline="463">
protected JMenu createFontStyleMenu () {
    FigureAttributeConstant fontStyle = FigureAttributeConstant.FONT_STYLE;
    CommandMenu menu = new CommandMenu ("Font Style");
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("Plain", fontStyle, new Integer (Font.PLAIN), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("Italic", fontStyle, new Integer (Font.ITALIC), this)));
    menu.add (new UndoableCommand (new ChangeAttributeCommand ("Bold", fontStyle, new Integer (Font.BOLD), this)));
    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="468" endline="484">
protected JMenu createFontSizeMenu () {
    CommandMenu menu = new CommandMenu ("Font Size");
    int sizes [] = {9, 10, 12, 14, 18, 24, 36, 48, 72};
    for (int i = 0;
    i < sizes.length; i ++) {
        menu.add (new UndoableCommand (new ChangeAttributeCommand (Integer.toString (sizes [i]), FigureAttributeConstant.FONT_SIZE, new Integer (sizes [i]), this)));
    }
    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="489" endline="504">
public JMenu createLookAndFeelMenu () {
    CommandMenu menu = new CommandMenu ("Look'n'Feel");
    UIManager.LookAndFeelInfo [] lafs = UIManager.getInstalledLookAndFeels ();
    for (int i = 0;
    i < lafs.length; i ++) {
        final String lnfClassName = lafs [i].getClassName ();
        Command cmd = new AbstractCommand (lafs [i].getName (), this) {
            public void execute () {
                newLookAndFeel (lnfClassName);
            }}

        ;
        menu.add (cmd);
    }
    return menu;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="497" endline="499">
public void execute () {
    newLookAndFeel (lnfClassName);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="509" endline="515">
protected JToolBar createToolPalette () {
    JToolBar palette = new JToolBar ();
    palette.setBackground (Color.lightGray);
    return palette;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="523" endline="526">
protected void createTools (JToolBar palette) {
    setDefaultTool (createDefaultTool ());
    palette.add (fDefaultToolButton);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="532" endline="534">
protected Tool createSelectionTool () {
    return new SelectionTool (this);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="536" endline="538">
protected Tool createDefaultTool () {
    return createSelectionTool ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="540" endline="547">
protected void setDefaultTool (Tool newDefaultTool) {
    if (newDefaultTool != null) {
        fDefaultToolButton = createToolButton (IMAGES + "SEL", "Selection Tool", newDefaultTool);
    } else {
        fDefaultToolButton = null;
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="549" endline="556">
public Tool getDefaultTool () {
    if (fDefaultToolButton != null) {
        return fDefaultToolButton.tool ();
    } else {
        return null;
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="561" endline="563">
protected ToolButton createToolButton (String iconName, String toolName, Tool tool) {
    return new ToolButton (this, iconName, toolName, tool);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="571" endline="575">
protected DrawingView createDrawingView () {
    DrawingView createdDrawingView = createDrawingView (createDrawing ());
    createdDrawingView.drawing ().setTitle (getDefaultDrawingTitle ());
    return createdDrawingView;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="577" endline="584">
protected DrawingView createDrawingView (Drawing newDrawing) {
    Dimension d = getDrawingViewSize ();
    DrawingView newDrawingView = new StandardDrawingView (this, d.width, d.height);
    newDrawingView.setDrawing (newDrawing);
    return newDrawingView;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="596" endline="598">
protected DrawingView createInitialDrawingView () {
    return createDrawingView ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="603" endline="605">
protected Dimension getDrawingViewSize () {
    return new Dimension (800, 800);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="613" endline="615">
protected Drawing createDrawing () {
    return new StandardDrawing ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="617" endline="620">
protected Desktop createDesktop () {
    return new JPanelDesktop (this);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="622" endline="625">
protected void setDesktop (Desktop newDesktop) {
    newDesktop.addDesktopListener (getDesktopListener ());
    fDesktop = newDesktop;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="631" endline="633">
public Desktop getDesktop () {
    return fDesktop;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="640" endline="647">
public StorageFormatManager createStorageFormatManager () {
    StorageFormatManager storageFormatManager = new StorageFormatManager ();
    storageFormatManager.setDefaultStorageFormat (new StandardStorageFormat ());
    storageFormatManager.addStorageFormat (storageFormatManager.getDefaultStorageFormat ());
    storageFormatManager.addStorageFormat (new SerializationStorageFormat ());
    return storageFormatManager;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="653" endline="655">
protected final void setStorageFormatManager (StorageFormatManager newStorageFormatManager) {
    fStorageFormatManager = newStorageFormatManager;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="661" endline="663">
public StorageFormatManager getStorageFormatManager () {
    return fStorageFormatManager;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="668" endline="670">
protected Dimension defaultSize () {
    return new Dimension (600, 450);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="675" endline="680">
protected JTextField createStatusLine () {
    JTextField field = new JTextField ("No Tool", 40);
    field.setBackground (Color.white);
    field.setEditable (false);
    return field;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="682" endline="684">
private void setStatusLine (JTextField newStatusLine) {
    fStatusLine = newStatusLine;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="686" endline="688">
protected JTextField getStatusLine () {
    return fStatusLine;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="694" endline="698">
public void paletteUserSelected (PaletteButton paletteButton) {
    ToolButton toolButton = (ToolButton) paletteButton;
    setTool (toolButton.tool (), toolButton.name ());
    setSelected (toolButton);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="704" endline="712">
public void paletteUserOver (PaletteButton paletteButton, boolean inside) {
    ToolButton toolButton = (ToolButton) paletteButton;
    if (inside) {
        showStatus (toolButton.name ());
    } else if (fSelectedToolButton != null) {
        showStatus (fSelectedToolButton.name ());
    }

}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="718" endline="720">
public Tool tool () {
    return fTool;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="727" endline="729">
public DrawingView view () {
    return fView;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="731" endline="735">
protected void setView (DrawingView newView) {
    DrawingView oldView = fView;
    fView = newView;
    fireViewSelectionChangedEvent (oldView, view ());
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="737" endline="739">
public DrawingView [] views () {
    return new DrawingView [] {view ()};
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="745" endline="751">
public void toolDone () {
    System.out.println ("ToolDone");
    if (fDefaultToolButton != null) {
        setTool (fDefaultToolButton.tool (), fDefaultToolButton.name ());
        setSelected (fDefaultToolButton);
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="762" endline="764">
public void figureSelectionChanged (DrawingView view) {
    checkCommandMenus ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="766" endline="775">
protected void checkCommandMenus () {
    JMenuBar mb = getJMenuBar ();
    for (int x = 0;
    x < mb.getMenuCount (); x ++) {
        JMenu jm = mb.getMenu (x);
        if (CommandMenu.class.isInstance (jm)) {
            checkCommandMenu ((CommandMenu) jm);
        }
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="777" endline="785">
protected void checkCommandMenu (CommandMenu cm) {
    cm.checkEnabled ();
    for (int y = 0;
    y < cm.getItemCount (); y ++) {
        JMenuItem jmi = cm.getItem (y);
        if (CommandMenu.class.isInstance (jmi)) {
            checkCommandMenu ((CommandMenu) jmi);
        }
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="791" endline="793">
public void addViewChangeListener (ViewChangeListener vsl) {
    listenerList.add (ViewChangeListener.class, vsl);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="798" endline="800">
public void removeViewChangeListener (ViewChangeListener vsl) {
    listenerList.remove (ViewChangeListener.class, vsl);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="808" endline="817">
protected void fireViewSelectionChangedEvent (DrawingView oldView, DrawingView newView) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewSelectionChanged (oldView, newView);
        }
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="819" endline="828">
protected void fireViewCreatedEvent (DrawingView view) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewCreated (view);
        }
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="830" endline="839">
protected void fireViewDestroyingEvent (DrawingView view) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewDestroying (view);
        }
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="845" endline="847">
public void showStatus (String string) {
    getStatusLine ().setText (string);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="857" endline="869">
public void setTool (Tool t, String name) {
    if ((tool () != null) && (tool ().isActive ())) {
        tool ().deactivate ();
    }
    fTool = t;
    if (tool () != null) {
        showStatus (name);
        tool ().activate ();
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="871" endline="879">
private void setSelected (ToolButton button) {
    if (fSelectedToolButton != null) {
        fSelectedToolButton.reset ();
    }
    fSelectedToolButton = button;
    if (fSelectedToolButton != null) {
        fSelectedToolButton.select ();
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="884" endline="892">
public void exit () {
    destroy ();
    setVisible (false);
    dispose ();
    winCount --;
    if (winCount == 0) {
        System.exit (0);
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="898" endline="899">
protected void destroy () {
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="904" endline="908">
public void promptNew () {
    newWindow (createDrawing ());
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="913" endline="926">
public void promptOpen () {
    toolDone ();
    JFileChooser openDialog = createOpenFileChooser ();
    getStorageFormatManager ().registerFileFilters (openDialog);
    if (openDialog.showOpenDialog (this) == JFileChooser.APPROVE_OPTION) {
        StorageFormat foundFormat = getStorageFormatManager ().findStorageFormat (openDialog.getFileFilter ());
        if (foundFormat != null) {
            loadDrawing (foundFormat, openDialog.getSelectedFile ().getAbsolutePath ());
        } else {
            showStatus ("Not a valid file format: " + openDialog.getFileFilter ().getDescription ());
        }
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="931" endline="947">
public void promptSaveAs () {
    if (view () != null) {
        toolDone ();
        JFileChooser saveDialog = createSaveFileChooser ();
        getStorageFormatManager ().registerFileFilters (saveDialog);
        if (saveDialog.showSaveDialog (this) == JFileChooser.APPROVE_OPTION) {
            StorageFormat foundFormat = getStorageFormatManager ().findStorageFormat (saveDialog.getFileFilter ());
            if (foundFormat != null) {
                saveDrawing (foundFormat, saveDialog.getSelectedFile ().getAbsolutePath ());
            } else {
                showStatus ("Not a valid file format: " + saveDialog.getFileFilter ().getDescription ());
            }
        }
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="953" endline="957">
protected JFileChooser createOpenFileChooser () {
    JFileChooser openDialog = new JFileChooser ();
    openDialog.setDialogTitle ("Open File...");
    return openDialog;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="963" endline="967">
protected JFileChooser createSaveFileChooser () {
    JFileChooser saveDialog = new JFileChooser ();
    saveDialog.setDialogTitle ("Save File...");
    return saveDialog;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="972" endline="986">
public void print () {
    tool ().deactivate ();
    PrintJob printJob = getToolkit ().getPrintJob (this, "Print Drawing", null);
    if (printJob != null) {
        Graphics pg = printJob.getGraphics ();
        if (pg != null) {
            ((StandardDrawingView) view ()).printAll (pg);
            pg.dispose ();
        }
        printJob.end ();
    }
    tool ().activate ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="991" endline="1004">
protected void saveDrawing (StorageFormat storeFormat, String file) {
    if (view () == null) {
        return;
    }
    try {
        String name = storeFormat.store (file, view ().drawing ());
        view ().drawing ().setTitle (name);
        setDrawingTitle (name);
    } catch (IOException e) {
        showStatus (e.toString ());
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1009" endline="1023">
protected void loadDrawing (StorageFormat restoreFormat, String file) {
    try {
        Drawing restoredDrawing = restoreFormat.restore (file);
        if (restoredDrawing != null) {
            restoredDrawing.setTitle (file);
            newWindow (restoredDrawing);
        } else {
            showStatus ("Unknown file type: could not open file '" + file + "'");
        }
    } catch (IOException e) {
        showStatus ("Error: " + e);
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1028" endline="1036">
private void newLookAndFeel (String landf) {
    try {
        UIManager.setLookAndFeel (landf);
        SwingUtilities.updateComponentTreeUI (this);
    } catch (Exception e) {
        System.err.println (e);
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1041" endline="1048">
protected void setDrawingTitle (String drawingTitle) {
    if (getDefaultDrawingTitle ().equals (drawingTitle)) {
        setTitle (getApplicationName ());
    } else {
        setTitle (getApplicationName () + " - " + drawingTitle);
    }
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1053" endline="1055">
protected String getDrawingTitle () {
    return view ().drawing ().getTitle ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1060" endline="1062">
public void setApplicationName (String applicationName) {
    fApplicationName = applicationName;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1067" endline="1069">
public String getApplicationName () {
    return fApplicationName;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1071" endline="1073">
protected void setUndoManager (UndoManager newUndoManager) {
    myUndoManager = newUndoManager;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1075" endline="1077">
public UndoManager getUndoManager () {
    return myUndoManager;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1079" endline="1081">
protected VersionControlStrategy getVersionControlStrategy () {
    return new StandardVersionControlStrategy (this);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1091" endline="1096">
public String [] getRequiredVersions () {
    String [] requiredVersions = new String [1];
    requiredVersions [0] = VersionManagement.getPackageVersion (DrawApplication.class.getPackage ());
    return requiredVersions;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1098" endline="1100">
public String getDefaultDrawingTitle () {
    return fgUntitled;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1102" endline="1104">
protected DesktopListener getDesktopListener () {
    return fDesktopListener;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1106" endline="1108">
protected void setDesktopListener (DesktopListener desktopPaneListener) {
    fDesktopListener = desktopPaneListener;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1110" endline="1134">
protected DesktopListener createDesktopListener () {
    return new DesktopListener () {
        public void drawingViewAdded (DesktopEvent dpe) {
            DrawingView dv = dpe.getDrawingView ();
            fireViewCreatedEvent (dv);
        } public void drawingViewRemoved (DesktopEvent dpe) {
            DrawingView dv = dpe.getDrawingView ();
            getUndoManager ().clearUndos (dv);
            getUndoManager ().clearRedos (dv);
            fireViewDestroyingEvent (dv);
            checkCommandMenus ();
        } public void drawingViewSelected (DesktopEvent dpe) {
            DrawingView dv = dpe.getDrawingView ();
            if (dv != null) {
                if (dv.drawing () != null) dv.unfreezeView ();

            }
            setView (dv);
        }}

    ;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1112" endline="1115">
public void drawingViewAdded (DesktopEvent dpe) {
    DrawingView dv = dpe.getDrawingView ();
    fireViewCreatedEvent (dv);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1116" endline="1123">
public void drawingViewRemoved (DesktopEvent dpe) {
    DrawingView dv = dpe.getDrawingView ();
    getUndoManager ().clearUndos (dv);
    getUndoManager ().clearRedos (dv);
    fireViewDestroyingEvent (dv);
    checkCommandMenus ();
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1124" endline="1132">
public void drawingViewSelected (DesktopEvent dpe) {
    DrawingView dv = dpe.getDrawingView ();
    if (dv != null) {
        if (dv.drawing () != null) dv.unfreezeView ();

    }
    setView (dv);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1136" endline="1138">
protected Iconkit createIconkit () {
    return new Iconkit (this);
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1140" endline="1142">
protected void setIconkit (Iconkit newIconkit) {
    fIconkit = newIconkit;
}
</source>
<source file="systems/java/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java" startline="1144" endline="1146">
protected Iconkit getIconkit () {
    return fIconkit;
}
</source>
