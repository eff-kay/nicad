pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {
    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));

    pausedPublic = newPausedPublic;
    pausedOwnerAdmin = newPausedOwnerAdmin;

    PausePublic(newPausedPublic);
    PauseOwnerAdmin(newPausedOwnerAdmin);
  }
pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {
    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));

    pausedPublic = newPausedPublic;
    pausedOwnerAdmin = newPausedOwnerAdmin;

    PausePublic(newPausedPublic);
    PauseOwnerAdmin(newPausedOwnerAdmin);
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() external onlyOwner whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() external onlyOwner whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() external onlyOwner whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() onlyOwner whenNotPaused returns (bool) {
    paused = true;
    Pause();
    return true;
  }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyOwner whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() external onlyOwner whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() external onlyOwner whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() external onlyOwner whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() public onlyOwner whenNotPaused {
    paused = true;
    emit Pause();
  }
pause() public onlyOwner whenNotPaused {
        _paused = true;
        emit Pause();
    }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
pause() public onlyOwner {
        require(!paused, "already paused");
        paused = true;
        emit Pause();
    }
pause() public onlyOwner {
        require(!paused, "already paused");
        paused = true;
        emit Pause();
    }
