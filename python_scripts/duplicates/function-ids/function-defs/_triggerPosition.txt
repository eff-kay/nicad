_triggerPosition(
        address depositTokenAddress,
        uint256 depositAmount)
        internal
        returns (bool)
    {
        if (tradeTokenAddress == wethContract || loanTokenAddress == wethContract || depositAmount == 0 || depositAmount == MAX_UINT) {
            uint256 ethBalance = address(this).balance;
            if (ethBalance != 0) {
                WETHInterface(wethContract).deposit.value(ethBalance)();
                if (tradeTokenAddress != wethContract && loanTokenAddress != wethContract) {
                    _tradeUserAsset(
                        wethContract,       // sourceTokenAddress
                        loanTokenAddress,   // destTokenAddress
                        address(this),      // receiver
                        ethBalance          // sourceTokenAmount
                    );
                }
_triggerPosition(
        address depositTokenAddress,
        uint256 depositAmount)
        internal
        returns (bool)
    {
        if (tradeTokenAddress == wethContract || loanTokenAddress == wethContract || depositAmount == 0 || depositAmount == MAX_UINT) {
            uint256 ethBalance = address(this).balance;
            if (ethBalance != 0) {
                WETHInterface(wethContract).deposit.value(ethBalance)();
                if (tradeTokenAddress != wethContract && loanTokenAddress != wethContract) {
                    _tradeUserAsset(
                        wethContract,       // sourceTokenAddress
                        loanTokenAddress,   // destTokenAddress
                        address(this),      // receiver
                        ethBalance          // sourceTokenAmount
                    );
                }
_triggerPosition(
        address depositTokenAddress,
        uint256 depositAmount)
        internal
        returns (bool)
    {
        if (tradeTokenAddress == wethContract || loanTokenAddress == wethContract || depositAmount == 0 || depositAmount == MAX_UINT) {
            uint256 ethBalance = address(this).balance;
            if (ethBalance != 0) {
                WETHInterface(wethContract).deposit.value(ethBalance)();
                if (tradeTokenAddress != wethContract && loanTokenAddress != wethContract) {
                    _tradeUserAsset(
                        wethContract,       // sourceTokenAddress
                        loanTokenAddress,   // destTokenAddress
                        address(this),      // receiver
                        ethBalance          // sourceTokenAmount
                    );
                }
_triggerPosition(
        address depositTokenAddress,
        uint256 depositAmount)
        internal
        returns (bool)
    {
        if (tradeTokenAddress == wethContract || loanTokenAddress == wethContract || depositAmount == 0 || depositAmount == MAX_UINT) {
            uint256 ethBalance = address(this).balance;
            if (ethBalance != 0) {
                WETHInterface(wethContract).deposit.value(ethBalance)();
                if (tradeTokenAddress != wethContract && loanTokenAddress != wethContract) {
                    _tradeUserAsset(
                        wethContract,       // sourceTokenAddress
                        tradeTokenAddress,  // destTokenAddress
                        address(this),      // receiver
                        ethBalance          // sourceTokenAmount
                    );
                }
_triggerPosition(
        address depositTokenAddress,
        uint256 depositAmount)
        internal
        returns (bool)
    {
        if (tradeTokenAddress == wethContract || loanTokenAddress == wethContract || depositAmount == 0 || depositAmount == MAX_UINT) {
            uint256 ethBalance = address(this).balance;
            if (ethBalance != 0) {
                WETHInterface(wethContract).deposit.value(ethBalance)();
                if (tradeTokenAddress != wethContract && loanTokenAddress != wethContract) {
                    _tradeUserAsset(
                        wethContract,       // sourceTokenAddress
                        loanTokenAddress,   // destTokenAddress
                        address(this),      // receiver
                        ethBalance          // sourceTokenAmount
                    );
                }
