<clones>
<systeminfo processor="nicad5" system="smart_contracts" granularity="functions-blind" threshold="30%" minlines="1" maxlines="4"/>
<cloneinfo npcs="8259" npairs="374891"/>
<runinfo ncompares="4324700" cputime="2691782"/>
<classinfo nclasses="135"/>

<class classid="1" nclones="234" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="8" endline="9" pcid="1">
    function name() public view returns (string);
    function symbol() public view returns (string);
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="266" endline="268" pcid="7288">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="232" endline="234" pcid="7282">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="195" endline="197" pcid="579">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="317" endline="318" pcid="2350">
    function getOwner() public view returns (address);
}
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="8" endline="9" pcid="7310">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="188" endline="193" pcid="7177">
    function totalSupply() external view returns (uint256);

    /**
     * Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="279" endline="280" pcid="7357">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="17" endline="22" pcid="642">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="265" endline="274" pcid="2345">
    function getObserverCount() external view returns (uint);


    /**
     * Gets the observer at `_index`
     * 
     * @param _index The index of the observer
     * @return The observers address
     */
    function getObserverAtIndex(uint _index) external view returns (address);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="288" endline="289" pcid="7361">
    function owner() public view returns (address);
    function transferOwnership(address newOwner) public;
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="290" endline="291" pcid="7363">
    function name() public view returns (string);
    function symbol() public view returns (string);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="291" endline="292" pcid="7364">
    function symbol() public view returns (string);
    function decimals() public view returns (uint8);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="292" endline="293" pcid="7365">
    function decimals() public view returns (uint8);
    function paused() public view returns (bool);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="293" endline="295" pcid="7366">
    function paused() public view returns (bool);

}
</source>
<source file="systems/smart_contracts/TokenSwap.sol" startline="154" endline="156" pcid="7398">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="12" endline="13" pcid="2546">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="17" endline="22" pcid="515">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="42" endline="43" pcid="2040">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="96" endline="97" pcid="2843">
    function token_totalSupply() public view returns (uint256);
    function token_balanceOf(address _owner) public view returns (uint256);
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="67" endline="68" pcid="7407">
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="30" endline="31" pcid="7428">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="746" endline="747" pcid="7111">
    function getFactoryAddress() external view returns(address);
}
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="60" endline="61" pcid="7452">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/ankara.sol" startline="25" endline="27" pcid="678">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="94" endline="96" pcid="2842">
    function token_decimals() public view returns (uint8);
    
    function token_totalSupply() public view returns (uint256);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="543" endline="544" pcid="7081">
    function paused() external view returns (bool);
    function pause() external;
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="39" endline="40" pcid="7546">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="542" endline="543" pcid="7080">
    function decimals() external view returns (uint8);
    function paused() external view returns (bool);
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="29" endline="30" pcid="3161">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="530" endline="531" pcid="7072">
    function getWLLength() external view returns(uint256);
    function setNewThreshold(uint256) external;
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="438" endline="447" pcid="2356">
    function getOwnerCount() public view returns (uint);


    /**
     * Gets the owner at `_index`
     *
     * @param _index The index of the owner
     * @return The address of the owner found at `_index`
     */
    function getOwnerAt(uint _index) public view returns (address);
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="12" endline="13" pcid="1459">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="50" endline="51" pcid="706">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/UTC.sol" startline="63" endline="64" pcid="7575">
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/Byte.sol" startline="10" endline="11" pcid="1565">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="53" endline="54" pcid="7617">
    function totalSupply() public constant returns (uint256);
    function balanceOf(address tokenOwner) public constant returns (uint256 balance);
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="34" endline="36" pcid="7638">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="528" endline="529" pcid="7070">
    function getWLThresholdBalance() external view returns (uint256);
    function getMaxWLAmount(address) external view returns(uint256);
</source>
<source file="systems/smart_contracts/VENT.sol" startline="56" endline="57" pcid="7680">
        function totalSupply() public view returns (uint);
        function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="497" endline="498" pcid="7043">
    function getWalletOnTopAddress() external view returns (address);
    function setWalletOnTopAddress(address) external returns(address);
</source>
<source file="systems/smart_contracts/CNG.sol" startline="12" endline="14" pcid="1840">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="17" endline="22" pcid="475">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="179" endline="181" pcid="7711">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="496" endline="497" pcid="7042">
    function getMinterAddress() external view returns(address);
    function getWalletOnTopAddress() external view returns (address);
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="16" endline="18" pcid="724">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="93" endline="94" pcid="2841">
    function token_symbol() public view returns (string);
    function token_decimals() public view returns (uint8);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="20" endline="25" pcid="7011">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="188" endline="190" pcid="7786">
    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="75" endline="76" pcid="6979">
    function totalSupply() external view returns (uint256);
    function balanceOf(address owner) external view returns (uint256);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="190" endline="191" pcid="7787">
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="74" endline="75" pcid="6978">
    function decimals() external view returns (uint256);
    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="50" endline="51" pcid="7833">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="8" endline="9" pcid="2144">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="555" endline="558" pcid="135">
    function price() view public returns(uint256);
    //function costOfTxShares() view public returns(uint256);
    
	function calcTimedQuota(uint256 _rest, uint256 _full, uint256 _timespan, uint256 _period) public pure returns (uint256);
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="35" endline="36" pcid="7855">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="35" endline="36" pcid="7877">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="122" endline="127" pcid="7900">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="82" endline="83" pcid="3066">
  function totalSupply() public view returns (uint256);
  function tokenOfOwnerByIndex(
</source>
<source file="systems/smart_contracts/Wisdom.sol" startline="80" endline="82" pcid="7982">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/WTA.sol" startline="61" endline="62" pcid="8045">
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/SuperMarket.sol" startline="14" endline="16" pcid="6756">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="12" endline="13" pcid="8068">
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="179" endline="181" pcid="6724">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="50" endline="51" pcid="8131">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="421" endline="422" pcid="6613">
	function totalSupply() public view returns (uint256);
	function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="23" endline="25" pcid="3012">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="17" endline="22" pcid="1744">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="35" endline="36" pcid="6577">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="9" endline="11" pcid="2296">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="34" endline="35" pcid="8153">
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) public view returns (uint256 balance);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="195" endline="196" pcid="813">
    function getMinterAddress() external view returns(address);
    function getWalletOnTopAddress() external view returns (address);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="553" endline="554" pcid="133">
    function totalSupply() public view returns (uint256);
    function balanceOf(address _addr)public view returns(uint256);
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="36" endline="37" pcid="6515">
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="121" endline="126" pcid="8190">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="196" endline="197" pcid="814">
    function getWalletOnTopAddress() external view returns (address);
    function setWalletOnTopAddress(address) external returns(address);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="95" endline="103" pcid="2334">
    function isLocked() external view returns (bool);


    /**
     * Locks the token so that the transfering of value is disabled 
     *
     * @return Whether the unlocking was successful or not
     */
    function lock() external returns (bool);
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="42" endline="43" pcid="3410">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="19" endline="24" pcid="8224">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ERC20.sol" startline="84" endline="86" pcid="2981">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="117" endline="118" pcid="6431">
    function getTotalFPContracts() external view returns(uint256);
    function getContractsByIndex(uint256) external view returns (address, address, address, address);
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="12" endline="13" pcid="2386">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="47" endline="48" pcid="422">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="116" endline="117" pcid="6430">
    function getTotalTContracts() external view returns(uint256);
    function getTotalFPContracts() external view returns(uint256);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="115" endline="116" pcid="6429">
    function getTotalATContracts() external view returns(uint256);
    function getTotalTContracts() external view returns(uint256);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="114" endline="115" pcid="6428">
    function getTotalDeployer() external view returns(uint256);
    function getTotalATContracts() external view returns(uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="519" endline="521" pcid="110">
    function tailOfQueue() public view returns(uint256);
    
    function setColdWallet(address _coldWallet, uint256 _ratioAutoSave, uint256 _ratioAutoRemain) public;
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="13" endline="14" pcid="1405">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="99" endline="100" pcid="1628">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="109" endline="110" pcid="6423">
    function getTotalDeployFees() external view returns (uint256);
    function isFactoryDeployer(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/CGT.sol" startline="49" endline="50" pcid="1685">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="44" endline="45" pcid="398">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="195" endline="196" pcid="3442">
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="8" endline="9" pcid="2637">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DGC.sol" startline="49" endline="50" pcid="2515">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="196" endline="197" pcid="3443">
    function totalSupply() external view returns (uint256);
    function balanceOf(address owner) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="210" endline="211" pcid="3451">
    function getMinterAddress() external view returns(address);
    function getWalletOnTopAddress() external view returns (address);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="211" endline="212" pcid="3452">
    function getWalletOnTopAddress() external view returns (address);
    function setWalletOnTopAddress(address) external returns(address);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="242" endline="243" pcid="3479">
    function getWLThresholdBalance() external view returns (uint256);
    function getMaxWLAmount(address) external view returns(uint256);
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="32" endline="33" pcid="2422">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="14" endline="16" pcid="2733">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="244" endline="245" pcid="3481">
    function getWLLength() external view returns(uint256);
    function setNewThreshold(uint256) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="256" endline="257" pcid="3489">
    function getFactoryAddress() external view returns(address);
}
</source>
<source file="systems/smart_contracts/Factory.sol" startline="263" endline="264" pcid="3492">
    function getFactoryAddress() external view returns(address);
}
</source>
<source file="systems/smart_contracts/Factory.sol" startline="271" endline="272" pcid="3495">
    function getFactoryAddress() external view returns(address);
}
</source>
<source file="systems/smart_contracts/BEX.sol" startline="8" endline="9" pcid="1159">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="20" endline="22" pcid="1362">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="23" endline="25" pcid="6408">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/SBC.sol" startline="289" endline="291" pcid="6332">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="92" endline="93" pcid="2840">
    function token_name() public view returns (string);
    function token_symbol() public view returns (string);
</source>
<source file="systems/smart_contracts/AdminUpgradeabilityProxy.sol" startline="28" endline="36" pcid="349">
    function _implementation() internal view returns (address);

    /**
     * @dev Delegates execution to an implementation contract.
     * This is a low level function that doesn't return to its internal call site.
     * It will return to the external caller whatever the implementation returns.
     * @param implementation Address to delegate.
     */
    function _delegate(address implementation) internal {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="227" endline="228" pcid="841">
    function getWLThresholdBalance() external view returns (uint256);
    function getMaxWLAmount(address) external view returns(uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="102" endline="103" pcid="37">
    function token_totalSupply() public view returns (uint256);
    function token_balanceOf(address _owner) public view returns (uint256);
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="49" endline="50" pcid="6271">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="53" endline="54" pcid="6247">
	function totalSupply() public view returns (uint);
	function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="229" endline="230" pcid="843">
    function getWLLength() external view returns(uint256);
    function setNewThreshold(uint256) external;
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="23" endline="32" pcid="2328">
    function totalSupply() external view returns (uint);


    /** 
     * Get balance of `_owner` 
     * 
     * @param _owner The address from which the balance will be retrieved
     * @return The balance
     */
    function balanceOf(address _owner) external view returns (uint);
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="8" endline="9" pcid="6195">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="939" endline="944" pcid="6130">
  function isCrowdsaleFull() public constant returns (bool);

  /**
   * Create new tokens or transfer issued tokens to the investor depending on the cap model.
   */
  function assignTokens(address receiver, uint tokenAmount) private;
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="302" endline="304" pcid="6092">
  function isSane() public constant returns (bool);

  function distributeReservedTokens(uint reservedTokensDistributionBatch);
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="249" endline="251" pcid="3564">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="95" endline="100" pcid="6017">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="10" endline="11" pcid="5984">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="100" endline="102" pcid="36">
    function token_decimals() public view returns (uint8);
    
    function token_totalSupply() public view returns (uint256);
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="15" endline="20" pcid="299">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/RaffleTicket.sol" startline="145" endline="150" pcid="5954">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="42" endline="43" pcid="1221">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="17" endline="22" pcid="5902">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="49" endline="50" pcid="3600">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="99" endline="100" pcid="35">
    function token_symbol() public view returns (string);
    function token_decimals() public view returns (uint8);
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="95" endline="100" pcid="2458">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="345" endline="347" pcid="5892">
    function decimals() public view returns (uint8);

    event Transfer(
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="344" endline="345" pcid="5891">
    function symbol() public view returns (string);
    function decimals() public view returns (uint8);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="98" endline="99" pcid="34">
    function token_name() public view returns (string);
    function token_symbol() public view returns (string);
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="106" endline="108" pcid="257">
    function totalSupply() public constant returns (uint);

    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="343" endline="344" pcid="5890">
    function name() public view returns (string);
    function symbol() public view returns (string);
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="330" endline="332" pcid="5884">
    function totalSupply() public view returns (uint);

    function balanceOf(address owner) public view returns (uint);
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="78" endline="80" pcid="5837">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/BFGToken.sol" startline="43" endline="44" pcid="1181">
  function totalSupply() public view returns (uint256);
  function balanceOf(address addr) public view returns (uint256);
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="61" endline="62" pcid="225">
    function totalSupply() public view returns(uint);
    function balanceOf(address tokenOwner) public view returns(uint balance);
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="33" endline="34" pcid="5804">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="11" endline="16" pcid="5769">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Comet.sol" startline="8" endline="9" pcid="1912">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="601" endline="602" pcid="160">
    function impl_quotaApply4Redeem() view public returns(uint256);
    function impl_apply4Redeem(address _from, uint256 _ms) public returns(uint256 ms2r);
</source>
<source file="systems/smart_contracts/FMT.sol" startline="10" endline="11" pcid="3645">
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="19" endline="20" pcid="5743">
  function totalSupply() public view returns (uint256);
  function balanceOf(address _who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="64" endline="65" pcid="20">
    function totalSupply() public view returns (uint256);
    function balanceOf(address _holder) public view returns (uint256);
</source>
<source file="systems/smart_contracts/DNP.sol" startline="17" endline="18" pcid="2781">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/PokaToken.sol" startline="14" endline="16" pcid="5728">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="313" endline="315" pcid="5685">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="50" endline="51" pcid="5638">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="49" endline="50" pcid="5609">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="247" endline="248" pcid="857">
    function getTotalDeployer() external view returns(uint256);
    function getTotalATContracts() external view returns(uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="63" endline="64" pcid="19">
    function decimals() public view returns (uint8);
    function totalSupply() public view returns (uint256);
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="28" endline="29" pcid="5547">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="167" endline="168" pcid="5522">
  function withdrawable() external view returns (uint256);
}
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="248" endline="249" pcid="858">
    function getTotalATContracts() external view returns(uint256);
    function getTotalTContracts() external view returns(uint256);
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="50" endline="51" pcid="1199">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/NSTTeamLock.sol" startline="18" endline="19" pcid="5454">
    function totalSupply() external view returns (uint256);
    function balanceOf(address owner) external view returns (uint256);
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="163" endline="168" pcid="5416">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="148" endline="149" pcid="5343">
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="146" endline="148" pcid="5342">
    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="62" endline="63" pcid="18">
    function symbol() public view returns (string);
    function decimals() public view returns (uint8);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="8" endline="9" pcid="2807">
    function name() public view returns (string);
    function symbol() public view returns (string);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="249" endline="250" pcid="859">
    function getTotalTContracts() external view returns(uint256);
    function getTotalFPContracts() external view returns(uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="61" endline="62" pcid="17">
    function name() public view returns (string);
    function symbol() public view returns (string);
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="13" endline="14" pcid="5295">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/NaorisToken.sol" startline="60" endline="61" pcid="5281">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="195" endline="196" pcid="3768">
    function getMinterAddress() external view returns(address);
    function getWalletOnTopAddress() external view returns (address);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="196" endline="197" pcid="3769">
    function getWalletOnTopAddress() external view returns (address);
    function setWalletOnTopAddress(address) external returns(address);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="11" endline="12" pcid="4">
    function totalSupply() public view returns (uint256);
    function balanceOf(address _holder) public view returns (uint256);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="9" endline="10" pcid="2808">
    function symbol() public view returns (string);
    function decimals() public view returns (uint8);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="227" endline="228" pcid="3796">
    function getWLThresholdBalance() external view returns (uint256);
    function getMaxWLAmount(address) external view returns(uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="229" endline="230" pcid="3798">
    function getWLLength() external view returns(uint256);
    function setNewThreshold(uint256) external;
</source>
<source file="systems/smart_contracts/BANG.sol" startline="12" endline="13" pcid="1035">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="10" endline="11" pcid="2809">
    function decimals() public view returns (uint8);
    function totalSupply() public view returns (uint256);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="250" endline="251" pcid="860">
    function getTotalFPContracts() external view returns(uint256);
    function getContractsByIndex(uint256) external view returns (address, address, address, address);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="10" endline="11" pcid="3">
    function decimals() public view returns (uint8);
    function totalSupply() public view returns (uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="246" endline="251" pcid="3804">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="8" endline="9" pcid="5211">
  function totalSupply() public view returns (uint);
  function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/MultiSendErc20.sol" startline="68" endline="69" pcid="5203">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="542" endline="543" pcid="3825">
    function decimals() external view returns (uint8);
    function paused() external view returns (bool);
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="47" endline="48" pcid="4198">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="11" endline="12" pcid="2810">
    function totalSupply() public view returns (uint256);
    function balanceOf(address _holder) public view returns (uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="9" endline="10" pcid="2">
    function symbol() public view returns (string);
    function decimals() public view returns (uint8);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="258" endline="259" pcid="864">
    function getFactoryDeployIndex() external view returns(uint);
    function isMemberInserted(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="45" endline="46" pcid="1953">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="543" endline="544" pcid="3826">
    function paused() external view returns (bool);
    function pause() external;
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="261" endline="266" pcid="5156">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="55" endline="56" pcid="5087">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="744" endline="745" pcid="3854">
    function getFactoryDeployIndex() external view returns(uint);
    function isMemberInserted(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="756" endline="757" pcid="3866">
    function getMembersNumber() external view returns (uint);
    function getMemberAddressByIndex(uint8) external view returns (address);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="770" endline="771" pcid="3876">
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="771" endline="772" pcid="3877">
    function totalSupply() external view returns (uint256);
    function balanceOf(address owner) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="921" endline="922" pcid="5040">
    function totalSupply() public view returns (uint256);
    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="1137" endline="1138" pcid="3908">
    function getFactoryAddress() external view returns(address);
}
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="8" endline="9" pcid="3912">
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/GNB.sol" startline="32" endline="33" pcid="4121">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="179" endline="181" pcid="2238">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="270" endline="271" pcid="876">
    function getMembersNumber() external view returns (uint);
    function getMemberAddressByIndex(uint8) external view returns (address);
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="86" endline="88" pcid="4234">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="339" endline="341" pcid="4947">
  function price() external view returns (uint256);

}
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="81" endline="83" pcid="4927">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="944" endline="949" pcid="4890">
  function isCrowdsaleFull() public constant returns (bool);

  /**
   * Create new tokens or transfer issued tokens to the investor depending on the cap model.
   */
  function assignTokens(address receiver, uint tokenAmount) private;
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="307" endline="309" pcid="4852">
  function isSane() public constant returns (bool);

  function distributeReservedTokens(uint reservedTokensDistributionBatch);
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="36" endline="37" pcid="3945">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/JDC.sol" startline="30" endline="31" pcid="4334">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="58" endline="59" pcid="2823">
    function name() public view returns (string);
    function symbol() public view returns (string);
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="50" endline="51" pcid="4782">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="72" endline="74" pcid="3974">
    function totalSupply() public view returns (uint256);

    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="11" endline="13" pcid="4092">
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="59" endline="60" pcid="2824">
    function symbol() public view returns (string);
    function decimals() public view returns (uint8);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="687" endline="688" pcid="936">
    function getFactoryAddress() external view returns(address);
}
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="46" endline="47" pcid="4356">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="451" endline="456" pcid="4763">
    function totalSupply()
        external
        view
        returns (uint256);

    function balanceOf(address _owner)
</source>
<source file="systems/smart_contracts/MBA.sol" startline="56" endline="57" pcid="4702">
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="8" endline="9" pcid="4638">
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/magesh.sol" startline="339" endline="341" pcid="4635">
  function price() external view returns (uint256);

}
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="100" endline="101" pcid="4382">
    function totalSupply() public view returns (uint256);
    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="60" endline="61" pcid="2825">
    function decimals() public view returns (uint8);
    function totalSupply() public view returns (uint256);
</source>
<source file="systems/smart_contracts/magesh.sol" startline="81" endline="83" pcid="4615">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MAdvcedWoken.sol" startline="15" endline="17" pcid="4590">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="127" endline="132" pcid="4420">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="42" endline="43" pcid="1299">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="95" endline="100" pcid="945">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/LuckyAdvcedWoken.sol" startline="15" endline="17" pcid="4551">
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="121" endline="126" pcid="4031">
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="760" endline="761" pcid="4463">
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="61" endline="62" pcid="2826">
    function totalSupply() public view returns (uint256);
    function balanceOf(address _holder) public view returns (uint256);
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="45" endline="46" pcid="1975">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/LBBT.sol" startline="40" endline="41" pcid="4536">
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="42" endline="43" pcid="1245">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="50" endline="51" pcid="4514">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="9" endline="10" pcid="4475">
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
</source>
</class>

<class classid="2" nclones="165" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="12" endline="14" pcid="5">
    function balanceOf(address _holder) public view returns (uint256);

    function transfer(address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="132" endline="141" pcid="4421">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="101" endline="102" pcid="4383">
    function balanceOf(address who) public view returns (uint256);
    function allowance(address owner, address spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/LBBT.sol" startline="41" endline="42" pcid="4537">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="126" endline="135" pcid="4032">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/LuckyAdvcedWoken.sol" startline="17" endline="19" pcid="4552">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="13" endline="15" pcid="4093">
  function balanceOf(address who) external view returns (uint256);

  function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/MAdvcedWoken.sol" startline="17" endline="19" pcid="4591">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/magesh.sol" startline="83" endline="85" pcid="4616">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="192" endline="193" pcid="3995">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ITVR.sol" startline="19" endline="20" pcid="4325">
  function balanceOf(address who) public view returns (uint256);
}
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="9" endline="10" pcid="4639">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MBA.sol" startline="57" endline="58" pcid="4703">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="456" endline="461" pcid="4764">
    function balanceOf(address _owner)
        external
        view
        returns (uint256);

    function allowance(address _owner, address _spender)
</source>
<source file="systems/smart_contracts/BountyBoard.sol" startline="115" endline="116" pcid="1492">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="74" endline="76" pcid="3975">
    function balanceOf(address who) public view returns (uint256);

    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="11" endline="13" pcid="2297">
  function balanceOf(address who) external view returns (uint256);

  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="14" endline="22" pcid="4800">
    function proxyPayment(address _owner) external payable returns(bool);

    /// @notice Notifies the controller about a token transfer allowing the
    ///  controller to react if desired
    /// @param _from The origin of the transfer
    /// @param _to The destination of the transfer
    /// @param _amount The amount of the transfer
    /// @return False if the controller does not authorize the transfer
    function onTransfer(address _from, address _to, uint _amount) external returns(bool);
</source>
<source file="systems/smart_contracts/DNP.sol" startline="18" endline="19" pcid="2782">
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="66" endline="67" pcid="4836">
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="100" endline="109" pcid="2459">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="83" endline="85" pcid="4928">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="53" endline="54" pcid="4954">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="59" endline="60" pcid="4956">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="71" endline="72" pcid="4299">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="9" endline="10" pcid="3913">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="772" endline="773" pcid="3878">
    function balanceOf(address owner) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="56" endline="57" pcid="5088">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="266" endline="275" pcid="5157">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/MultiSendErc20.sol" startline="69" endline="70" pcid="5204">
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="251" endline="260" pcid="3805">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/NaorisToken.sol" startline="61" endline="62" pcid="5282">
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="14" endline="15" pcid="5296">
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="149" endline="150" pcid="5344">
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="164" endline="165" pcid="5349">
    function reservedOf(address account) external view returns (uint256);
}
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="168" endline="177" pcid="5417">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/NSTTeamLock.sol" startline="19" endline="20" pcid="5455">
    function balanceOf(address owner) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="164" endline="165" pcid="5519">
  function getAuthorizationStatus(address node) external view returns (bool);
  function setFulfillmentPermission(address node, bool allowed) external;
</source>
<source file="systems/smart_contracts/PDataToSHFund.sol" startline="19" endline="20" pcid="5629">
  function balanceOf(address who) public view returns (uint256);
}
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="315" endline="317" pcid="5686">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/PokaToken.sol" startline="16" endline="18" pcid="5729">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/FMT.sol" startline="11" endline="12" pcid="3646">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="20" endline="21" pcid="5744">
  function balanceOf(address _who) public view returns (uint256);
  function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="16" endline="25" pcid="5770">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="80" endline="82" pcid="5838">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="332" endline="334" pcid="5885">
    function balanceOf(address owner) public view returns (uint);

    function allowance(address owner, address spender) public view returns (uint);
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="22" endline="31" pcid="5903">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/RaffleTicket.sol" startline="150" endline="159" pcid="5955">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="11" endline="12" pcid="5985">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="100" endline="109" pcid="6018">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="16" endline="17" pcid="6068">
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="251" endline="253" pcid="3565">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="65" endline="66" pcid="4297">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="88" endline="90" pcid="4235">
  function balanceOf(address who) external view returns (uint256);

  function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/RETC.sol" startline="33" endline="34" pcid="6178">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="9" endline="10" pcid="6196">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="56" endline="57" pcid="3518">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="50" endline="51" pcid="3516">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/SBC.sol" startline="291" endline="293" pcid="6333">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="25" endline="27" pcid="6409">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="197" endline="198" pcid="3444">
    function balanceOf(address owner) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/SellableToken.sol" startline="36" endline="37" pcid="6459">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="57" endline="58" pcid="6480">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="63" endline="64" pcid="6482">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="37" endline="38" pcid="6516">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="54" endline="55" pcid="6546">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="60" endline="61" pcid="6548">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="422" endline="423" pcid="6614">
	function balanceOf(address who) public view returns (uint256);
	function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="59" endline="60" pcid="6678">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="65" endline="66" pcid="6680">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="181" endline="183" pcid="6725">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/SuperMarket.sol" startline="16" endline="18" pcid="6757">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="108" endline="109" pcid="6777">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2681" endline="2682" pcid="6931">
    function balanceOf(address account) public view returns (uint);
    function appendVestingEntry(address account, uint quantity) public;
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="76" endline="77" pcid="6980">
    function balanceOf(address owner) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="25" endline="34" pcid="7012">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/tharDex.sol" startline="14" endline="15" pcid="7142">
     function balanceOf(address account) external view returns(uint256);
     function allowance(address _owner, address _spender)external view returns(uint256);
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="193" endline="202" pcid="7178">
    function balanceOf(address account) external view returns (uint256);

    /**
     * Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="66" endline="67" pcid="7225">
    function balanceOf(address _owner) public view returns (uint256);
    function approveForOtherContracts(address _sender, address _spender, uint256 _value) external;
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="234" endline="236" pcid="7283">
  function balanceOf(address who) external view returns (uint256);

  function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/GoldenRings.sol" startline="44" endline="45" pcid="4170">
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="268" endline="270" pcid="7289">
  function balanceOf(address who) external view returns (uint256);

  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="9" endline="10" pcid="7311">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="280" endline="281" pcid="7358">
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="100" endline="109" pcid="946">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/TokenSwap.sol" startline="156" endline="158" pcid="7399">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="68" endline="69" pcid="7408">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="61" endline="62" pcid="7453">
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="62" endline="63" pcid="2827">
    function balanceOf(address _holder) public view returns (uint256);
    function allowance(address _from, address _spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/UGCoin.sol" startline="33" endline="34" pcid="7527">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="30" endline="31" pcid="3162">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/UTC.sol" startline="64" endline="65" pcid="7576">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="36" endline="38" pcid="7639">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="181" endline="183" pcid="7712">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="14" endline="15" pcid="7740">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="191" endline="192" pcid="7788">
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="206" endline="207" pcid="7793">
    function reservedOf(address account) external view returns (uint256);
}
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="214" endline="215" pcid="7794">
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="127" endline="136" pcid="7901">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/Wisdom.sol" startline="82" endline="84" pcid="7983">
  function balanceOf(address who) external view returns (uint256);

  event Transfer(
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="100" endline="101" pcid="1629">
    function balanceOf(address who) public view returns (uint256);
    function allowance(address owner, address spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="31" endline="32" pcid="8010">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="37" endline="38" pcid="8012">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/WTA.sol" startline="62" endline="63" pcid="8046">
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="181" endline="183" pcid="2239">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="13" endline="14" pcid="8069">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="20" endline="29" pcid="300">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/XGP.sol" startline="66" endline="67" pcid="8101">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/XGP.sol" startline="72" endline="73" pcid="8103">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="25" endline="27" pcid="3013">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/BKN.sol" startline="16" endline="17" pcid="1319">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="126" endline="135" pcid="8191">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="24" endline="33" pcid="8225">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/ERC20.sol" startline="86" endline="88" pcid="2982">
  function balanceOf(address who) external view returns (uint256);

  event Transfer(
</source>
<source file="systems/smart_contracts/Comet.sol" startline="9" endline="10" pcid="1913">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="65" endline="66" pcid="21">
    function balanceOf(address _holder) public view returns (uint256);
    function allowance(address _from, address _spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="59" endline="60" pcid="1271">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="60" endline="61" pcid="2951">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="54" endline="55" pcid="2949">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/BFGToken.sol" startline="44" endline="45" pcid="1182">
  function balanceOf(address addr) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="103" endline="104" pcid="38">
    function token_balanceOf(address _owner) public view returns (uint256);
    function token_allowance(address _from, address _spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="32" endline="42" pcid="2329">
    function balanceOf(address _owner) external view returns (uint);


    /** 
     * Send `_value` token to `_to` from `msg.sender`
     * 
     * @param _to The address of the recipient
     * @param _value The amount of token to be transferred
     * @return Whether the transfer was successful or not
     */
    function transfer(address _to, uint _value) external returns (bool);
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="13" endline="14" pcid="2387">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="54" endline="56" pcid="1711">
    function balanceOf(address who) public view returns (uint256);

    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="37" endline="38" pcid="2878">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BDAM.sol" startline="96" endline="97" pcid="1114">
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="31" endline="32" pcid="2876">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="554" endline="555" pcid="134">
    function balanceOf(address _addr)public view returns(uint256);
    function price() view public returns(uint256);
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="22" endline="31" pcid="1745">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/Byte.sol" startline="11" endline="12" pcid="1566">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1246" endline="1248" pcid="1816">
    function withdrawalAllowed(address payee) public view returns (bool);

    function withdraw(address payable payee) public {
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="257" endline="265" pcid="2344">
    function isObserver(address _account) external view returns (bool);


    /**
     * Gets the amount of registered observers
     * 
     * @return The amount of registered observers
     */
    function getObserverCount() external view returns (uint);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="12" endline="14" pcid="2811">
    function balanceOf(address _holder) public view returns (uint256);

    function transfer(address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/CNG.sol" startline="14" endline="16" pcid="1841">
  function balanceOf(address who) external view returns (uint256);

  function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="97" endline="98" pcid="2844">
    function token_balanceOf(address _owner) public view returns (uint256);
    function token_allowance(address _from, address _spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="485" endline="486" pcid="2360">
    function authenticate(address _account) public view returns (bool);
}
</source>
<source file="systems/smart_contracts/BANG.sol" startline="13" endline="14" pcid="1036">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="430" endline="438" pcid="2355">
    function isOwner(address _account) public view returns (bool);


    /**
     * Returns the amount of owners
     *
     * @return The amount of owners
     */
    function getOwnerCount() public view returns (uint);
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="194" endline="195" pcid="1890">
    function balanceOf(address who) constant external returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="309" endline="317" pcid="2349">
    function isOwner(address _account) public view returns (bool);


    /**
     * Gets the current owner
     *
     * @return address The current owner
     */
    function getOwner() public view returns (address);
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="13" endline="14" pcid="2547">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="66" endline="67" pcid="444">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="197" endline="199" pcid="580">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="22" endline="31" pcid="643">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="14" endline="15" pcid="1406">
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="22" endline="31" pcid="516">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="53" endline="54" pcid="1269">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="43" endline="44" pcid="2041">
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="13" endline="14" pcid="1460">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ankara.sol" startline="27" endline="29" pcid="679">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="22" endline="31" pcid="476">
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/Airdropper.sol" startline="21" endline="22" pcid="471">
  function balanceOf(address _owner) public constant returns (uint256 );
  function transfer(address _to, uint256 _value) public ;
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="9" endline="10" pcid="2638">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="16" endline="17" pcid="2091">
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DABANKING_SWAP.sol" startline="18" endline="20" pcid="2270">
    function balanceOf(address who) public view returns (uint256);

    function allowance(address owner, address spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/CST_TOKEN.sol" startline="8" endline="9" pcid="2192">
  function balanceOf(address _owner) external view returns (uint256);
  function allowance(address _owner, address _spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="18" endline="20" pcid="725">
  function balanceOf(address who) external view returns (uint256);

  function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="14" endline="15" pcid="756">
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="22" endline="24" pcid="1363">
    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="61" endline="62" pcid="1432">
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/CRYPTOMZ.sol" startline="85" endline="86" pcid="2178">
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="72" endline="73" pcid="446">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="16" endline="18" pcid="2734">
  function balanceOf(address who) external view returns (uint256);

  function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="67" endline="68" pcid="1434">
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="9" endline="10" pcid="2145">
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
</source>
</class>

<class classid="3" nclones="44" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="14" endline="15" pcid="6">
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transfer(address _to, uint _value, bytes _data) public returns (bool success);
</source>
<source file="systems/smart_contracts/BACD.sol" startline="61" endline="62" pcid="1016">
  function transfer(address _to, uint256 _value) public returns (bool success);
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/AzurToken.sol" startline="43" endline="48" pcid="1003">
  function approve(address _spender, uint256 _value) public returns (bool success);

  /// @param _owner The address of the account owning tokens
  /// @param _spender The address of the account able to transfer the tokens
  /// @return Amount of remaining tokens allowed to spent
  function allowance(address _owner, address _spender) public view returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/BACD.sol" startline="63" endline="64" pcid="1018">
  function approve(address _spender, uint256 _value) public returns (bool success);
  function allowance(address _owner, address _spender) public view returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/AzurToken.sol" startline="30" endline="37" pcid="1001">
  function transfer(address _to, uint256 _value) public returns (bool success);

  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
  /// @param _from The address of the sender
  /// @param _to The address of the recipient
  /// @param _value The amount of token to be transferred
  /// @return Whether the transfer was successful or not
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="67" endline="69" pcid="2831">
    function approve(address _spender, uint256 _value) public returns (bool success);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="65" endline="66" pcid="2829">
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="14" endline="15" pcid="2812">
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transfer(address _to, uint _value, bytes _data) public returns (bool success);
</source>
<source file="systems/smart_contracts/AACD.sol" startline="44" endline="45" pcid="291">
    function transfer(address _to, uint256 _value)public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/GLOLocker.sol" startline="9" endline="10" pcid="4113">
    function transfer(address _to, uint256 _value) public returns (bool success);
}
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="72" endline="73" pcid="4017">
     function transfer(address to, uint256 value) external returns (bool success);
} 
</source>
<source file="systems/smart_contracts/MT.sol" startline="44" endline="45" pcid="5073">
    function transfer(address _to, uint256 _value)public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/MT.sol" startline="46" endline="47" pcid="5075">
    function approve(address _spender, uint256 _value)public returns (bool success);
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/NEM.sol" startline="44" endline="45" pcid="5321">
    function transfer(address _to, uint256 _value)public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/NEM.sol" startline="46" endline="47" pcid="5323">
    function approve(address _spender, uint256 _value)public returns (bool success);
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/NMAI.sol" startline="44" endline="45" pcid="5443">
    function transfer(address _to, uint256 _value)public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/NMAI.sol" startline="46" endline="47" pcid="5445">
    function approve(address _spender, uint256 _value)public returns (bool success);
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="176" endline="177" pcid="5524">
  function approve(address spender, uint256 value) external returns (bool success);
  function balanceOf(address owner) external returns (uint256 balance);
</source>
<source file="systems/smart_contracts/AACD.sol" startline="46" endline="47" pcid="293">
    function approve(address _spender, uint256 _value)public returns (bool success);
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="179" endline="180" pcid="5527">
  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);
  function increaseApproval(address spender, uint256 subtractedValue) external;
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="184" endline="185" pcid="5532">
  function transfer(address to, uint256 value) external returns (bool success);
  function transferAndCall(address to, uint256 value, bytes data) external returns (bool success);
</source>
<source file="systems/smart_contracts/SAS.sol" startline="43" endline="44" pcid="6294">
  function transfer(address _to, uint256 _value)public returns (bool success);
  function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/SAS.sol" startline="46" endline="47" pcid="6296">
  function approve(address _spender, uint256 _value)public returns (bool success);
  function allowance(address _owner, address _spender)public view returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/tharDex.sol" startline="12" endline="13" pcid="7140">
  function transfer(address to, uint256 value) public returns (bool success);
  function transferFrom(address from, address to, uint256 value) public returns (bool success);
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="56" endline="57" pcid="7620">
    function transfer(address to, uint256 tokens) public returns (bool success);
    function approve(address spender, uint256 tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="14" endline="15" pcid="1538">
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="16" endline="17" pcid="1540">
    function approve(address _spender, uint256 _value) public returns (bool success);
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="543" endline="545" pcid="130">
    function withdrawProjectTo(address _to, uint256 _amount)public returns(bool atonce);
    
	function() public payable;
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="57" endline="58" pcid="7621">
    function approve(address spender, uint256 tokens) public returns (bool success);
    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="541" endline="542" pcid="128">
    function withdrawMineralTo(address _to, uint256 _amount) public returns(bool atonce);
    function withdrawProject(uint256 _amount)public returns(bool atonce);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="539" endline="540" pcid="126">
    function withdrawOrderTo(address _to, uint256 _amount) public returns(bool atonce);
    function withdrawMineral(uint256 _amount) public returns(bool atonce);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="537" endline="538" pcid="124">
    function withdrawSharesTo(address _to, uint256 _amount) public returns(bool atonce);
    function withdrawOrder(uint256 _amount) public returns(bool atonce);
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="72" endline="74" pcid="1716">
    function approve(address _spender, uint256 _value) public returns (bool success);

    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/DHF.sol" startline="46" endline="47" pcid="2540">
    function approve(address _spender, uint256 _value)public returns (bool success);
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="68" endline="70" pcid="1714">
    function transfer(address _to, uint256 _value) public returns (bool success);

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/DHF.sol" startline="44" endline="45" pcid="2538">
    function transfer(address _to, uint256 _value)public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/BatchTransfer.sol" startline="9" endline="11" pcid="1084">
    function transfer(address _to, uint256 _value) public returns (bool success);

}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="395" endline="397" pcid="89">
    function transferMSM(address _to, uint256 _msm) public returns (bool success);

    function apply4Redeem(uint256 _ms) public returns(uint256 ms2r);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="68" endline="69" pcid="23">
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="394" endline="395" pcid="88">
    function transferMSI(address _to, uint256 _msi) public returns (bool success);
    function transferMSM(address _to, uint256 _msm) public returns (bool success);
</source>
<source file="systems/smart_contracts/CAC.sol" startline="46" endline="47" pcid="1614">
    function approve(address _spender, uint256 _value)public returns (bool success);
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/CAC.sol" startline="44" endline="45" pcid="1612">
    function transfer(address _to, uint256 _value)public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="70" endline="72" pcid="25">
    function approve(address _spender, uint256 _value) public returns (bool success);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="393" endline="394" pcid="87">
    function transferMS(address _to, uint256 _ms) public returns (bool success);
    function transferMSI(address _to, uint256 _msi) public returns (bool success);
</source>
</class>

<class classid="4" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="15" endline="16" pcid="7">
    function transfer(address _to, uint _value, bytes _data) public returns (bool success);
    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="15" endline="16" pcid="2813">
    function transfer(address _to, uint _value, bytes _data) public returns (bool success);
    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);
</source>
</class>

<class classid="5" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="16" endline="18" pcid="8">
    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);
    
    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="16" endline="18" pcid="2814">
    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);
    
    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);
</source>
</class>

<class classid="6" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="30" endline="31" pcid="9">
    function tokenFallback(address _from, uint _value, bytes _data) public returns(bool);
}
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="29" endline="30" pcid="2815">
    function tokenFallback(address _from, uint _value, bytes _data) public returns(bool);
}
</source>
</class>

<class classid="7" nclones="1970" nlines="3" similarity="75">
<source file="systems/smart_contracts/$martFund.sol" startline="35" endline="37" pcid="10">
    function owner() public pure returns (address) {}

    event OwnerUpdate(address _prevOwner, address _newOwner);
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="398" endline="408" pcid="750">
    function isOwner() public view returns(bool) {
        return msg.sender == _owner;
    }

    /**
    * @dev Allows the current owner to relinquish control of the contract.
    * @notice Renouncing to ownership will leave the contract without an owner.
    * It will not be possible to call the functions with the `onlyOwner`
    * modifier anymore.
    */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="116" endline="124" pcid="5815">
    function totalSupply() public view returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="141" endline="146" pcid="4105">
    function totalSupply() public view returns (uint) {
        return supply;
    }
 
    // Get the token balance for account `tokenOwner`
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/Byte.sol" startline="72" endline="76" pcid="1577">
  function decimals() public view returns(uint8) {
    return _Decimals;
  }
	
  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="499" endline="502" pcid="328">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/Byte.sol" startline="103" endline="107" pcid="1579">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TokenSwap.sol" startline="108" endline="119" pcid="7391">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     * @notice Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="132" endline="140" pcid="4523">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="269" endline="276" pcid="5785">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="580" endline="587" pcid="334">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="393" endline="402" pcid="597">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="78" endline="81" pcid="3205">
    function getTransmuteSource4() public view returns (address) {
    	return _transmuteSource4;
    }
    function getAllowBurnsFrom(address addr) public view returns (bool) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="318" endline="328" pcid="591">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * @notice Renouncing to ownership will leave the contract without an owner.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="246" endline="250" pcid="2672">
    function capReached() public view returns (bool) {
        return weiRaised() >= _cap;
    }

    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="383" endline="390" pcid="749">
    function owner() public view returns(address) {
        return _owner;
    }

    /**
    * @dev Throws if called by any account other than the owner.
    */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/TokenSwap.sol" startline="93" endline="100" pcid="7390">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="176" endline="180" pcid="2859">
    function decimals() public view returns (uint8){
        return operator.token_decimals();
    }
    
    function totalSupply() public view returns (uint256){
</source>
<source file="systems/smart_contracts/GLOLocker.sol" startline="23" endline="27" pcid="4114">
    function balance() public view returns(uint){
        return token.balanceOf(address(this));
    }

    function balanceOf(address addr) public view returns(uint){
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="109" endline="120" pcid="5776">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="71" endline="85" pcid="1543">
    function totalSupply()
        public
        constant
        returns (uint256) {
        return _totalSupply;
    }





    /// @dev Gets account's balance
    /// @param _addr Address of the account
    /// @return Account balance
    function balanceOf(address _addr)
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="277" endline="281" pcid="2674">
    function openingTime() public view returns (uint256) {
        return _openingTime;
    }

    function closingTime() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="242" endline="246" pcid="2671">
    function cap() public view returns (uint256) {
        return _cap;
    }

    function capReached() public view returns (bool) {
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="94" endline="101" pcid="5775">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="180" endline="183" pcid="2860">
    function totalSupply() public view returns (uint256){
        return operator.token_totalSupply();
    }
    function balanceOf(address addr)public view returns(uint256){
</source>
<source file="systems/smart_contracts/Wisdom.sol" startline="110" endline="117" pcid="7984">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  /**
   * @dev See `IERC20.balanceOf`.
   */
  function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="307" endline="319" pcid="5789">
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="434" endline="441" pcid="538">
    function beneficiary() public view returns (address) {
        return _beneficiary;
    }

    /**
     * @return the cliff time of the token vesting.
     */
    function cliff() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Bridge.sol" startline="243" endline="247" pcid="1514">
  function getParentBlockInterval() public view returns (uint256) {
    return parentBlockInterval;
  }

  function setParentBlockInterval(uint256 _parentBlockInterval) public ifAdmin {
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="93" endline="96" pcid="3174">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="515" endline="516" pcid="106">
    function balanceOfMineral() public pure returns(uint256) {}
    function balanceOfProject() public pure returns(uint256) {}
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="293" endline="302" pcid="6091">
  function isFinalizeAgent() public constant returns(bool) {
    return true;
  }

  /** Return true if we can run finalizeCrowdsale() properly.
   *
   * This is a safety check function that doesn't allow crowdsale to begin
   * unless the finalizer has been set up properly.
   */
  function isSane() public constant returns (bool);
</source>
<source file="systems/smart_contracts/magesh.sol" startline="365" endline="371" pcid="4637">
    function price() public view returns (uint256){

      return price_;

    }

}
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="317" endline="321" pcid="2680">
    function finalized() public view returns (bool) {
        return _finalized;
    }

    function finalize() public {
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="106" endline="111" pcid="1310">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="80" endline="84" pcid="1413">
    function totalBurned() public view returns (uint256) {
        return burnedTotalNum_;
    }

    function burn(uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="49" endline="53" pcid="4645">
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="239" endline="246" pcid="8235">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="457" endline="460" pcid="8211">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="432" endline="439" pcid="5167">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/multifund.sol" startline="47" endline="51" pcid="5140">
    function get_id() public view returns(bytes32){
        return wallet_id;
    }

    function () public payable {
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="277" endline="284" pcid="240">
    function getMiningReward() public view returns(uint) {
        //once we get half way thru the coins, only get 1 per block
        //every reward era, the reward amount halves.
        return (2 * 10 ** uint(decimals)).div(2 ** rewardEra);
    }

    //help debug mining software
    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns(bytes32 digesttest) {
</source>
<source file="systems/smart_contracts/CNG.sol" startline="130" endline="139" pcid="1851">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param owner The address to query the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="96" endline="100" pcid="4487">
	function burningrate() public view returns (uint){
        return burning;
    }
	
	function earningrate() public view returns (uint){
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="658" endline="666" pcid="5134">
    function totalEthereumBalance()
        public
        view
        returns(uint)
    {
        return address (this).balance;
    }

    function getTotalBondValue()
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="397" endline="402" pcid="5893">
    function name() public view returns (string){
        // Immutable static call from target contract
        return IERC20(target).name();
    }

    function symbol() public view returns (string){
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="649" endline="658" pcid="5133">
    function getTotalDivsProduced()
        public
        view
        returns(uint)
    {
     
        return totalDivsProduced;
    }

    function totalEthereumBalance()
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="95" endline="99" pcid="2158">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/JDC.sol" startline="98" endline="104" pcid="4343">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }



    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="357" endline="361" pcid="2592">
    function primary() public view returns (address) {
        return _primary;
    }

    function transferPrimary(address recipient) public onlyPrimary {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="449" endline="456" pcid="7919">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="766" endline="778" pcid="7113">
    function getFactoryAddress() external view returns(address) {
        return fAddress;
    }

    /**
     * @dev deploy a new Token contract and transfer ownership to _caller address
     * @param _caller address that will take the ownership of the contract
     * @param _name name of the token to be deployed
     * @param _symbol symbol of the token to be deployed
     * @param _ATAddress address of the corresponding AT contract
     * @return address of the deployed Token contract
     */
    function newToken(address _caller, string calldata _name, string calldata _symbol, address _ATAddress) external onlyFactory returns(address) {
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="367" endline="370" pcid="2352">
    function getOwner() public view returns (address) {
        return owner;
    }
}
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="658" endline="669" pcid="2361">
    function isDeploying() public view returns (bool) {
        return stage == Stages.Deploying;
    }


    /**
     * Returns whether the proposal is deployed. The proposal is deployed 
     * when it receives Ether from the prev proxy contract
     *
     * @return Whether the proposal is deployed
     */
    function isDeployed() public view returns (bool) {
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="176" endline="183" pcid="7277">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="607" endline="615" pcid="552">
    function allOperationsCount() public view returns(uint) {
        return allOperations.length;
    }

    /*
      Internal functions
    */

    function _operationLimitByBeneficiaryIndex(uint8 beneficiaryIndex) internal view returns(bool) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="303" endline="310" pcid="590">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="669" endline="679" pcid="2362">
    function isDeployed() public view returns (bool) {
        return stage == Stages.Deployed;
    }


    /**
     * Returns whether the proposal is executed
     *
     * @return Whether the proposal is deployed
     */
    function isExecuted() public view returns (bool) {
</source>
<source file="systems/smart_contracts/ERC20.sol" startline="114" endline="121" pcid="2983">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  /**
   * @dev See `IERC20.balanceOf`.
   */
  function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/magesh.sol" startline="305" endline="309" pcid="4633">
  function getPrice() public view returns (uint256) {
    return oracle.price();
  }

  function withdraw(uint256 amountCent) public returns (uint256 amountWei){
</source>
<source file="systems/smart_contracts/ERC20Detailed.sol" startline="46" endline="55" pcid="3006">
  function decimals() public view returns(uint8) {
    return _decimals;
  }

  /**
   * @dev mint function, checks if the contract is allowed to mint
   * @param _to the receiver of the tokens when mint funtion is successful
   * @param _value the amount of tokens to mint
   */
  function mint(address _to, uint256 _value) public returns (bool)  {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1470" endline="1479" pcid="3153">
  function _getNewEstateId() internal view returns (uint256) {
    return totalSupply().add(1);
  }

  /**
   * @dev Appends a new LAND id to an Estate updating all related storage
   * @param estateId Estate where the LAND should go
   * @param landId Transfered LAND
   */
  function _pushLandId(uint256 estateId, uint256 landId) internal {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="104" endline="108" pcid="4489">
	function referralrate() public view returns (uint){
        return refrate;
    }
	
	function myfrozentokens() public view returns (uint){
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="321" endline="324" pcid="1383">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="73" endline="80" pcid="1412">
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    /**
     * @dev total number of tokens already burned
     */
    function totalBurned() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="131" endline="142" pcid="6829">
    function unit()
        external
        pure
        returns (uint)
    {
        return UNIT;
    }

    /** 
     * @return Provides an interface to PRECISE_UNIT.
     */
    function preciseUnit()
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="264" endline="271" pcid="6995">
    function decimals() public view returns (uint256) {
        return _decimals;
    }

    /**
     * @return the cap for the token minting.
     */
    function cap() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="721" endline="730" pcid="509">
        function pendingBeneficiary() public view returns (address) {
            return _pendingBeneficiary;
        }

        /**
            * @dev Allows beneficiaries to change beneficiaryShip and set first beneficiary as default
            * @param _newBeneficiaries defines array of addresses of new beneficiaries
            * @param _newHowManyBeneficiariesDecide defines how many beneficiaries can decide
        */
        function transferBeneficiaryShipWithHowMany(address[] memory _newBeneficiaries, uint256 _newHowManyBeneficiariesDecide) public {
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="133" endline="141" pcid="6280">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="72" endline="75" pcid="2157">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="313" endline="320" pcid="2469">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="238" endline="242" pcid="4398">
    function getNowTime() public view returns(uint256) {
      return now;//now
    }

    function showLockState(address _holder) public view returns (bool, uint256, uint256) {
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="271" endline="278" pcid="6996">
    function cap() public view returns (uint256) {
        return _cap;
    }

    /**
     * @dev Total number of tokens in existence.
     */
    function totalSupply() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/UtilityTokenFactory.sol" startline="85" endline="88" pcid="7597">
    function getFundsHolderAddress() public view returns (address) {
        return address(fundsHolder);
    }
}
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="679" endline="687" pcid="2363">
    function isExecuted() public view returns (bool) {
        return stage == Stages.Executed;
    }


    /**
     * Accept eth from the prev proxy while deploying
     */
    function () external payable only_at_stage(Stages.Deploying) {
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="154" endline="158" pcid="4389">
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="132" endline="140" pcid="7842">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="87" endline="91" pcid="5556">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }

    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="278" endline="287" pcid="6997">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return A uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/UtilityTokenFactory.sol" startline="81" endline="85" pcid="7596">
    function getNumOfIssuers() public view returns (uint256) {
        return issuers.length;
    }

    function getFundsHolderAddress() public view returns (address) {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="478" endline="485" pcid="2264">
    function name() public view returns (string) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string) {
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="46" endline="56" pcid="7339">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * @notice Renouncing to ownership will leave the contract without an owner.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="603" endline="607" pcid="551">
    function beneficiariesCount() public view returns(uint) {
        return beneficiaries.length;
    }

    function allOperationsCount() public view returns(uint) {
</source>
<source file="systems/smart_contracts/UtilityTokenFactory.sol" startline="77" endline="81" pcid="7595">
    function getNumOfTokens() public view returns (uint256) {
        return tokens.length;
    }

    function getNumOfIssuers() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1565" endline="1576" pcid="1836">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1550" endline="1557" pcid="1835">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="402" endline="407" pcid="5894">
    function symbol() public view returns (string){
         // Immutable static call from target contract
        return IERC20(target).symbol();
    }

    function decimals() public view returns (uint8){
</source>
<source file="systems/smart_contracts/WTA.sol" startline="103" endline="107" pcid="8054">
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function burn(uint256 amount) public {
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="135" endline="143" pcid="5649">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1406" endline="1413" pcid="1827">
    function goalReached() public view returns (bool) {
        return weiRaised() >= _goal;
    }

    /**
     * @dev Escrow finalization task, called when finalize() is called.
     */
    function _finalization() internal {
</source>
<source file="systems/smart_contracts/Bridge.sol" startline="173" endline="177" pcid="1509">
  function admin() external view returns (address) {
    return _admin();
  }

  function implementation() external view returns (address impl) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1387" endline="1395" pcid="1825">
    function goal() public view returns (uint256) {
        return _goal;
    }

    /**
     * @dev Investors can claim refunds here if crowdsale is unsuccessful.
     * @param refundee Whose refund will be claimed.
     */
    function claimRefund(address payable refundee) public {
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="650" endline="657" pcid="7383">
    function validPurchase() internal view returns (bool) {
        return now >= startTime && now <= endTime;
    }

    /**
     * @dev finalizes crowdsale
     */
    function finalization() internal {
</source>
<source file="systems/smart_contracts/NaorisToken.sol" startline="80" endline="89" pcid="5284">
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    /**
    * @dev transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
    function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="407" endline="417" pcid="5895">
    function decimals() public view returns (uint8){
         // Immutable static call from target contract
        return IERC20(target).decimals();
    }

    // ------------- ERC20 Interface ------------- //

    /**
    * @dev Total number of tokens in existence
    */
    function totalSupply() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="31" endline="38" pcid="7338">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="85" endline="88" pcid="3207">
    function getTotalLocked() public view returns (uint256) {
    	return _totalLocked;
    }
    function getLockedBalance(address addr) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="485" endline="492" pcid="2265">
    function symbol() public view returns (string) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1299" endline="1307" pcid="1819">
    function beneficiary() public view returns (address) {
        return _beneficiary;
    }

    /**
     * @dev Stores funds that may later be refunded.
     * @param refundee The address funds will be sent to if a refund occurs.
     */
    function deposit(address refundee) public payable {
</source>
<source file="systems/smart_contracts/SuperMarket.sol" startline="32" endline="36" pcid="6759">
    function owner() public view returns (address) {
        return _owner;
    }
    
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="333" endline="340" pcid="494">
    function beneficiary() public view returns (address) {
        return _beneficiary;
    }

    /**
     * @return the time when the tokens are released.
     */
    function releaseTime() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1292" endline="1299" pcid="1818">
    function state() public view returns (State) {
        return _state;
    }

    /**
     * @return The beneficiary of the escrow.
     */
    function beneficiary() public view returns (address) {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="142" endline="146" pcid="5102">
    function myTokens() public view returns (uint256) {
        return _FOMOTokenBalances[msg.sender];
    }

    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="745" endline="758" pcid="2141">
  function canUpgrade() public constant returns(bool) {
    return released && super.canUpgrade();
  }

  /**
   * Owner can update token information here.
   *
   * It is often useful to conceal the actual token association, until
   * the token operations, like central issuance or reissuance have been completed.
   *
   * This function allows the token owner to rename the token after the operations
   * have been completed and then point the audience to use the token contract.
   */
  function setTokenInformation(string _name, string _symbol) onlyOwner {
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="45" endline="52" pcid="8074">
  function owner() public view returns (address) {
      return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="738" endline="742" pcid="4873">
  function whitelistedParticipantsLength() public constant returns (uint) {
    return whitelistedParticipants.length;
  }

  function isTierJoined(address addr) public constant returns(bool) {
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="362" endline="365" pcid="2758">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="142" endline="145" pcid="3214">
    function getCurrentPeriod() public view returns (uint256) {
        return _currentPeriod; 
    }
    function getContractStartTime() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="492" endline="495" pcid="6752">
    function decimals() public view returns (uint256) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="700" endline="707" pcid="4458">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="417" endline="427" pcid="5896">
    function totalSupply() public view returns (uint256) {
        // Immutable static call from target contract
        return IERC20(target).totalSupply();
    }

    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="348" endline="355" pcid="2756">
  function name() public view returns(string) {
    return _name;
  }

  /**
   * @return the symbol of the token.
   */
  function symbol() public view returns(string) {
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="112" endline="121" pcid="5304">
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    /**
     * @dev transfer token for a specified address
     * @param _to The address to transfer to.
     * @param _value The amount to be transferred.
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="279" endline="286" pcid="5916">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="734" endline="744" pcid="7935">
    function weiRaised() public view returns (uint256) {
        return _weiRaised;
    }

    /**
     * @dev low level token purchase ***DO NOT OVERRIDE***
     * This function has a non-reentrancy guard, so it shouldn't be called by
     * another `nonReentrant` function.
     * @param beneficiary Recipient of the token purchase
     */
    function buyTokens(address beneficiary) public nonReentrant payable {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1159" endline="1167" pcid="1811">
    function primary() public view returns (address) {
        return _primary;
    }

    /**
     * @dev Transfers contract to a new primary.
     * @param recipient The address of new primary.
     */
    function transferPrimary(address recipient) public onlyPrimary {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1095" endline="1103" pcid="1808">
    function finalized() public view returns (bool) {
        return _finalized;
    }

    /**
     * @dev Must be called after crowdsale ends, to do some extra finalization
     * work. Calls the contract's finalization function.
     */
    function finalize() public {
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="347" endline="351" pcid="748">
    function decimals() public view returns(uint8) {
        return _decimals;
    }

}
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1042" endline="1052" pcid="1805">
    function hasClosed() public view returns (bool) {
        // solhint-disable-next-line not-rely-on-time
        return block.timestamp > _closingTime;
    }

    /**
     * @dev Extend parent behavior requiring to be within contributing period.
     * @param beneficiary Token purchaser
     * @param weiAmount Amount of wei contributed
     */
    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1033" endline="1042" pcid="1804">
    function isOpen() public view returns (bool) {
        // solhint-disable-next-line not-rely-on-time
        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;
    }

    /**
     * @dev Checks whether the period in which the crowdsale is open has already elapsed.
     * @return Whether crowdsale period has elapsed
     */
    function hasClosed() public view returns (bool) {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="230" endline="237" pcid="7022">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1026" endline="1033" pcid="1803">
    function closingTime() public view returns (uint256) {
        return _closingTime;
    }

    /**
     * @return true if the crowdsale is open, false otherwise.
     */
    function isOpen() public view returns (bool) {
</source>
<source file="systems/smart_contracts/customIcoToken.sol" startline="69" endline="73" pcid="2212">
    function totalSupply() public view returns (uint256) {
        return totalSupply;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/KYCRegistry.sol" startline="34" endline="41" pcid="4501">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="34" endline="41" pcid="3430">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/MatchingToken.sol" startline="33" endline="37" pcid="4684">
    function decimals() public view returns (uint256) {
        return _decimals;
    }
    
    function totalSupply() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MatchingToken.sol" startline="37" endline="41" pcid="4685">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    
    function _transfer(address _from, address _to, uint256 _value) internal {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1019" endline="1026" pcid="1802">
    function openingTime() public view returns (uint256) {
        return _openingTime;
    }

    /**
     * @return the crowdsale closing time.
     */
    function closingTime() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Ethertime.sol" startline="376" endline="379" pcid="3315">
    function getOwner() public view returns (address) {
        return _owner;
    }
    function getTotalFee() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="929" endline="938" pcid="1799">
    function capReached() public view returns (bool) {
        return weiRaised() >= _cap;
    }

    /**
     * @dev Extend parent behavior requiring purchase to respect the funding cap.
     * @param beneficiary Token purchaser
     * @param weiAmount Amount of wei contributed
     */
    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="921" endline="929" pcid="1798">
    function cap() public view returns (uint256) {
        return _cap;
    }

    /**
     * @dev Checks whether the cap has been reached.
     * @return Whether the cap was reached
     */
    function capReached() public view returns (bool) {
</source>
<source file="systems/smart_contracts/LBBT.sol" startline="67" endline="71" pcid="4541">
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="794" endline="804" pcid="1789">
    function weiRaised() public view returns (uint256) {
        return _weiRaised;
    }

    /**
     * @dev low level token purchase ***DO NOT OVERRIDE***
     * This function has a non-reentrancy guard, so it shouldn't be called by
     * another `nonReentrant` function.
     * @param beneficiary Recipient of the token purchase
     */
    function buyTokens(address beneficiary) public nonReentrant payable {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="72" endline="75" pcid="3203">
    function getTransmuteSource2() public view returns (address) {
    	return _transmuteSource2;
    }
    function getTransmuteSource3() public view returns (address) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="787" endline="794" pcid="1788">
    function rate() public view returns (uint256) {
        return _rate;
    }

    /**
     * @return the amount of wei raised.
     */
    function weiRaised() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="143" endline="150" pcid="1885">
  function owner() public view returns(address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="773" endline="780" pcid="1786">
    function token() public view returns (IERC20) {
        return _token;
    }

    /**
     * @return the address where funds are collected.
     */
    function wallet() public view returns (address payable) {
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="103" endline="107" pcid="2400">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="281" endline="285" pcid="2675">
    function closingTime() public view returns (uint256) {
        return _closingTime;
    }

    function isOpen() public view returns (bool) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="208" endline="217" pcid="5351">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     *
     * IMPORTANT: Need to run {acceptOwnership} by the new owner.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/MBA.sol" startline="72" endline="81" pcid="4705">
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  /**
  * @dev Transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="227" endline="230" pcid="7351">
    function hasEnded() public view returns (bool) {
        return now > endTime;
    }
}
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="168" endline="172" pcid="2659">
    function token() public view returns (IERC20) {
        return _token;
    }

    function wallet() public view returns (address payable) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="621" endline="625" pcid="6104">
  function areReservedTokensDistributed() public constant returns (bool) {
    return finalizeAgent.reservedTokensAreDistributed();
  }

  function canDistributeReservedTokens() public constant returns(bool) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="142" endline="159" pcid="6830">
    function preciseUnit()
        external
        pure 
        returns (uint)
    {
        return PRECISE_UNIT;
    }

    /**
     * @return The result of multiplying x and y, interpreting the operands as fixed-point
     * decimals.
     * 
     * @dev A unit factor is divided out after the product of x and y is evaluated,
     * so that product must be less than 2**256. As this is an integer division,
     * the internal division always rounds down. This helps save on gas. Rounding
     * is more expensive on gas.
     */
    function multiplyDecimal(uint x, uint y)
</source>
<source file="systems/smart_contracts/WTA.sol" startline="91" endline="95" pcid="8051">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    
    function name() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="297" endline="304" pcid="5357">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="158" endline="168" pcid="1886">
  function isOwner() public view returns(bool) {
    return msg.sender == _owner;
  }

  /**
   * @dev Allows the current owner to relinquish control of the contract.
   * @notice Renouncing to ownership will leave the contract without an owner.
   * It will not be possible to call the functions with the `onlyOwner`
   * modifier anymore.
   */
  function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="133" endline="141" pcid="3609">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="138" endline="142" pcid="5101">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function myTokens() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="123" endline="126" pcid="5100">
    function decimals() public view returns(uint8) {
        return _Tokendecimals;
    }
}
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="256" endline="263" pcid="4040">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="355" endline="362" pcid="2757">
  function symbol() public view returns(string) {
    return _symbol;
  }

  /**
   * @return the number of decimals of the token.
   */
  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="470" endline="476" pcid="6812">
    function getLiquidity() public view returns (uint) {
        return 500000000 * 10 ** uint(_decimals) + businessPoll.totalMine + communityPoll.totalMine + techPoll.totalMine;
    }


    /* 提取矿代币池接口 */
    function _minePoll(Poll storage poll, uint value) private {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="92" endline="96" pcid="4486">
	 function circulatingSupply() public view returns (uint){
        return (supply-allfrozen-balances[kcma]-balances[whitelist]-balances[whitelist2]);
    }
	
	function burningrate() public view returns (uint){
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="93" endline="97" pcid="6209">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="321" endline="325" pcid="2589">
    function finalized() public view returns (bool) {
        return _finalized;
    }

    function finalize() public {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="492" endline="495" pcid="2266">
    function decimals() public view returns (uint256) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/multifind.sol" startline="47" endline="51" pcid="5085">
    function get_id() public view returns(bytes32){
        return wallet_id;
    }

    function () public payable {
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="60" endline="68" pcid="8075">
  function isOwner() public view returns (bool) {
      return msg.sender == _owner;
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="370" endline="374" pcid="2119">
  function canUpgrade() public constant returns(bool) {
     return true;
  }

}
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="69" endline="72" pcid="3202">
    function getTransmuteSource1() public view returns (address) {
		return _transmuteSource1;
    }
    function getTransmuteSource2() public view returns (address) {
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="437" endline="441" pcid="2925">
    function random() private view returns (uint8) {
        return uint8(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender, userCasesCount[msg.sender]))) % 100) + 1;
    }

    modifier notContract(address addr, bool referrer) {
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="401" endline="408" pcid="7247">
    function getHoldersQuantity() public view returns(uint256) {
        return holdersList.length;
    }

    /**
   * @dev Returned total locked slots
   */
    function getSlotsQuantity() public view returns(uint256) {
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="72" endline="75" pcid="6208">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="206" endline="210" pcid="2322">
    function isOwner() public view returns(bool) {
        return msg.sender == _owner;
    }

    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="76" endline="79" pcid="2399">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="896" endline="904" pcid="562">
    function tokenAddress() public view returns (IERC20) {
        return token;
    }

    // MODIFIERS
    /**
    * @dev Allows to perform method by existing beneficiary
    */
    modifier onlyExistingBeneficiary(address _beneficiary) {
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="326" endline="333" pcid="493">
    function token() public view returns (IERC20) {
        return _token;
    }

    /**
     * @return the beneficiary of the tokens.
     */
    function beneficiary() public view returns (address) {
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="227" endline="234" pcid="653">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="153" endline="157" pcid="1635">
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="197" endline="201" pcid="2321">
    function owner() public view returns(address) {
        return _owner;
    }

    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="248" endline="256" pcid="4039">
    function decimals() public view returns (uint8) {
        return _decimals;
    }


    /**
     * @dev See `IERC20.totalSupply`.
     */
    function totalSupply() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="177" endline="181" pcid="2320">
    function decimals() public view returns(uint8) {
        return _decimals;
    }

}
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="137" endline="146" pcid="735">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="613" endline="624" pcid="7211">
    function cap() public view returns (uint256) {
        return _cap;
    }

    /**
     *  See `ERC20Mintable.mint`.
     *
     * Requirements:
     *
     * - `value` must not cause the total supply to go over the cap.
     */
    function _mint(address account, uint256 value) internal {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="293" endline="300" pcid="3032">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="715" endline="726" pcid="4459">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="485" endline="492" pcid="6751">
    function symbol() public view returns (string) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="62" endline="65" pcid="3200">
    function decimals() public pure returns (uint8) {
        return 18;
    }
    function getCreator() public view returns (address) {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="108" endline="111" pcid="4490">
	function myfrozentokens() public view returns (uint){
		return frozen[msg.sender];
	}
	function myBalance() public view returns (uint balance){
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="559" endline="563" pcid="2620">
    function tokenWallet() public view returns (address) {
        return _tokenWallet;
    }

    function remainingTokens() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Comet.sol" startline="72" endline="75" pcid="1925">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="113" endline="117" pcid="7555">
    function totalSupply() public view returns (uint) {
        return _totalSupply  - balances[address(0)];
    }

    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="379" endline="382" pcid="3039">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="81" endline="90" pcid="1336">
    function totalBalance() public view returns (uint256) {
        return _totalBalance;
    }

    /**
    * @dev Gets the balance of specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="242" endline="246" pcid="2112">
  function isUpgradeAgent() public constant returns (bool) {
    return true;
  }

  function upgradeFrom(address _from, uint256 _value) public;
</source>
<source file="systems/smart_contracts/PDataToSHFund.sol" startline="76" endline="85" pcid="5631">
  function getBalance()
    constant
    public
    returns(uint)
  {
    return company_token.balanceOf(this);
  }


  function setOwner(address _owner) 
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="135" endline="144" pcid="2744">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param owner The address to query the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="733" endline="737" pcid="6113">
  function whitelistedParticipantsLength() public constant returns (uint) {
    return whitelistedParticipants.length;
  }

  function isTierJoined(address addr) public constant returns(bool) {
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="119" endline="127" pcid="7886">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="293" endline="297" pcid="2586">
    function hasClosed() public view returns (bool) {
        return block.timestamp > _closingTime;
    }

    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="441" endline="448" pcid="539">
    function cliff() public view returns (uint256) {
        return _cliff;
    }

    /**
     * @return the start time of the token vesting.
     */
    function start() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BlocklogyCertificate.sol" startline="68" endline="79" pcid="1403">
    function getTotalCertificateCount() public view returns (uint256) {
        return certificateDatabase.length;
    }
    
    /// @notice This function will issue the certificate for the multiple courses on nextgen technologies
    /// @param _userId is the unique ID of student
    /// @param _name inputs the name of student
    /// @param _course inputs the course for which the certificate is issued
    /// @param _belt inputs the belt level of each course in integer
    /// @param _percentile inputs the percentage which student scored in the exam
    /// @return certificate number
    function issueCertificate(
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="287" endline="296" pcid="7239">
    function getWithdrawableTokens() public view returns(uint256) {
        return withdrawableTokens;
    }

    /**
    * @dev Withdrawn lost tokens
    * Usage of this method only owner
    * @param _lockSlotId uint256 unique id lockSlot
    */
    function withdrawLostToken(uint256 _lockSlotId) public onlyGovernanceContracts {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="139" endline="142" pcid="3213">
    function getMintAmount() public pure returns (uint256) {
        return MINT_AMOUNT; 
    }
    function getCurrentPeriod() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BlocklogyCertificate.sol" startline="62" endline="68" pcid="1402">
    function viewLatestCertificateNumber() public view returns (uint256) {
        return certificateDatabase.length-1;
    }
    
    /// @notice views the Total certificate issued
    /// @return total certificate issued by Blocklogy
    function getTotalCertificateCount() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="262" endline="267" pcid="237">
    function getChallengeNumber() public view returns(bytes32) {
        return challengeNumber;
    }

    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts
    function getMiningDifficulty() public view returns(uint) {
</source>
<source file="systems/smart_contracts/SuperMarket.sol" startline="41" endline="45" pcid="6760">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }
    
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="609" endline="613" pcid="2623">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="298" endline="307" pcid="4851">
  function isFinalizeAgent() public constant returns(bool) {
    return true;
  }

  /** Return true if we can run finalizeCrowdsale() properly.
   *
   * This is a safety check function that doesn't allow crowdsale to begin
   * unless the finalizer has been set up properly.
   */
  function isSane() public constant returns (bool);
</source>
<source file="systems/smart_contracts/Comet.sol" startline="93" endline="97" pcid="1926">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="774" endline="783" pcid="3104">
  function symbol() external view returns (string) {
    return symbol_;
  }

  /**
   * @dev Returns an URI for a given token ID
   * Throws if the token ID does not exist. May return an empty string.
   * @param _tokenId uint256 ID of the token to query
   */
  function tokenURI(uint256 _tokenId) public view returns (string) {
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="237" endline="241" pcid="1644">
    function getNowTime() public view returns(uint256) {
      return now;
    }

    function showLockState(address _holder) public view returns (bool, uint256, uint256) {
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="500" endline="514" pcid="277">
    function totalSupply() public constant returns (uint) {

        return _totalSupply  - balances[address(0)];

    }



    // ------------------------------------------------------------------------

    // Get the token balance for account `tokenOwner`

    // ------------------------------------------------------------------------

    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="99" endline="106" pcid="7343">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="176" endline="180" pcid="2661">
    function rate() public view returns (uint256) {
        return _rate;
    }

    function weiRaised() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="322" endline="329" pcid="533">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="248" endline="255" pcid="5852">
    function symbol() public view returns(string) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/PokaToken.sol" startline="32" endline="36" pcid="5731">
    function owner() public view returns (address) {
        return _owner;
    }
    
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/RETC.sol" startline="91" endline="94" pcid="6184">
     function nowInSeconds() public view returns (uint256){
        return now;
    }
    function transferOwnership(address newOwner) onlyOwner public {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="289" endline="293" pcid="2585">
    function isOpen() public view returns (bool) {
        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;
    }

    function hasClosed() public view returns (bool) {
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="72" endline="75" pcid="7323">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="513" endline="514" pcid="104">
    function balanceOfShares() public pure returns(uint256) {}
    function balanceOfOrder() public pure returns(uint256) {}
</source>
<source file="systems/smart_contracts/ERC20Detailed.sol" startline="32" endline="39" pcid="3004">
  function name() public view returns(string) {
    return _name;
  }

  /**
   * @return the symbol of the token.
   */
  function symbol() public view returns(string) {
</source>
<source file="systems/smart_contracts/ERC20Detailed.sol" startline="39" endline="46" pcid="3005">
  function symbol() public view returns(string) {
    return _symbol;
  }

  /**
   * @return the number of decimals of the token.
   */
  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/EthNote.sol" startline="21" endline="28" pcid="3350">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="127" endline="135" pcid="409">
    function totalSupply() public view returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="584" endline="591" pcid="926">
    function getWLThresholdBalance() public view returns (uint256) {
        return whitelistThresholdBalance;
    }

    /**
     * @return maxAmount for holder
     */
    function getMaxWLAmount(address _subscriber) external view returns(uint256) {
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="451" endline="455" pcid="272">
     function getMiningDifficulty() public constant returns (uint) {
        return _MAXIMUM_TARGET.div(miningTarget);
    }

    function getMiningTarget() public constant returns (uint) {
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="33" endline="35" pcid="2816">
    function owner() public pure returns (address) {}

    event OwnerUpdate(address _prevOwner, address _newOwner);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="74" endline="76" pcid="2832">
    function operator() public pure returns(ITokenOperator) {}
    //ITokenOperator public operator;
}
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="436" endline="443" pcid="5362">
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev Returns the cap on VOKEN's total supply.
     */
    function cap() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="478" endline="485" pcid="6750">
    function name() public view returns (string) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string) {
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="85" endline="87" pcid="2836">
    function dummy() public pure returns (IDummyToken) {}
    
	function emitEventTransfer(address _from, address _to, uint256 _amount) public;
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="89" endline="98" pcid="7410">
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="106" endline="111" pcid="1232">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="49" endline="60" pcid="941">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="32" endline="39" pcid="4731">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="119" endline="126" pcid="305">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="219" endline="228" pcid="7717">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return An uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="562" endline="565" pcid="5871">
    function _service() public view returns (ComplianceService) {
        return ComplianceService(registry.service());
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="516" endline="517" pcid="107">
    function balanceOfProject() public pure returns(uint256) {}
    function balanceOfQueue() public pure returns(uint256) {}
</source>
<source file="systems/smart_contracts/BCCT.sol" startline="55" endline="62" pcid="1091">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="271" endline="277" pcid="239">
    function getMiningTarget() public view returns(uint) {
        return miningTarget;
    }

    //0.021m coins total
    //reward begins at 2 and is cut in half every reward era (as tokens are mined)
    function getMiningReward() public view returns(uint) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="443" endline="450" pcid="5363">
    function cap() public view returns (uint256) {
        return _cap;
    }

    /**
     * @dev Returns the amount of VOKEN in existence.
     */
    function totalSupply() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="219" endline="228" pcid="6730">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return An uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="450" endline="457" pcid="5364">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Returns the amount of VOKEN owned by `account`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="308" endline="319" pcid="3033">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     * @notice Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/BCCT.sol" startline="280" endline="283" pcid="1107">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/Factory.sol" startline="49" endline="60" pcid="3431">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     * @notice Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="47" endline="58" pcid="4732">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/ankara.sol" startline="179" endline="182" pcid="701">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="106" endline="111" pcid="3421">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="130" endline="138" pcid="4207">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="777" endline="784" pcid="5388">
    function whitelistCounter() public view returns (uint256) {
        return _whitelistCounter;
    }

    /**
     * @dev Returns true if the sign-up for whitelist is allowed.
     */
    function whitelistingMode() public view returns (bool) {
</source>
<source file="systems/smart_contracts/FogCoin.sol" startline="46" endline="55" pcid="3679">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return A uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="93" endline="97" pcid="3926">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="131" endline="138" pcid="5843">
    function owner() public view returns(address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="291" endline="298" pcid="4429">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="285" endline="289" pcid="2584">
    function closingTime() public view returns (uint256) {
        return _closingTime;
    }

    function isOpen() public view returns (bool) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1573" endline="1578" pcid="6167">
  function isSane() public constant returns (bool) {
    return (token.releaseAgent() == address(this));
  }

  //distributes reserved tokens. Should be called before finalization
  function distributeReservedTokens(uint reservedTokensDistributionBatch) public {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="76" endline="79" pcid="2559">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="128" endline="136" pcid="4365">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/DNP.sol" startline="144" endline="153" pcid="2798">
    function totalSupply() public view returns (uint256) 
    {
        return totalSupply_;
    }
    /**
    * @dev transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
    function transfer(address _to, uint256 _value) public running returns (bool) 
</source>
<source file="systems/smart_contracts/Factory.sol" startline="452" endline="459" pcid="3504">
    function getTotalFPContracts() external view returns(uint256) {
        return FPContractsList.length;
    }

    /**
     * @dev get if address is a deployer
     */
    function isFactoryDeployer(address _addr) external view returns(bool) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="281" endline="285" pcid="2583">
    function openingTime() public view returns (uint256) {
        return _openingTime;
    }

    function closingTime() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="1086" endline="1090" pcid="6656">
	function getHowMuchUntilHardCap() public view returns(uint256) {
		return getHowMuchUntilHardCap_(openGroupNumber);
	}

	function addMemberToGroup(address walletAddress, uint256 groupNumber) public onlyOwner returns(bool) {
</source>
<source file="systems/smart_contracts/Discover.sol" startline="186" endline="197" pcid="2768">
    function getDAppsCount() external view returns(uint) {
        return dapps.length;
    }

    /**
     * @notice Support for "approveAndCall".
     * @param _from Who approved.
     * @param _amount Amount being approved, needs to be equal `_amount` or `cost`.
     * @param _token Token being approved, needs to be `SNT`.
     * @param _data Abi encoded data with selector of `register(bytes32,address,bytes32,bytes32)`.
     */
    function receiveApproval(
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="480" endline="487" pcid="7737">
    function name() public view returns (string) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string) {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="918" endline="926" pcid="563">
    function pendingBeneficiary() public view returns (address) {
        return _pendingBeneficiary;
    }

     /**
        * @dev Allows beneficiaries to change beneficiaryShip and set first beneficiary as default
        * @param _newBeneficiaries defines array of addresses of new beneficiaries
    */
    function transferBeneficiaryShip(address[] memory _newBeneficiaries) public {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="784" endline="791" pcid="5389">
    function whitelistingMode() public view returns (bool) {
        return _whitelistingMode;
    }

    /**
     * @dev Returns the referee of an `account`.
     */
    function whitelistReferee(address account) public view returns (address) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="945" endline="949" pcid="6641">
	function getWithdrawableAmount() public view returns(uint256) {
		return withdrawableBalances[msg.sender];
	}

	function withdraw() public returns (bool) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="551" endline="555" pcid="3741">
function investorsNumber() public view returns(uint) {
return m_investors.size();
}

function balanceETH() public view returns(uint) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="899" endline="908" pcid="5397">
    function safeMode() public view returns (bool) {
        return _safeMode;
    }

    /**
     * @dev Disable/enable non-whitelist transaction.
     *
     * Can only be called by the current owner.
     */
    function setSafeMode(bool value) public onlyOwner {
</source>
<source file="systems/smart_contracts/DNP.sol" startline="137" endline="144" pcid="2797">
    function isStopped() public view returns(bool)
    {
        return stopped;
    }
    /**
    * @dev total number of tokens in existence
    */
    function totalSupply() public view returns (uint256) 
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="555" endline="561" pcid="3742">
function balanceETH() public view returns(uint) {
return address(this).balance;
}



function advertisingPercent() public view returns(uint numerator, uint denominator) {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="487" endline="494" pcid="7738">
    function symbol() public view returns (string) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DGC.sol" startline="133" endline="141" pcid="2524">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="180" endline="184" pcid="5674">
  function admin() external view returns (address) {
    return _admin();
  }

  function implementation() external view returns (address impl) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="494" endline="503" pcid="6619">
	function totalSupply() public view returns (uint256) {
		return totalSupply_;
	}

	/**
	* @dev Transfer token for a specified address
	* @param _to The address to transfer to.
	* @param _value The amount to be transferred.
	*/
	function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="235" endline="242" pcid="1755">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="494" endline="497" pcid="7739">
    function decimals() public view returns (uint256) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="119" endline="127" pcid="6586">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="156" endline="167" pcid="807">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     * @notice Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/Ethertime.sol" startline="379" endline="382" pcid="3316">
    function getTotalFee() public view returns (uint256) {
        return _totalFee;
    }
    function getAdmins() public view returns (address[] memory) {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="442" endline="449" pcid="7035">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/BEX.sol" startline="24" endline="28" pcid="1165">
	function totalSupply()public constant returns (uint) {
		return totalBEXSupply;
	}
	
	function balanceOf(address tokenOwner)public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="135" endline="144" pcid="4240">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param owner The address to query the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="977" endline="987" pcid="5044">
    function totalSupply() public view returns (uint256) {
        return _allTokens.length;
    }

    /**
     * @dev Gets the token ID at a given index of all the tokens in this contract
     * Reverts if the index is greater or equal to the total number of tokens.
     * @param index uint256 representing the index to be accessed of the tokens list
     * @return uint256 token ID at the given index of the tokens list
     */
    function tokenByIndex(uint256 index) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="131" endline="139" pcid="5619">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/magesh.sol" startline="115" endline="124" pcid="4618">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return A uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1059" endline="1063" pcid="6138">
  function isUpgradeAgent() public constant returns (bool) {
    return true;
  }

  function upgradeFrom(address _from, uint256 _value) public;
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="68" endline="77" pcid="6521">
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="267" endline="274" pcid="5422">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="445" endline="452" pcid="3503">
    function getTotalTContracts() external view returns(uint256) {
        return TContractsList.length;
    }

    /**
     * @dev get FP contracts number
     */
    function getTotalFPContracts() external view returns(uint256) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="250" endline="254" pcid="2581">
    function capReached() public view returns (bool) {
        return weiRaised() >= _cap;
    }

    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="110" endline="118" pcid="2431">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="457" endline="468" pcid="7036">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     * @notice Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/ParkingResolver.sol" startline="48" endline="52" pcid="5596">
    function owner() external view returns (address) {
        return _owner;
    }

    function setOwner(address owner) external {
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="502" endline="505" pcid="5437">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/UTC.sol" startline="85" endline="94" pcid="7578">
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="519" endline="522" pcid="5931">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/RaffleTicket.sol" startline="247" endline="254" pcid="5960">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="141" endline="148" pcid="3761">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="74" endline="77" pcid="5997">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="156" endline="167" pcid="3762">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     * @notice Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="132" endline="140" pcid="4791">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="453" endline="456" pcid="7196">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="349" endline="356" pcid="3810">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="555" endline="559" pcid="2711">
    function tokenWallet() public view returns (address) {
        return _tokenWallet;
    }

    function remainingTokens() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="374" endline="378" pcid="2685">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="246" endline="250" pcid="2580">
    function cap() public view returns (uint256) {
        return _cap;
    }

    function capReached() public view returns (bool) {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="100" endline="104" pcid="4488">
	function earningrate() public view returns (uint){
        return dailyminingpercent;
    }
	
	function referralrate() public view returns (uint){
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="95" endline="99" pcid="5998">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="353" endline="357" pcid="2683">
    function primary() public view returns (address) {
        return _primary;
    }

    function transferPrimary(address recipient) public onlyPrimary {
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="300" endline="308" pcid="243">
    function totalSupply() public view returns(uint) {
        return _totalSupply - balances[address(0)];
    }

    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------

    function balanceOf(address tokenOwner) public view returns(uint balance) {
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="133" endline="142" pcid="7646">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return A uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="482" endline="485" pcid="3584">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="578" endline="587" pcid="3273">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Returns whether the specified token exists
     * @param tokenId uint256 ID of the token to query the existence of
     * @return whether the token exists
     */
    function exists(uint256 tokenId) external view returns (bool) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="559" endline="563" pcid="2712">
    function remainingTokens() public view returns (uint256) {
        return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));
    }

    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/FMT.sol" startline="33" endline="42" pcid="3651">
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="267" endline="271" pcid="238">
    function getMiningDifficulty() public view returns(uint) {
        return _MAXIMUM_TARGET.div(miningTarget);
    }

    function getMiningTarget() public view returns(uint) {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="438" endline="445" pcid="3502">
    function getTotalATContracts() external view returns(uint256) {
        return ATContractsList.length;
    }

    /**
     * @dev get T contracts number
     */
    function getTotalTContracts() external view returns(uint256) {
</source>
<source file="systems/smart_contracts/CDS.sol" startline="167" endline="176" pcid="1661">
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="65" endline="69" pcid="3201">
    function getCreator() public view returns (address) {
    	return _creator;
    }

    function getTransmuteSource1() public view returns (address) {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="602" endline="609" pcid="4450">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="80" endline="89" pcid="7455">
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    /**
    * @dev transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
    function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="97" endline="101" pcid="1473">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="271" endline="278" pcid="7183">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     *  See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="172" endline="176" pcid="2568">
    function token() public view returns (IERC20) {
        return _token;
    }

    function wallet() public view returns (address payable) {
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="135" endline="143" pcid="7626">
    function totalSupply() public constant returns (uint256) {
        return _totalSupply;
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="766" endline="774" pcid="3103">
  function name() external view returns (string) {
    return name_;
  }

  /**
   * @dev Gets the token symbol
   * @return string representing the token symbol
   */
  function symbol() external view returns (string) {
</source>
<source file="systems/smart_contracts/BFGToken.sol" startline="76" endline="80" pcid="1187">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address addr) public view returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="605" endline="609" pcid="2714">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="309" endline="322" pcid="4814">
    function totalSupply() public constant returns (uint) {
        return totalSupplyAt(block.number);
    }


////////////////
// Query balance and totalSupply in History
////////////////

    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`
    /// @param _owner The address from which the balance will be retrieved
    /// @param _blockNumber The block number when the balance is queried
    /// @return The balance at `_blockNumber`
    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1517" endline="1530" pcid="6163">
  function canUpgrade() public constant returns(bool) {
    return released && super.canUpgrade();
  }

  /**
   * Owner can update token information here.
   *
   * It is often useful to conceal the actual token association, until
   * the token operations, like central issuance or reissuance have been completed.
   *
   * This function allows the token owner to rename the token after the operations
   * have been completed and then point the audience to use the token contract.
   */
  function setTokenInformation(string _name, string _symbol) onlyOwner {
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="446" endline="451" pcid="271">
    function getChallengeNumber() public constant returns (bytes32) {
        return challengeNumber;
    }

    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts
     function getMiningDifficulty() public constant returns (uint) {
</source>
<source file="systems/smart_contracts/VENT.sol" startline="98" endline="104" pcid="7686">
        function totalSupply() public view returns (uint){
        return _totalSupply * 10**uint(decimals);
        }
        // ------------------------------------------------------------------------
        // Get the token balance for account `tokenOwner`
        // ------------------------------------------------------------------------
        function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="72" endline="75" pcid="2650">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="76" endline="79" pcid="1472">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="216" endline="223" pcid="3251">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="598" endline="606" pcid="928">
    function getWLLength() external view returns(uint256) {
        return whitelistLength;
    }

    /**
     * @dev set new anonymous threshold
     * @param _newThreshold The new anonymous threshold.
     */
    function setNewThreshold(uint256 _newThreshold) external onlyWLManagers {
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="174" endline="181" pcid="6989">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="131" endline="139" pcid="715">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="114" endline="118" pcid="3175">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="106" endline="113" pcid="6985">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="626" endline="630" pcid="4864">
  function areReservedTokensDistributed() public constant returns (bool) {
    return finalizeAgent.reservedTokensAreDistributed();
  }

  function canDistributeReservedTokens() public constant returns(bool) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="389" endline="396" pcid="7806">
    function vokens() public view returns (uint256) {
        return _vokens;
    }

    /**
     * @dev Returns the shareholders counter on `pageNumber`.
     */
    function counter(uint256 pageNumber) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="241" endline="248" pcid="5851">
    function name() public view returns(string) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns(string) {
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="131" endline="139" pcid="6255">
	function totalSupply() public view returns (uint) {
		return _totalSupply.sub(balances[address(0)]);
	}


	// ------------------------------------------------------------------------
	// Stop Trade
	// ------------------------------------------------------------------------
	function stopTrade() public onlyOwner {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="514" endline="515" pcid="105">
    function balanceOfOrder() public pure returns(uint256) {}
    function balanceOfMineral() public pure returns(uint256) {}
</source>
<source file="systems/smart_contracts/CGT.sol" startline="133" endline="141" pcid="1694">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/FlatPricingExt.sol" startline="75" endline="83" pcid="3632">
  function isPricingStrategy() public constant returns (bool) {
    return true;
  }

  /** Self check if all references are correctly set.
   *
   * Checks that pricing strategy matches crowdsale parameters.
   */
  function isSane(address crowdsale) public constant returns (bool) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="180" endline="184" pcid="2570">
    function rate() public view returns (uint256) {
        return _rate;
    }

    function weiRaised() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="337" endline="348" pcid="534">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/BANG.sol" startline="76" endline="79" pcid="1048">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="593" endline="596" pcid="8259">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="378" endline="382" pcid="2594">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="75" endline="78" pcid="3204">
    function getTransmuteSource3() public view returns (address) {
    	return _transmuteSource3;
    }
    function getTransmuteSource4() public view returns (address) {
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="223" endline="230" pcid="8196">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="464" endline="475" pcid="7920">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="810" endline="820" pcid="3107">
  function totalSupply() public view returns (uint256) {
    return allTokens.length;
  }

  /**
   * @dev Gets the token ID at a given index of all the tokens in this contract
   * Reverts if the index is greater or equal to the total number of tokens
   * @param _index uint256 representing the index to be accessed of the tokens list
   * @return uint256 token ID at the given index of the tokens list
   */
  function tokenByIndex(uint256 _index) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="245" endline="248" pcid="4428">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="78" endline="80" pcid="26">
    function operator() public pure returns(ITokenOperator) {}
    //ITokenOperator public operator;
}
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="727" endline="734" pcid="7934">
    function rate() public view returns (uint256) {
        return _rate;
    }

    /**
     * @return the amount of wei raised.
     */
    function weiRaised() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="250" endline="254" pcid="5679">
  function getParentBlockInterval() public view returns (uint256) {
    return parentBlockInterval;
  }

  function setParentBlockInterval(uint256 _parentBlockInterval) public ifAdmin {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="141" endline="148" pcid="806">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="34" endline="41" pcid="6012">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="585" endline="587" pcid="147">
	function formula() public pure returns(IFormula){}
	
    function dequeueOrder(uint256 gaslimit, bool force) public returns(uint256 dealt);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="890" endline="898" pcid="3883">
    function getFactoryDeployIndex() public view returns(uint) {
        return factoryDeployIndex;
    }

    /**
     * @dev find if a member is inserted
     * @return bool for success
     */
    function isMemberInserted(address memberWallet) public view returns(bool) {
</source>
<source file="systems/smart_contracts/BANG.sol" startline="97" endline="101" pcid="1049">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="306" endline="314" pcid="5760">
    function totalSupply()
        public
        view
        returns (uint256)
    {
        return denormalize(totalSupply_);
    }

    function balanceOf(
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="207" endline="214" pcid="3561">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="716" endline="724" pcid="938">
    function getFactoryAddress() external view returns(address) {
        return fAddress;
    }

    /**
     * @dev deployment of a new AdminTools contract
     * @return address of the deployed AdminTools contract
     */
    function newAdminTools(uint256 _whitelistThresholdBalance) external onlyFactory returns(address) {
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="422" endline="430" pcid="500">
    function allOperationsCount() public view returns(uint) {
        return allOperations.length;
    }

    /*
      Internal functions
    */

    function _operationLimitByBeneficiaryIndex(uint8 beneficiaryIndex) internal view returns(bool) {
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="170" endline="173" pcid="2857">
    function name() public view returns (string){
        return operator.token_name();
    }
    function symbol() public view returns (string){
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="463" endline="466" pcid="668">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="261" endline="270" pcid="5854">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="245" endline="252" pcid="6326">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="455" endline="462" pcid="541">
    function duration() public view returns (uint256) {
        return _duration;
    }

    /**
     * @return true if the vesting is revocable.
     */
    function revocable() public view returns (bool) {
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="95" endline="99" pcid="3954">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }

    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="428" endline="435" pcid="1392">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="258" endline="269" pcid="7798">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     *
     * Need to run {acceptOwnership} by the new owner.
     *
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="313" endline="320" pcid="956">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CommunityChest.sol" startline="31" endline="35" pcid="1942">
    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }
    
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="742" endline="745" pcid="2498">
    function getTrackerBalance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="91" endline="93" pcid="30">
    function dummy() public pure returns (IDummyToken) {}
    
	function emitEventTransfer(address _from, address _to, uint256 _amount) public;
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="898" endline="907" pcid="6127">
  function isCrowdsale() public constant returns (bool) {
    return true;
  }

  //
  // Modifiers
  //

  /** Modified allowing execution only if the crowdsale is currently running.  */
  modifier inState(State state) {
</source>
<source file="systems/smart_contracts/ComplianceRegistry.sol" startline="27" endline="34" pcid="1943">
    function owner() public view returns(address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="145" endline="148" pcid="3215">
    function getContractStartTime() public view returns (uint256) {
        return _contractStartTime; 
    }
    function getCumulTokenPerEth(uint256 period) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="563" endline="567" pcid="2621">
    function remainingTokens() public view returns (uint256) {
        return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));
    }

    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="312" endline="321" pcid="6335">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return An uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="72" endline="75" pcid="3925">
  function decimals() public view returns(uint8) {
    return _decimals;
  }
}
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="418" endline="422" pcid="499">
    function beneficiariesCount() public view returns(uint) {
        return beneficiaries.length;
    }

    function allOperationsCount() public view returns(uint) {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="431" endline="438" pcid="3501">
    function getTotalDeployer() external view returns(uint256) {
        return deployerList.length;
    }

    /**
     * @dev get AT contracts number
     */
    function getTotalATContracts() external view returns(uint256) {
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="132" endline="140" pcid="8140">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="49" endline="60" pcid="6013">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="583" endline="584" pcid="145">
	function data() public pure returns(IData){}
	function reserve() public pure returns(IReserve){}
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="1166" endline="1184" pcid="3910">
    function getFactoryAddress() external view returns(address) {
        return fAddress;
    }

    /**
     * @dev deployment of a new Funding Panel contract
     * @param _caller address that will take the ownership of the contract
     * @param _setDocURL URL of the document describing the Panel
     * @param _setDocHash hash of the document describing the Panel
     * @param _exchRateSeed exchange rate between SEED tokens received and tokens given to the SEED sender (multiply by 10^_exchRateDecim)
     * @param _exchRateOnTop exchange rate between SEED token received and tokens minted on top (multiply by 10^_exchRateDecim)
     * @param _seedTokenAddress address of SEED token contract
     * @param _seedMaxSupply max supply of SEED tokens accepted by this contract
     * @param _tokenAddress address of the corresponding Token contract
     * @param _ATAddress address of the corresponding AdminTools contract
     * @param newLength number of this contract in the corresponding array in the Factory contract
     * @return address of the deployed Token contract
     */
    function newFundingPanel(address _caller, string calldata _setDocURL, bytes32 _setDocHash, uint256 _exchRateSeed, uint256 _exchRateOnTop,
</source>
<source file="systems/smart_contracts/BKN.sol" startline="55" endline="58" pcid="1324">
    function totalSupply() public constant returns (uint256) {
        return totalSupply;
    }
    function balanceOf(address src) public constant returns (uint256) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2294" endline="2306" pcid="6904">
    function lastDebtLedgerEntry()
        external
        view
        returns (uint)
    {
        return debtLedger[debtLedger.length - 1];
    }

    /**
     * @notice Query whether an account has issued and has an outstanding debt balance
     * @param account The address to query for
     */
    function hasIssued(address account)
</source>
<source file="systems/smart_contracts/ComplianceRegistry.sol" startline="42" endline="52" pcid="1944">
    function isOwner() public view returns(bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * @notice Renouncing to ownership will leave the contract without an owner.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="215" endline="224" pcid="8084">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  /**
   * @dev Gets the balance of the specified address.
   * @param _owner The address to query the the balance of.
   * @return An uint256 representing the amount owned by the passed address.
   */
  function balanceOf(address _owner) public view returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2283" endline="2294" pcid="6903">
    function debtLedgerLength()
        external
        view
        returns (uint)
    {
        return debtLedger.length;
    }

    /**
     * @notice Retrieve the most recent entry from the debt ledger
     */
    function lastDebtLedgerEntry()
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="328" endline="331" pcid="7661">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="375" endline="382" pcid="7804">
    function page() public view returns (uint256) {
        return _page;
    }

    /**
     * @dev Returns the amount of deposited Ether.
     */
    function ethers() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="512" endline="513" pcid="103">
    function balanceOfColdWallet() public pure returns(uint256) {}
    function balanceOfShares() public pure returns(uint256) {}
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="219" endline="228" pcid="2244">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return An uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="1026" endline="1033" pcid="3896">
    function getTokenAddress() external view returns (address) {
        return tokenAddress;
    }

    /**
     * @return get the operator members URL and hash
     */
    function getOwnerData() external view returns (string memory, bytes32) {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="313" endline="320" pcid="6028">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="241" endline="249" pcid="4846">
  function isPricingStrategy() public constant returns (bool) {
    return true;
  }

  /** Self check if all references are correctly set.
   *
   * Checks that pricing strategy matches crowdsale parameters.
   */
  function isSane(address crowdsale) public constant returns (bool) {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="84" endline="93" pcid="3017">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return A uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ICOImplementation.sol" startline="172" endline="182" pcid="4276">
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }


    /**
    * @dev Transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="132" endline="140" pcid="1208">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="129" endline="137" pcid="1962">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="382" endline="389" pcid="7805">
    function ethers() public view returns (uint256) {
        return _ethers;
    }

    /**
     * @dev Returns the amount of VOKEN holding by all shareholders.
     */
    function vokens() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="365" endline="371" pcid="4949">
    function price() public view returns (uint256){

      return price_;

    }

}
</source>
<source file="systems/smart_contracts/PokaToken.sol" startline="41" endline="45" pcid="5732">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }
    
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="305" endline="309" pcid="4945">
  function getPrice() public view returns (uint256) {
    return oracle.price();
  }

  function withdraw(uint256 amountCent) public returns (uint256 amountWei){
</source>
<source file="systems/smart_contracts/SBC.sol" startline="502" endline="505" pcid="6350">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1187" endline="1191" pcid="6145">
  function canUpgrade() public constant returns(bool) {
     return true;
  }

}
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="101" endline="105" pcid="2050">
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="72" endline="76" pcid="2307">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="129" endline="137" pcid="1984">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="448" endline="455" pcid="540">
    function start() public view returns (uint256) {
        return _start;
    }

    /**
     * @return the duration of the token vesting.
     */
    function duration() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="349" endline="358" pcid="5688">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="517" endline="518" pcid="108">
    function balanceOfQueue() public pure returns(uint256) {}
    function headOfQueue() public pure returns(uint256){}
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="119" endline="127" pcid="7864">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="115" endline="124" pcid="4930">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param owner The address to query the balance of.
     * @return A uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1213" endline="1217" pcid="4911">
  function isCrowdsaleFull() public constant returns (bool) {
    return tokensSold >= maximumSellableTokens;
  }

  function setMaximumSellableTokens(uint tokens) public onlyOwner {
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="463" endline="473" pcid="274">
    function getMiningReward() public constant returns (uint) {
        //once we get half way thru the coins, only get 25 per block

         //every reward era, the reward amount halves.

         return (50 * 10**uint(decimals) ).div( 2**rewardEra ) ;

    }

    //help debug mining software
    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="167" endline="170" pcid="8174">
    function getWhitelistRule() external view returns (byte){
        return listRule;
    }
}
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="627" endline="634" pcid="3838">
    function decimals() external view returns (uint8) {
        return _decimals;
    }

    /**
     * @return true if the contract is paused, false otherwise.
     */
    function paused() external view returns (bool) {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="634" endline="641" pcid="3839">
    function paused() external view returns (bool) {
        return _paused;
    }

    /**
     * @dev called by the owner to pause, triggers stopped state
     */
    function pause() external onlyOwner whenNotPaused {
</source>
<source file="systems/smart_contracts/GNB.sol" startline="164" endline="171" pcid="4131">
    function now_() public constant returns (uint){
        return now;
    }

    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function totalSupply() public constant returns (uint) {
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="191" endline="202" pcid="7278">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     * @notice Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="624" endline="631" pcid="977">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="125" endline="134" pcid="1370">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="486" endline="493" pcid="7197">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     *  Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/RubyToken.sol" startline="37" endline="41" pcid="6226">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    
    function _transfer(address _from, address _to, uint256 _value) internal {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="935" endline="942" pcid="3886">
    function getMembersNumber() external view returns (uint) {
        return membersList.length;
    }

    /**
     * @dev only operator memebers can enable a member
     */
    function enableMember(address _memberAddress) external onlyFundingOperators {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="551" endline="553" pcid="132">
    function reserve() public pure returns(IReserve) { }

    function totalSupply() public view returns (uint256);
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="462" endline="469" pcid="542">
    function revocable() public view returns (bool) {
        return _revocable;
    }

    /**
     * @return the amount of the token released.
     */
    function released(address token) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="355" endline="362" pcid="7662">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/ITVR.sol" startline="76" endline="85" pcid="4327">
  function getBalance()
    constant
    public
    returns(uint)
  {
    return company_token.balanceOf(this);
  }


  function setOwner(address _owner) 
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="34" endline="41" pcid="940">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/EthNote.sol" startline="36" endline="47" pcid="3351">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="518" endline="519" pcid="109">
    function headOfQueue() public pure returns(uint256){}
    function tailOfQueue() public view returns(uint256);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="345" endline="349" pcid="885">
    function getMinterAddress() external view returns(address) {
        return _minterAddress;
    }

    function setMinterAddress(address _minter) external onlyOwner returns(address) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="236" endline="244" pcid="6086">
  function isPricingStrategy() public constant returns (bool) {
    return true;
  }

  /** Self check if all references are correctly set.
   *
   * Checks that pricing strategy matches crowdsale parameters.
   */
  function isSane(address crowdsale) public constant returns (bool) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="276" endline="279" pcid="589">
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="289" endline="298" pcid="3570">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="340" endline="347" pcid="495">
    function releaseTime() public view returns (uint256) {
        return _releaseTime;
    }

    /**
     * @notice Transfers tokens held by timelock to beneficiary.
     */
    function release() public {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="742" endline="745" pcid="985">
    function getTrackerBalance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }
}
</source>
<source file="systems/smart_contracts/GNB.sol" startline="171" endline="179" pcid="4132">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="627" endline="634" pcid="7093">
    function decimals() external view returns (uint8) {
        return _decimals;
    }

    /**
     * @return true if the contract is paused, false otherwise.
     */
    function paused() external view returns (bool) {
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="414" endline="421" pcid="7249">
    function getTotalLockedTokens() public view returns(uint256) {
        return totalLockedTokens;
    }
    /**
    * @dev Returned params for lockSlot
    * @param _lockSlotId uint256 unique id lockSlot
    */
    function getLock(uint256 _lockSlotId) public view returns(  uint256 _amountTokens,
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="455" endline="463" pcid="273">
    function getMiningTarget() public constant returns (uint) {
       return miningTarget;
   }



    //84m coins total
    //reward begins at 50 and is cut in half every reward era (as tokens are mined)
    function getMiningReward() public constant returns (uint) {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="84" endline="88" pcid="4484">
    function totalSupply() public view returns (uint){
        return supply;
    }
	
	function frozenSupply() public view returns (uint){
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="634" endline="641" pcid="7094">
    function paused() external view returns (bool) {
        return _paused;
    }

    /**
     * @dev called by the owner to pause, triggers stopped state
     */
    function pause() external onlyOwner whenNotPaused {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="49" endline="60" pcid="2454">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="34" endline="41" pcid="2453">
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="362" endline="366" pcid="887">
    function getWalletOnTopAddress() external view returns (address) {
        return _walletOnTopAddress;
    }

    function setWalletOnTopAddress(address _wallet) external onlyOwner returns(address) {
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="255" endline="261" pcid="5853">
    function decimals() public view returns(uint8) {
        return _decimals;
    }
    /**
    * @dev Total number of tokens in existence
    */
    function totalSupply() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="106" endline="111" pcid="1256">
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/RubyToken.sol" startline="33" endline="37" pcid="6225">
    function decimals() public view returns (uint256) {
        return _decimals;
    }
    
    function totalSupply() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="230" endline="237" pcid="7906">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See `IERC20.balanceOf`.
     */
    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="370" endline="381" pcid="7663">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     * @notice Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/ankara.sol" startline="84" endline="88" pcid="686">
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="3005" endline="3018" pcid="6942">
    function availableSynthCount()
        public
        view
        returns (uint)
    {
        return availableSynths.length;
    }

    // ========== MUTATIVE FUNCTIONS ==========

    /**
     * @notice ERC20 transfer function.
     */
    function transfer(address to, uint value)
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="713" endline="720" pcid="7932">
    function token() public view returns (IERC20) {
        return _token;
    }

    /**
     * @return the address where funds are collected.
     */
    function wallet() public view returns (address payable) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="289" endline="293" pcid="2677">
    function hasClosed() public view returns (bool) {
        return block.timestamp > _closingTime;
    }

    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="285" endline="289" pcid="2676">
    function isOpen() public view returns (bool) {
        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;
    }

    function hasClosed() public view returns (bool) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="418" endline="425" pcid="7809">
    function VOKEN() public view returns (IVoken) {
        return _voken;
    }

    /**
     * Returns the ending block number of `pageNumber`.
     */
    function pageEndingBlock(uint256 pageNumber) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="136" endline="139" pcid="3212">
    function getPeriodLength() public pure returns (uint256) {
        return PERIOD_LENGTH; 
    }
    function getMintAmount() public pure returns (uint256) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="584" endline="585" pcid="146">
	function reserve() public pure returns(IReserve){}
	function formula() public pure returns(IFormula){}
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="215" endline="221" pcid="8175">
    function totalSupply() external view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }

    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="88" endline="92" pcid="4485">
	function frozenSupply() public view returns (uint){
        return allfrozen;
    }
	
	 function circulatingSupply() public view returns (uint){
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="93" endline="97" pcid="7324">
  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="624" endline="631" pcid="2490">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="180" endline="184" pcid="2662">
    function weiRaised() public view returns (uint256) {
        return _weiRaised;
    }

    function buyTokens(address beneficiary) public nonReentrant payable {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="903" endline="912" pcid="4887">
  function isCrowdsale() public constant returns (bool) {
    return true;
  }

  //
  // Modifiers
  //

  /** Modified allowing execution only if the crowdsale is currently running.  */
  modifier inState(State state) {
</source>
<source file="systems/smart_contracts/KYCRegistry.sol" startline="49" endline="60" pcid="4502">
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="146" endline="156" pcid="5844">
    function isOwner() public view returns(bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * @notice Renouncing to ownership will leave the contract without an owner.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     */
    function renounceOwnership() public onlyOwner {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="184" endline="188" pcid="2571">
    function weiRaised() public view returns (uint256) {
        return _weiRaised;
    }

    function buyTokens(address beneficiary) public nonReentrant payable {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="624" endline="631" pcid="6049">
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="131" endline="139" pcid="431">
    function totalSupply() public view returns (uint) {
        return _totalSupply.sub(balances[address(0)]);
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance) {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="742" endline="745" pcid="6057">
    function getTrackerBalance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }
}
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="408" endline="414" pcid="7248">
    function getSlotsQuantity() public view returns(uint256) {
        return totalSlot.length;
    }
    /**
     * @dev Returned total locked tokens
    */
    function getTotalLockedTokens() public view returns(uint256) {
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="173" endline="176" pcid="2858">
    function symbol() public view returns (string){
        return operator.token_symbol();
    }
    function decimals() public view returns (uint8){
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="90" endline="93" pcid="6254">
	function isOwner() public view returns (bool is_owner) {
	    return msg.sender == owner;
	}
}
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="68" endline="72" pcid="2397">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="72" endline="76" pcid="2398">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="68" endline="72" pcid="1470">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="720" endline="727" pcid="7933">
    function wallet() public view returns (address payable) {
        return _wallet;
    }

    /**
     * @return the number of token units a buyer gets per wei.
     */
    function rate() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/FlatPricingExt.sol" startline="83" endline="92" pcid="3633">
  function isSane(address crowdsale) public constant returns (bool) {
    return true;
  }

  /**
   * @dev Pricing tells if this is a presale purchase or not.
     @param purchaser Address of the purchaser
     @return False by default, true if a presale purchaser
   */
  function isPresalePurchase(address purchaser) public constant returns (bool) {
</source>
<source file="systems/smart_contracts/Ethertime.sol" startline="382" endline="385" pcid="3317">
    function getAdmins() public view returns (address[] memory) {
        return _admins;
    }
    function getAdminPartByAddress(address addr) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="72" endline="76" pcid="1471">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="301" endline="305" pcid="1908">
    function getConversionRate() public view returns(uint256 _rate){
        
        return buttercoinToEth_conversion_rate;
    }
    function convertButterCointoEther(uint256 value) public onlyConverter{
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="168" endline="171" pcid="2319">
    function symbol() public view returns(string memory) {
        return _symbol;
    }
}
</source>
<source file="systems/smart_contracts/Comet.sol" startline="64" endline="68" pcid="1923">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/Comet.sol" startline="68" endline="72" pcid="1924">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="562" endline="570" pcid="3271">
    function name() external view returns (string memory) {
        return _name;
    }

    /**
     * @dev Gets the token symbol
     * @return string representing the token symbol
     */
    function symbol() external view returns (string memory) {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="468" endline="475" pcid="3582">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="115" endline="119" pcid="5098">
    function name() public view returns(string memory) {
        return _Tokenname;
    }

    function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="314" endline="321" pcid="7659">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="119" endline="123" pcid="5099">
    function symbol() public view returns(string memory) {
        return _Tokensymbol;
    }

    function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/BACD.sol" startline="230" endline="234" pcid="1025">
  function totalSupply() public view returns (uint256 supply) {
    return tokenCount;
  }

  string constant public name = "BACKED";
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="372" endline="379" pcid="3038">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="172" endline="176" pcid="2660">
    function wallet() public view returns (address payable) {
        return _wallet;
    }

    function rate() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="475" endline="482" pcid="3583">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="853" endline="862" pcid="5035">
    function symbol() external view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns an URI for a given token ID.
     * Throws if the token ID does not exist. May return an empty string.
     * @param tokenId uint256 ID of the token to query
     */
    function tokenURI(uint256 tokenId) external view returns (string memory) {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="845" endline="853" pcid="5034">
    function name() external view returns (string memory) {
        return _name;
    }

    /**
     * @dev Gets the token symbol.
     * @return string representing the token symbol
     */
    function symbol() external view returns (string memory) {
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="68" endline="72" pcid="3924">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/BCCT.sol" startline="264" endline="280" pcid="1106">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/ParkingResolver.sol" startline="79" endline="83" pcid="5602">
    function contenthash(bytes32 node) external view returns (bytes memory) {
        return _contenthash;
    }

    function setContenthash(bytes32 nodehash, bytes calldata contenthash) external {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="262" endline="269" pcid="587">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="85" endline="89" pcid="3172">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="56" endline="59" pcid="3198">
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="112" endline="120" pcid="7439">
    function totalSupply()  constant returns (uint ) {
        return _totalSupply;
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
</source>
<source file="systems/smart_contracts/ParkingResolver.sol" startline="59" endline="63" pcid="5598">
    function addr(bytes32 nodehash) external view returns (address) {
        return _addr;
    }

    function setAddr(bytes32 nodehash, address addr) external {
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="164" endline="168" pcid="2318">
    function name() public view returns(string memory) {
        return _name;
    }

    function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="232" endline="248" pcid="4038">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * > Note that this information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * `IERC20.balanceOf` and `IERC20.transfer`.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="986" endline="990" pcid="6132">
  function isToken() public constant returns (bool weAre) {
    return true;
  }

  function transfer(address _to, uint _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="229" endline="245" pcid="4427">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * > Note that this information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * `IERC20.balanceOf` and `IERC20.transfer`.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="321" endline="328" pcid="7660">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="635" endline="644" pcid="3279">
    function baseTokenURI() public view returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Returns the DNA for a given token ID
     * Throws if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query
     */
    function tokenDNA(uint256 tokenId) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="250" endline="257" pcid="6993">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="429" endline="436" pcid="5361">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="569" endline="577" pcid="8257">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="422" endline="429" pcid="5360">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of VOKEN.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="176" endline="180" pcid="2569">
    function wallet() public view returns (address payable) {
        return _wallet;
    }

    function rate() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Controller.sol" startline="10" endline="11" pcid="2003">
    function transfer(address a, uint val) external returns (bool) {return false;}
}
</source>
<source file="systems/smart_contracts/FlatPricingExt.sol" startline="92" endline="97" pcid="3634">
  function isPresalePurchase(address purchaser) public constant returns (bool) {
    return false;
  }

  /* How many weis one token costs */
  function updateRate(uint newOneTokenInWei) public;
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="436" endline="444" pcid="7194">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     *  Return the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="43" endline="50" pcid="5217">
  function getOwners()
    public
    view
  returns(address[] memory) {
    return owners;
  }

  function getOwnershipAdditions(address _account)
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="224" endline="232" pcid="4037">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="991" endline="995" pcid="4892">
  function isToken() public constant returns (bool weAre) {
    return true;
  }

  function transfer(address _to, uint _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="439" endline="447" pcid="666">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/Byte.sol" startline="76" endline="79" pcid="1578">
  function symbol() public view returns(string memory) {
    return _Symbol;
  }  
}
</source>
<source file="systems/smart_contracts/Byte.sol" startline="68" endline="72" pcid="1576">
  function name() public view returns(string memory) {
    return _Name;
  }
  
  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="64" endline="68" pcid="3923">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="238" endline="244" pcid="6602">
	function amIOwner() external view onlyOwner returns (bool) {
		return true;
	}

	/// @notice Revokes a prior confirmation of the given operation
	/// @param _operation operation value, typically keccak256(msg.data)
	function revoke(bytes32 _operation)
</source>
<source file="systems/smart_contracts/ankara.sol" startline="175" endline="179" pcid="700">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/MultiSigWallet.sol" startline="342" endline="353" pcid="5256">
    function getOwners()
        public
        constant
        returns (address[])
    {
        return owners;
    }

    /// @dev Returns array with owner addresses, which confirmed transaction.
    /// @param transactionId Transaction ID.
    /// @return Returns array of owner addresses.
    function getConfirmations(uint transactionId)
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="283" endline="291" pcid="5787">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="486" endline="502" pcid="5436">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="291" endline="307" pcid="5788">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="59" endline="62" pcid="3199">
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public pure returns (uint8) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="258" endline="263" pcid="4848">
  function isPresalePurchase(address purchaser) public constant returns (bool) {
    return false;
  }

  /* How many weis one token costs */
  function updateRate(uint newOneTokenInWei) public;
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="249" endline="258" pcid="4847">
  function isSane(address crowdsale) public constant returns (bool) {
    return true;
  }

  /**
   * @dev Pricing tells if this is a presale purchase or not.
     @param purchaser Address of the purchaser
     @return False by default, true if a presale purchaser
   */
  function isPresalePurchase(address purchaser) public constant returns (bool) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="68" endline="72" pcid="2557">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="257" endline="264" pcid="6994">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="730" endline="735" pcid="3852">
    function checkMintAllowed (address, uint256) public pure returns (byte) {
        //require(ATContract.isOperator(_minter), "Not Minter!");
        return STATUS_ALLOWED;
    }

    function checkBurnAllowed (address, uint256) public pure returns (byte) {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="545" endline="553" pcid="4768">
    function historyTimeArray()
        public
        view
        returns (uint256[] memory)
    {
        return historyTime;
    }

    function setTargetPrice(uint256 wad)
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="537" endline="545" pcid="4767">
    function historyProfitsArray()
        public
        view
        returns (uint256[] memory)
    {
        return historyProfits;
    }

    function historyTimeArray()
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="308" endline="314" pcid="3387">
    function getInactivityReleasePeriod() view returns (uint256)
    {
        return inactivityReleasePeriod;
    }

    // Increases the user balance
    function addBalance(address token, address user, uint256 amount) private
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="169" endline="173" pcid="2106">
  function isToken() public constant returns (bool weAre) {
    return true;
  }

  function transfer(address _to, uint _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="478" endline="486" pcid="5435">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="483" endline="499" pcid="327">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/MatchingToken.sol" startline="30" endline="33" pcid="4683">
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MatchingToken.sol" startline="26" endline="30" pcid="4682">
    function name() public view returns (string memory) {
        return _name;
    }
    
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="445" endline="449" pcid="4678">
    function decimals() public pure returns (uint8 _decimals) {
        return TOKEN_DECIMALS_UINT8;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="444" endline="453" pcid="7195">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     *  Return the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="441" endline="445" pcid="4677">
    function symbol() public pure returns (string _symbol) {
        return TOKEN_SYMBOL;
    }

    function decimals() public pure returns (uint8 _decimals) {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="570" endline="578" pcid="3272">
    function symbol() external view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Gets the total amount of tokens stored by the contract
     * @return uint256 representing the total amount of tokens
     */
    function totalSupply() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="437" endline="441" pcid="4676">
    function name() public pure returns (string _name) {
        return TOKEN_NAME;
    }

    function symbol() public pure returns (string _symbol) {
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="64" endline="68" pcid="2155">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="68" endline="72" pcid="2156">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="269" endline="276" pcid="588">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="70" endline="74" pcid="5996">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="495" endline="502" pcid="6349">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="71" endline="76" pcid="3367">
    function getOwner() returns (address out) {
        return owner;
    }

    // Adds or disables an admin account
    function setAdmin(address admin, bool isAdmin) onlyOwner {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="314" endline="321" pcid="1382">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="323" endline="330" pcid="746">
    function name() public view returns(string memory) {
        return _name;
    }

    /**
    * @return the symbol of the token.
    */
    function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="488" endline="495" pcid="6348">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="66" endline="70" pcid="5995">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="64" endline="68" pcid="2648">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="89" endline="93" pcid="3173">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="577" endline="593" pcid="8258">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * > Note that this information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * `IERC20.balanceOf` and `IERC20.transfer`.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="503" endline="519" pcid="5930">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="72" endline="76" pcid="2558">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="221" endline="229" pcid="4426">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="447" endline="463" pcid="667">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * > Note that this information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * `IERC20.balanceOf` and `IERC20.transfer`.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="780" endline="787" pcid="1787">
    function wallet() public view returns (address payable) {
        return _wallet;
    }

    /**
     * @return the number of token units a buyer gets per wei.
     */
    function rate() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BCCT.sol" startline="256" endline="264" pcid="1105">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="495" endline="503" pcid="5929">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="365" endline="372" pcid="3037">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="613" endline="620" pcid="7091">
    function name() external view returns (string memory) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() external view returns (string memory) {
</source>
<source file="systems/smart_contracts/BANG.sol" startline="72" endline="76" pcid="1047">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/ankara.sol" startline="171" endline="175" pcid="699">
    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="253" endline="258" pcid="6088">
  function isPresalePurchase(address purchaser) public constant returns (bool) {
    return false;
  }

  /* How many weis one token costs */
  function updateRate(uint newOneTokenInWei) public;
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="68" endline="72" pcid="2649">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="244" endline="253" pcid="6087">
  function isSane(address crowdsale) public constant returns (bool) {
    return true;
  }

  /**
   * @dev Pricing tells if this is a presale purchase or not.
     @param purchaser Address of the purchaser
     @return False by default, true if a presale purchaser
   */
  function isPresalePurchase(address purchaser) public constant returns (bool) {
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="330" endline="333" pcid="747">
    function symbol() public view returns(string memory) {
        return _symbol;
    }
}
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="620" endline="627" pcid="7092">
    function symbol() external view returns (string memory) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() external view returns (uint8) {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="475" endline="483" pcid="326">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/BANG.sol" startline="68" endline="72" pcid="1046">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="730" endline="735" pcid="7107">
    function checkMintAllowed (address, uint256) public pure returns (byte) {
        //require(ATContract.isOperator(_minter), "Not Minter!");
        return STATUS_ALLOWED;
    }

    function checkBurnAllowed (address, uint256) public pure returns (byte) {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="613" endline="620" pcid="3836">
    function name() external view returns (string memory) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() external view returns (string memory) {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="735" endline="740" pcid="3853">
    function checkBurnAllowed (address, uint256) public pure returns (byte) {
        // default
        return STATUS_ALLOWED;
    }

}
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="441" endline="457" pcid="8210">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * > Note that this information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * `IERC20.balanceOf` and `IERC20.transfer`.
     */
    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="433" endline="441" pcid="8209">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/WTA.sol" startline="95" endline="99" pcid="8052">
    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="64" endline="68" pcid="7321">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="307" endline="314" pcid="1381">
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @return the symbol of the token.
     */
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="64" endline="68" pcid="6206">
  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
</source>
<source file="systems/smart_contracts/WTA.sol" startline="99" endline="103" pcid="8053">
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="735" endline="740" pcid="7108">
    function checkBurnAllowed (address, uint256) public pure returns (byte) {
        // default
        return STATUS_ALLOWED;
    }

}
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="68" endline="72" pcid="6207">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="620" endline="627" pcid="3837">
    function symbol() external view returns (string memory) {
        return _symbol;
    }

    /**
     * @return the number of decimals of the token.
     */
    function decimals() external view returns (uint8) {
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="68" endline="72" pcid="7322">
  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
</source>
<source file="systems/smart_contracts/RubyToken.sol" startline="26" endline="30" pcid="6223">
    function name() public view returns (string memory) {
        return _name;
    }
    
    function symbol() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/RubyToken.sol" startline="30" endline="33" pcid="6224">
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="870" endline="877" pcid="6124">
  function isFinalizerSane() public constant returns (bool sane) {
    return finalizeAgent.isSane();
  }

  /**
   * Check if the contract relationship looks good.
   */
  function isPricingSane() public constant returns (bool sane) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="875" endline="882" pcid="4884">
  function isFinalizerSane() public constant returns (bool sane) {
    return finalizeAgent.isSane();
  }

  /**
   * Check if the contract relationship looks good.
   */
  function isPricingSane() public constant returns (bool sane) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="882" endline="891" pcid="4885">
  function isPricingSane() public constant returns (bool sane) {
    return pricingStrategy.isSane(address(this));
  }

  /**
   * Crowdfund state machine management.
   *
   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.
   */
  function getState() public constant returns (State) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="877" endline="886" pcid="6125">
  function isPricingSane() public constant returns (bool sane) {
    return pricingStrategy.isSane(address(this));
  }

  /**
   * Crowdfund state machine management.
   *
   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.
   */
  function getState() public constant returns (State) {
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="177" endline="181" pcid="2910">
    function getMonth(uint timestamp) public pure returns (uint8) {
        return parseTimestamp(timestamp).month;
    }

    function getDay(uint timestamp) public pure returns (uint8) {
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="181" endline="185" pcid="2911">
    function getDay(uint timestamp) public pure returns (uint8) {
        return parseTimestamp(timestamp).day;
    }

    function getHour(uint timestamp) public pure returns (uint8) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1343" endline="1346" pcid="1824">
    function withdrawalAllowed(address) public view returns (bool) {
        return _state == State.Refunding;
    }
}
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="981" endline="991" pcid="5193">
    function getCountTransactions() public view returns (uint countTransactions) {
        return transactions.length;
    }

    /** @dev Get IDs for transactions where the specified address is the receiver and/or the sender.
     *  This function must be used by the UI and not by other smart contracts.
     *  Note that the complexity is O(t), where t is amount of arbitrable transactions.
     *  @param _address The specified address.
     *  @return transactionIDs The transaction IDs.
     */
    function getTransactionIDsByAddress(address _address) public view returns (uint[] transactionIDs) {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="331" endline="335" pcid="4996">
    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="587" endline="594" pcid="3274">
    function exists(uint256 tokenId) external view returns (bool) {
        return _exists(tokenId);
    }

    /**
     * @dev Sets IPFS migration flag true
     */
    function ipfsMigrationDone() public onlyMinter {
</source>
<source file="systems/smart_contracts/Ownable.sol" startline="166" endline="169" pcid="5578">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return getBalance( _owner );
    }
}
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="464" endline="470" pcid="6811">
    function getCPollInfo() public view
    returns (uint,uint, uint, uint, address, uint, uint) {
        return _getPollInfo(communityPoll);
    }

    /* 获取代币流通总量接口 */
    function getLiquidity() public view returns (uint) {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="460" endline="464" pcid="6810">
    function getTPollInfo() public view
    returns (uint,uint, uint, uint, address, uint, uint) {
        return _getPollInfo(techPoll);
    }
    function getCPollInfo() public view
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="456" endline="460" pcid="6809">
    function getBPollInfo() public view
    returns (uint,uint, uint, uint, address, uint, uint) {
        return _getPollInfo(businessPoll);
    }
    function getTPollInfo() public view
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="443" endline="448" pcid="6807">
    function getAvailableTpoll() public view returns (uint, uint, uint) {
        return _getAvailablePoll(techPoll);
    }

    /* 获取矿池信息接口 */
    function _getPollInfo(Poll memory poll) private view
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="440" endline="443" pcid="6806">
    function getAvailableCpoll() public view returns (uint, uint, uint) {
        return _getAvailablePoll(communityPoll);
    }
    function getAvailableTpoll() public view returns (uint, uint, uint) {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="437" endline="440" pcid="6805">
    function getAvailableBPoll() public view returns (uint, uint, uint) {
        return _getAvailablePoll(businessPoll);
    }
    function getAvailableCpoll() public view returns (uint, uint, uint) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="1225" endline="1229" pcid="6670">
	function getLockedTokens(address walletAddress) public view returns(uint256 balance) {
		return getLockedTokens_(walletAddress);
	}

	function getUndistributedBalanceOf_(address walletAddress, uint256 groupNumber) internal view returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="241" endline="249" pcid="3078">
  function supportsInterface(bytes4 _interfaceId)
    external
    view
    returns (bool) 
  {
    return _supportsInterface(_interfaceId);
  }

  function _supportsInterface(bytes4 _interfaceId)
</source>
<source file="systems/smart_contracts/AdminUpgradeabilityProxy.sol" startline="224" endline="233" pcid="358">
    function implementation() external view ifAdmin returns (address) {
        return _implementation();
    }

    /**
     * @dev Changes the admin of the proxy.
     * Only the current admin can call this function.
     * @param newAdmin Address to transfer proxy administration to.
     */
    function changeAdmin(address newAdmin) external ifAdmin {
</source>
<source file="systems/smart_contracts/AdminUpgradeabilityProxy.sol" startline="217" endline="224" pcid="357">
    function admin() external view ifAdmin returns (address) {
        return _admin();
    }

    /**
     * @return The address of the implementation.
     */
    function implementation() external view ifAdmin returns (address) {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="111" endline="118" pcid="4491">
	function myBalance() public view returns (uint balance){
        return balances[msg.sender];
    }
	
    // ------------------------------------------------------------------------
    // Public function to return balance of tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public view returns (uint balance){
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="258" endline="284" pcid="3720">
function isActive(privateEntrance storage pe) internal view returns(bool) {
return pe.endTimestamp > now;
}

/*
function maxInvestmentFor(privateEntrance storage pe, address investorAddr) internal view returns(uint) {
if (!pe.hasAccess[investorAddr]) {
return 0;
}

(uint maxInvestment, ) = pe.rev1Storage.investorShortInfo(investorAddr);
if (maxInvestment == 0) {
return 0;
}
maxInvestment = Math.min(maxInvestment, pe.investorMaxInvestment);

(uint currInvestment, ) = pe.rev2Storage.investorInfo(investorAddr);

if (currInvestment >= maxInvestment) {
return 0;
}

return maxInvestment-currInvestment;
}
*/

function provideAccessFor(privateEntrance storage pe, address[] addrs) internal {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1203" endline="1207" pcid="4909">
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) public constant returns (bool limitBroken) {
    return tokensSoldTotal > maximumSellableTokens;
  }

  function isBreakingInvestorCap(address addr, uint tokenAmount) public constant returns (bool limitBroken) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="203" endline="207" pcid="6321">
    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="985" endline="994" pcid="5405">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    /**
     * @dev Give an `account` access to the Minter role.
     *
     * Can only be called by the current owner.
     */
    function addMinter(address account) public onlyOwner {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="272" endline="276" pcid="7521">
    function getSignature(bytes32 _key) external view returns (uint8 v, bytes32 r, bytes32 s, uint8 revocationReasonId) {
        return trueProfileStorage.getSignature(_key);
    }

    function getRevocationReasonId(bytes32 _key) external view returns (uint8) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="950" endline="959" pcid="5402">
    function isProxy(address account) public view returns (bool) {
        return _proxies.has(account);
    }

    /**
     * @dev Give an `account` access to the Proxy role.
     *
     * Can only be called by the current owner.
     */
    function addProxy(address account) public onlyOwner {
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="381" endline="385" pcid="4255">
  function isMinter(address account) public view returns (bool) {
    return minters.has(account);
  }

  function addMinter(address account) public onlyMinter {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="540" endline="549" pcid="7818">
    function isProxy(address account) public view returns (bool) {
        return _proxies.has(account);
    }

    /**
     * @dev Give an `account` access to the Proxy role.
     *
     * Can only be called by the current owner.
     */
    function addProxy(address account) public onlyOwner {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="915" endline="924" pcid="5399">
    function isGlobal(address account) public view returns (bool) {
        return _globals.has(account);
    }

    /**
     * @dev Give an `account` access to the Global role.
     *
     * Can only be called by the current owner.
     */
    function addGlobal(address account) public onlyOwner {
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="407" endline="421" pcid="5541">
  function withdrawable() external view onlyOwner returns (uint256) {
    return withdrawableTokens.sub(ONE_FOR_CONSISTENT_GAS_COST);
  }

  /**
   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK
   * sent for the request back to the requester's address.
   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid
   * Emits CancelOracleRequest event.
   * @param _requestId The request ID
   * @param _payment The amount of payment given (specified in wei)
   * @param _callbackFunc The requester's specified callback address
   * @param _expiration The time of the expiration for the request
   */
  function cancelOracleRequest(
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="822" endline="829" pcid="7942">
    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
        return weiAmount.mul(_rate);
    }

    /**
     * @dev Determines how ETH is stored/forwarded on purchases.
     */
    function _forwardFunds() internal {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="590" endline="594" pcid="6360">
    function isBlacklisted(address account) public view returns (bool) {
        return _Blacklisteds.has(account);
    }

    function addBlacklisted(address account) public onlyBlacklistAdmin {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="903" endline="907" pcid="998">
    function hasDeposited(address user) public view returns (bool) {
        return deposit.hasDeposited(user);
    }

    function isKYCConfirmed(address user) public view returns (bool) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="621" endline="624" pcid="165">
    function getBA(bytes32 _key) internal view returns(address) {
        return data.ba(_key);        
    }
}
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="240" endline="244" pcid="1899">
  function isConverter(address account) public view returns (bool) {
    return converters.has(account);
  }

  function addConverter(address account) public onlyConverter {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="563" endline="567" pcid="6044">
    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="485" endline="489" pcid="1771">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    function addMinter(address account) public onlyMinter {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="486" endline="489" pcid="100">
    function getBU(bytes32 _key) internal view returns(uint256) {
        return data.bu(_key);        
    }
}
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="64" endline="68" pcid="4980">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    function addMinter(address account) public onlyMinter {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1104" endline="1119" pcid="6859">
    function balanceOf(address account)
        public
        view
        returns (uint)
    {
        return tokenState.balanceOf(account);
    }

    /* ========== MUTATIVE FUNCTIONS ========== */

    /**
     * @notice Set the address of the TokenState contract.
     * @dev This can be used to "pause" transfer functionality, by pointing the tokenState at 0x000..
     * as balances would be unreachable.
     */ 
    function setTokenState(TokenState _tokenState)
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="491" endline="495" pcid="8251">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    function addMinter(address account) public onlyMinter {
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="183" endline="186" pcid="2861">
    function balanceOf(address addr)public view returns(uint256){
        return operator.token_balanceOf(addr);
    }
    function allowance(address _from, address _spender) public view returns (uint256){
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="270" endline="274" pcid="3254">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    function addMinter(address account) public onlyMinter {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="561" endline="565" pcid="7205">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    function addMinter(address account) public onlyOwner {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="907" endline="910" pcid="999">
    function isKYCConfirmed(address user) public view returns (bool) {
        return kyc.isConfirmed(user);
    }
}
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="524" endline="528" pcid="329">
    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="167" endline="171" pcid="3556">
    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="665" endline="669" pcid="342">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    function addMinter(address account) public onlyMinter {
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="130" endline="134" pcid="7272">
    function isIssuer(address account) public view returns (bool) {
        return _issuers.has(account);
    }

    function addIssuer(address account) public onlyIssuer {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="176" endline="180" pcid="3246">
    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="882" endline="889" pcid="1796">
    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
        return weiAmount.mul(_rate);
    }

    /**
     * @dev Determines how ETH is stored/forwarded on purchases.
     */
    function _forwardFunds() internal {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="127" endline="131" pcid="3551">
    function isAdmin(address account) public view returns (bool) {
        return _admins.has(account);
    }

    function addAdmin(address account) public onlyAdmin {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="563" endline="567" pcid="2485">
    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="228" endline="232" pcid="2578">
    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
        return weiAmount.mul(_rate);
    }

    function _forwardFunds() internal {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="239" endline="243" pcid="4662">
    function actualBalanceOf(address _owner) public view returns (uint256 balance) {
        return super.balanceOf(_owner);
    }

    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="554" endline="558" pcid="6356">
    function isBlacklistAdmin(address account) public view returns (bool) {
        return _BlacklistAdmins.has(account);
    }

    function addBlacklistAdmin(address account) public onlyBlacklistAdmin {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="386" endline="390" pcid="1387">
    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="310" endline="321" pcid="6839">
    function decimalToPreciseDecimal(uint i)
        internal
        pure
        returns (uint)
    {
        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);
    }

    /**
     * @dev Convert a high precision decimal to a standard decimal representation.
     */
    function preciseDecimalToDecimal(uint i)
</source>
<source file="systems/smart_contracts/GLOLocker.sol" startline="27" endline="31" pcid="4115">
    function balanceOf(address addr) public view returns(uint){
        return token.balanceOf(addr);
    }

    function() external {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="541" endline="545" pcid="4445">
    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="163" endline="167" pcid="6316">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    function addMinter(address account) public onlyMinter {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="489" endline="493" pcid="2701">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    function addMinter(address account) public onlyMinter {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="754" endline="758" pcid="626">
    function actualBalanceOf(address _owner) public view returns (uint256 balance) {
        return super.balanceOf(_owner);
    }

    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="224" endline="228" pcid="2669">
    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
        return weiAmount.mul(_rate);
    }

    function _forwardFunds() internal {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="493" endline="497" pcid="2610">
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }

    function addMinter(address account) public onlyMinter {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1349" endline="1360" pcid="6870">
    function _numWeeksRoundedDown(uint _timeDiff)
        public
        view
        returns (uint)
    {
        // Take timeDiff in seconds (Dividend) and mintPeriodDuration as (Divisor)
        // Calculate the numberOfWeeks since last mint rounded down to 1 week
        // Fraction of a week will return 0
        return _timeDiff.div(mintPeriodDuration);
    }

    function isMintable()
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="563" endline="567" pcid="972">
    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="863" endline="870" pcid="6123">
  function isMinimumGoalReached() public constant returns (bool reached) {
    return weiRaised >= minimumFundingGoal;
  }

  /**
   * Check if the contract relationship looks good.
   */
  function isFinalizerSane() public constant returns (bool sane) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="868" endline="875" pcid="4883">
  function isMinimumGoalReached() public constant returns (bool reached) {
    return weiRaised >= minimumFundingGoal;
  }

  /**
   * Check if the contract relationship looks good.
   */
  function isFinalizerSane() public constant returns (bool sane) {
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="97" endline="101" pcid="3927">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="88" endline="91" pcid="3208">
    function getLockedBalance(address addr) public view returns (uint256) {
    	return _lockedBalance[addr];
    }    
    function getHarvestStartPeriod(address addr) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="196" endline="201" pcid="1286">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    // mitigates the ERC20 short address attack
    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="320" endline="332" pcid="2470">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="321" endline="331" pcid="6336">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BKN.sol" startline="58" endline="61" pcid="1325">
    function balanceOf(address src) public constant returns (uint256) {
        return _balances[src];
    }
    function allowance(address src, address guy) public constant returns (uint256) {
</source>
<source file="systems/smart_contracts/RubyToken.sol" startline="87" endline="92" pcid="6234">
    function lockcheck(address checkee) public view returns (bool){
        return transferable[checkee];
    }
    
    
    function _burn(address account, uint256 value) private {
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="90" endline="99" pcid="1337">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
    * @dev Gets the locked value of specified address.
    * @param owner The address to query the locked amount of.
    * @return An uint256 representing the amount locked by the passed address.
    */
    function lockedOf(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="99" endline="108" pcid="1338">
    function lockedOf(address owner) public view returns (uint256) {
        return _locked[owner];
    }

    /**
    * @dev Gets the last apply-withdraw time of specified address.
    * @param owner The address to query the last apply time of.
    * @return An uint256 representing the last apply time by the passed address.
    */
    function lastApplyTime(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="108" endline="117" pcid="1339">
    function lastApplyTime(address owner) public view returns (uint256) {
        return _last_apply_time[owner];
    }

    /**
    * @dev Gets the apply-withdraw amount of specified address.
    * @param owner The address to query the apply amount of.
    * @return An uint256 representing the apply amount by the passed address.
    */
    function applyAmount(address owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="117" endline="132" pcid="1340">
    function applyAmount(address owner) public view returns (uint256) {
        return _apply_amount[owner];
    }

    /**
    * @dev Deal action to start a new game with proxy mode, submit by croupier bot.
    * @param gambler gambler's address.
    * @param commit generated by keccak of 2 256-bit reveals, used to unique identify a deck.
    *               gambler get commit but don't know the deck, dealer can't change the deck because of keccak is one-way irreversible.
    * @param amount 128-bit number of bet amount.
    * @param cutCard cut card position, gambler set it after receive the commit, so this process can guarantee fairness.
    * @param v 
    * @param r 
    * @param s v, r,s are components of ECDSA signature. Ensure the deck is signed by the gambler himself.
     */
    function deal(address gambler, uint256 commit, uint128 amount, uint8 cutCard, uint8 v, bytes32 r, bytes32 s) 
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="97" endline="101" pcid="6210">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="544" endline="549" pcid="7486">
    function lockedBalanceOf(address _owner) public view returns (uint256) {
        return balances[vestingOf[_owner]];
    }

    /// @dev check the locked but releaseable balance of an owner
    function releaseableBalanceOf(address _owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="473" endline="480" pcid="3507">
    function isFactoryTGenerated(address _addr) external view returns(bool) {
        return TContracts[_addr];
    }

    /**
     * @dev get if address is a T contract generated by factory
     */
    function isFactoryFPGenerated(address _addr) external view returns(bool) {
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="248" endline="252" pcid="2965">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="898" endline="906" pcid="3884">
    function isMemberInserted(address memberWallet) public view returns(bool) {
        return membersArray[memberWallet].isInserted;
    }

    /**
     * @dev only operator members can add a member
     * @return bool for success
     */
    function addMemberToSet(address memberWallet, uint8 disabled, string calldata memberURL,
</source>
<source file="systems/smart_contracts/TeaToken.sol" startline="70" endline="77" pcid="7125">
    function balanceOf(address _owner)
        constant
        public
        returns (uint256)
    {
        return balances[_owner];
    }
}
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="476" endline="484" pcid="544">
    function revoked(address token) public view returns (bool) {
        return _revoked[token];
    }

    /**
     * @notice Transfers vested tokens to beneficiary.
     * @param token ERC20 token which is being vested
     */
    function release(IERC20 token) public {
</source>
<source file="systems/smart_contracts/RETC.sol" startline="132" endline="136" pcid="6188">
    function balanceOf(address _owner) constant public returns (uint256) {
	    return balances[_owner];
    }
//查询地址锁定币数
    function lockOf(address _owner) constant public returns (uint256) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="94" endline="99" pcid="3210">
    function getUnlockTime(address addr) public view returns (uint256) {
    	return _unlockTime[addr];
    }
    // convenience function for checking how many tokens an address can harvest.
    // some complexity comes from the fact that _currentPeriod may not reflect the intended current period at this point in time.
    function getHarvestableAmount(address addr) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/magesh.sol" startline="124" endline="134" pcid="4619">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="134" endline="144" pcid="1371">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="63" endline="67" pcid="4647">
  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="99" endline="103" pcid="2159">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="666" endline="675" pcid="3843">
    function getImportedContractRate(address _contract) external view returns (uint256) {
        return contractsToImport[_contract].tokenRateExchange;
    }

    /**
     * @dev set the address of the token to be imported and its exchange rate.
     * @param _contract address of token to be imported
     * @param _exchRate exchange rate between token to be imported and this token.
     */
    function setImportedContract(address _contract, uint256 _exchRate) external onlyOwner {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="658" endline="666" pcid="3842">
    function isImportedContract(address _contract) external view returns (bool) {
        return contractsToImport[_contract].permission;
    }

    /**
     * @dev get the exchange rate between token to be imported and this token.
     * @param _contract address of token to be exchange
     */
    function getImportedContractRate(address _contract) external view returns (uint256) {
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="162" endline="166" pcid="2889">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/SCMCoin.sol" startline="70" endline="74" pcid="6386">
    function balanceOf(address _owner) public view returns (uint256) {
	    return balances[_owner];
    }

    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2 * 32) returns (bool success) {
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="97" endline="101" pcid="7325">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="764" endline="768" pcid="2499">
    function isConfirmed(address addr) public view returns (bool) {
        return KYCConfirmed[addr];
    }

    function setAdministrator(address _admin) public onlyOwner {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="228" endline="238" pcid="7718">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="356" endline="368" pcid="3811">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="741" endline="745" pcid="6115">
  function getTierPosition(address addr) public constant returns(uint8) {
    return joinedCrowdsaleState[addr].position;
  }

  function getLastTier() public constant returns(address) {
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="100" endline="103" pcid="3979">
    function getGameBalance(address _game) public view returns (uint256){
        return awardDatas[msg.sender].items[_game].tokenIds.length;
    }
    function setAward(address _user, address _game, uint256 _tokenId) public onlyOwner{
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="737" endline="741" pcid="6114">
  function isTierJoined(address addr) public constant returns(bool) {
    return joinedCrowdsaleState[addr].isJoined;
  }

  function getTierPosition(address addr) public constant returns(uint8) {
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="252" endline="256" pcid="6496">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/MatchingToken.sol" startline="87" endline="92" pcid="4693">
    function lockcheck(address checkee) public view returns (bool){
        return transferable[checkee];
    }
    
    
    function _burn(address account, uint256 value) private {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="878" endline="882" pcid="2509">
    function hasDeposited(address user) public view returns (bool) {
        return deposits[user].deposited;
    }

    function isUnlocked(address user) public view returns (bool) {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="882" endline="885" pcid="2510">
    function isUnlocked(address user) public view returns (bool) {
        return deposits[user].unlockedForWithdrawal;
    }
}
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="248" endline="252" pcid="6562">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="230" endline="238" pcid="6601">
	function isOwner(address _addr) public view returns (bool) {
		return m_ownerIndex[_addr] > 0;
	}

	/// @notice Tests ownership of the current caller.
	/// @return true if it's an owner
	// It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to
	// addOwner/changeOwner and to isOwner.
	function amIOwner() external view onlyOwner returns (bool) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="518" endline="522" pcid="6621">
	function balanceOf(address _owner) public view returns (uint256) {
		return balances[_owner];
	}

}
</source>
<source file="systems/smart_contracts/KYCRegistry.sol" startline="100" endline="104" pcid="4506">
    function isConfirmed(address addr) public view returns (bool) {
        return KYCConfirmed[addr];
    }

    function setAdministrator(address _admin) public onlyOwner {
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="227" endline="232" pcid="6697">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    // mitigates the ERC20 short address attack
    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="119" endline="122" pcid="1416">
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }
}
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="136" endline="140" pcid="3991">
  function isInPassFilter(address user) public view returns (bool) {
    return mapAddressPass[user];
  }

  function isInBlockFilter(address user) public view returns (bool) {
</source>
<source file="systems/smart_contracts/MBA.sol" startline="96" endline="100" pcid="4707">
  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="221" endline="230" pcid="8176">
    function balanceOf(address owner) public view returns (uint256) {
        return balances[owner];
    }

    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // function transfer(address _to, uint _tokens)  public receiveAllowed(_to)  returns (bool success) {
    function transfer(address _to, uint _value)  public transferAllowed(msg.sender, _to, _value) returns (bool) {
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="140" endline="144" pcid="3992">
  function isInBlockFilter(address user) public view returns (bool) {
    return mapAddressBlock[user];
  }

  function addressToPass(address[] memory target, bool status)
</source>
<source file="systems/smart_contracts/Token.sol" startline="94" endline="104" pcid="7255">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="228" endline="238" pcid="6731">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(
</source>
<source file="systems/smart_contracts/BCCT.sol" startline="62" endline="74" pcid="1092">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="146" endline="156" pcid="736">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
    * @dev Function to check the amount of tokens that an owner allowed to a spender.
    * @param owner address The address which owns the funds.
    * @param spender address The address which will spend the funds.
    * @return A uint256 specifying the amount of tokens still available for the spender.
    */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="585" endline="594" pcid="4772">
    function profitOf(address beneficiary)
        public
        view
        returns (uint256)
    {
        // unsettled { (total - settled) * balance / max } + settled { profit }
        return unsettledProfitOf(beneficiary) + accounts[beneficiary].profit;
    }

    function totalProfitOf(address beneficiary)
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="594" endline="602" pcid="4773">
    function totalProfitOf(address beneficiary)
        public
        view
        returns (uint256)
    {
        return accounts[beneficiary].taken.add(profitOf(beneficiary));
    }

    function adjustProfit(address beneficiary)
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="115" endline="119" pcid="2052">
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

}
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="303" endline="307" pcid="3722">
function isInvestor(address addr) public view returns (bool) {
return investors[addr].investment > 0;
}

function investorInfo(address addr) public view returns(uint investment, uint paymentTime) {
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="255" endline="259" pcid="1448">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/BANG.sol" startline="101" endline="105" pcid="1050">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="208" endline="213" pcid="461">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    // mitigates the ERC20 short address attack
    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="742" endline="746" pcid="4874">
  function isTierJoined(address addr) public constant returns(bool) {
    return joinedCrowdsaleState[addr].isJoined;
  }

  function getTierPosition(address addr) public constant returns(uint8) {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="320" endline="332" pcid="6029">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="116" endline="120" pcid="8165">
    function frozen(address _account) public view returns (bool){ //If account is flagged to freeze return true
        return (WHITELISTED_FREEZE_CODE == (whiteList[_account] & WHITELISTED_FREEZE_CODE)); // 10 & 11 = True
    }

    function addToSendAllowed(address _to) external onlyManager {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="746" endline="750" pcid="4875">
  function getTierPosition(address addr) public constant returns(uint8) {
    return joinedCrowdsaleState[addr].position;
  }

  function getLastTier() public constant returns(address) {
</source>
<source file="systems/smart_contracts/ZhongChaChainToken.sol" startline="70" endline="77" pcid="8222">
    function balanceOf(address _owner)
        constant
        public
        returns (uint256)
    {
        return balances[_owner];
    }
}
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="882" endline="885" pcid="997">
    function isUnlocked(address user) public view returns (bool) {
        return deposits[user].unlockedForWithdrawal;
    }
}
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="878" endline="882" pcid="996">
    function hasDeposited(address user) public view returns (bool) {
        return deposits[user].deposited;
    }

    function isUnlocked(address user) public view returns (bool) {
</source>
<source file="systems/smart_contracts/ERC20.sol" startline="291" endline="295" pcid="2996">
  function isAdmin(address somebody) public view returns(bool) {
    return _admins[somebody] || msg.sender == owner;
  }

  function mint(address account, uint256 amount) public {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="764" endline="768" pcid="986">
    function isConfirmed(address addr) public view returns (bool) {
        return KYCConfirmed[addr];
    }

    function setAdministrator(address _admin) public onlyOwner {
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="244" endline="248" pcid="3532">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="124" endline="134" pcid="4931">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="234" endline="246" pcid="654">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2306" endline="2314" pcid="6905">
    function hasIssued(address account)
        external
        view
        returns (bool)
    {
        return issuanceData[account].initialDebtOwnership > 0;
    }

    event IssuanceRatioUpdated(uint newRatio);
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="320" endline="332" pcid="957">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="298" endline="310" pcid="4430">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="66" endline="70" pcid="3697">
function isZero(address addr) internal pure returns(bool) {
return addr == address(0);
}

function isZero(uint a) internal pure returns(bool) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="62" endline="66" pcid="3696">
function notZero(address addr) internal pure returns(bool) {
return !(addr == address(0));
}

function isZero(address addr) internal pure returns(bool) {
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="259" endline="263" pcid="4313">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/Wisdom.sol" startline="117" endline="125" pcid="7985">
  function balanceOf(address account) public view returns (uint256) {
    return _balances[account];
  }


  /**
   * @dev See `IERC20.allowance`.
   */
  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="76" endline="80" pcid="2308">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="101" endline="105" pcid="1474">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="91" endline="94" pcid="3209">
    function getHarvestStartPeriod(address addr) public view returns (uint256) {
    	return _harvestStartPeriod[addr];
    }    
    function getUnlockTime(address addr) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="591" endline="598" pcid="927">
    function getMaxWLAmount(address _subscriber) external view returns(uint256) {
        return whitelist[_subscriber].maxAmount;
    }

    /**
     * @dev length of the whitelisted accounts
     */
    function getWLLength() external view returns(uint256) {
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="144" endline="154" pcid="2745">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param owner address The address which owns the funds.
   * @param spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="577" endline="584" pcid="925">
    function isWhitelisted(address _subscriber) public view returns(bool) {
        return whitelist[_subscriber].permitted;
    }

    /**
     * @return the anonymous threshold
     */
    function getWLThresholdBalance() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="113" endline="117" pcid="7412">
  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="99" endline="103" pcid="5999">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="553" endline="557" pcid="921">
    function isFundsUnlockerOperator(address account) public view returns (bool) {
        return _FundsUnlockerOperators[account];
    }

    function renounceFundsUnlockerOperators() external onlyFundsUnlockerOperators {
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="191" endline="196" pcid="4970">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

 
    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/ICOImplementation.sol" startline="397" endline="409" pcid="4289">
    function isFrozen(address _addr) public view returns (bool) {
        return frozen[_addr];
    }


    // SUPPLY CONTROL FUNCTIONALITY


    /**
     * @dev Sets a new supply controller address.
     * @param _newSupplyController The address allowed to burn/mint tokens to control supply.
     */
    function setSupplyController(address _newSupplyController) public {
</source>
<source file="systems/smart_contracts/Wisdom.sol" startline="296" endline="305" pcid="7997">
  function isAdmin(address somebody) public view returns(bool) {
    return _admins[somebody] || somebody == owner;
  }

  /**
   * Locks an address. This method is allowed by admins.
   *
   * Locked addresses can not transfer or burn.
   */
  function lock(address account) public {
</source>
<source file="systems/smart_contracts/ICOImplementation.sol" startline="200" endline="214" pcid="4278">
    function balanceOf(address _addr) public view returns (uint256) {
        return balances[_addr];
    }


    // ERC20 FUNCTIONALITY


    /**
     * @dev Transfer tokens from one address to another
     * @param _from address The address which you want to send tokens from
     * @param _to address The address which you want to transfer to
     * @param _value uint256 the amount of tokens to be transferred
     */
    function transferFrom(
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="287" endline="297" pcid="6998">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="527" endline="531" pcid="915">
    function isFundsUnlockerManager(address account) public view returns (bool) {
        return _FundsUnlockerManagers[account];
    }

    function addFundsUnlockerOperators(address account) external onlyFundsUnlockerManagers {
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="394" endline="401" pcid="7007">
    function isMinter(address account) public view returns (bool) {
        return _minter[account];
    }

    /**
     * @dev Set a minter state
     */
    function setMinterState(address account, bool state) external onlyOwner {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="500" endline="504" pcid="909">
    function isFundingOperator(address account) public view returns (bool) {
        return _FundingOperators[account];
    }

    function renounceFundingOperators() external onlyFundingOperators {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="237" endline="249" pcid="7023">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="473" endline="477" pcid="903">
    function isFundingManager(address account) public view returns (bool) {
        return _FundingManagers[account];
    }

    function addFundingOperators(address account) external onlyFundingManagers {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="278" endline="290" pcid="7184">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     *  See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="444" endline="448" pcid="897">
    function isWLOperator(address account) public view returns (bool) {
        return _WLOperators[account];
    }

    function renounceWLOperators() external onlyWLOperators {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="417" endline="421" pcid="891">
    function isWLManager(address account) public view returns (bool) {
        return _WLManagers[account];
    }

    function addWLOperators(address account) external onlyWLManagers {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="666" endline="675" pcid="7098">
    function getImportedContractRate(address _contract) external view returns (uint256) {
        return contractsToImport[_contract].tokenRateExchange;
    }

    /**
     * @dev set the address of the token to be imported and its exchange rate.
     * @param _contract address of token to be imported
     * @param _exchRate exchange rate between token to be imported and this token.
     */
    function setImportedContract(address _contract, uint256 _exchRate) external onlyOwner {
</source>
<source file="systems/smart_contracts/Wisdom.sol" startline="321" endline="328" pcid="8000">
  function isLocked(address somebody) public view returns(bool) {
    return _locked[somebody];
  }

  /**
   * Issues new amount of tokens to account. This method is allowed by admins.
   */
  function mint(address account, uint256 amount) public {
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="658" endline="666" pcid="7097">
    function isImportedContract(address _contract) external view returns (bool) {
        return contractsToImport[_contract].permission;
    }

    /**
     * @dev get the exchange rate between token to be imported and this token.
     * @param _contract address of token to be exchange
     */
    function getImportedContractRate(address _contract) external view returns (uint256) {
</source>
<source file="systems/smart_contracts/FogCoin.sol" startline="55" endline="65" pcid="3680">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/RaffleTicket.sol" startline="254" endline="266" pcid="5961">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/Comet.sol" startline="97" endline="101" pcid="1927">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="162" endline="166" pcid="8023">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="382" endline="386" pcid="2595">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="466" endline="473" pcid="3506">
    function isFactoryATGenerated(address _addr) external view returns(bool) {
        return ATContracts[_addr];
    }

    /**
     * @dev get if address is a T contract generated by factory
     */
    function isFactoryTGenerated(address _addr) external view returns(bool) {
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="357" endline="367" pcid="2351">
    function isOwner(address _account) public view returns (bool) {
        return _account == owner;
    }


    /**
     * Gets the current owner
     *
     * @return address The current owner
     */
    function getOwner() public view returns (address) {
</source>
<source file="systems/smart_contracts/ankara.sol" startline="88" endline="92" pcid="687">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="402" endline="412" pcid="598">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="146" endline="150" pcid="5103">
    function balanceOf(address owner) public view returns (uint256) {
        return _FOMOTokenBalances[owner];
    }

    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="286" endline="298" pcid="5917">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="81" endline="85" pcid="3206">
    function getAllowBurnsFrom(address addr) public view returns (bool) {
    	return _allowBurnsFrom[addr];
    }

    function getTotalLocked() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CoinDDC.sol" startline="29" endline="34" pcid="1863">
    function balanceOf( address _addr ) public view returns ( uint )
    {
        return balances[_addr];
    }

    event Transfer(
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="427" endline="438" pcid="5897">
    function balanceOf(address owner) public view returns (uint256) {
        // Immutable static call from target contract
        return IERC20(target).balanceOf(owner);
    }

    /**
    * @dev Function to check the amount of tokens that an owner allowed to a spender.
    * @param owner address The address which owns the funds.
    * @param spender address The address which will spend the funds.
    * @return A uint256 specifying the amount of tokens still available for the spender.
    */
    function allowance(
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="439" endline="451" pcid="5168">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/CNG.sol" startline="139" endline="149" pcid="1852">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param owner address The address which owns the funds.
   * @param spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="270" endline="280" pcid="5855">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1470" endline="1481" pcid="1831">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev Overrides parent by storing due balances, and delivering tokens to the vault instead of the end user. This
     * ensures that the tokens will be available by the time they are withdrawn (which may not be the case if
     * `_deliverTokens` was called later).
     * @param beneficiary Token purchaser
     * @param tokenAmount Amount of tokens purchased
     */
    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="263" endline="274" pcid="4041">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="613" endline="617" pcid="2624">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="135" endline="138" pcid="5306">
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }
}
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1200" endline="1208" pcid="1813">
    function depositsOf(address payee) public view returns (uint256) {
        return _deposits[payee];
    }

    /**
     * @dev Stores the sent amount as credit to be withdrawn.
     * @param payee The destination address of the funds.
     */
    function deposit(address payee) public onlyPrimary payable {
</source>
<source file="systems/smart_contracts/LBBT.sol" startline="81" endline="85" pcid="4543">
  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }         
 
  function approve(address _spender, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ProofOfContributionChainToken.sol" startline="29" endline="33" pcid="5824">
    function balanceOf(address tokenOwner) public view returns (uint) {
        return balances[tokenOwner];
    }

    function transfer(address receiver, uint numTokens) public returns (bool) {
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="85" endline="94" pcid="1544">
    function balanceOf(address _addr)
        public
        constant
        returns (uint256) {
        return balances[_addr];
    }

    /// @dev check address is approved investor
    /// @param _addr address
    function isApprovedInvestor(address _addr)
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="94" endline="104" pcid="1545">
    function isApprovedInvestor(address _addr)
        public
        constant
        returns (bool) {
        return approvedInvestorList[_addr];
    }

    /// @dev get ETH deposit
    /// @param _addr address get deposit
    /// @return amount deposit of an buyer
    function getDeposit(address _addr)
</source>
<source file="systems/smart_contracts/Factory.sol" startline="480" endline="487" pcid="3508">
    function isFactoryFPGenerated(address _addr) external view returns(bool) {
        return FPContracts[_addr];
    }

    /**
     * @dev get the i-th element in every array
     */
    function getContractsByIndex(uint256 _index) external view returns (address, address, address, address) {
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="104" endline="116" pcid="1546">
    function getDeposit(address _addr)
        public
        constant
        returns(uint256){
        return deposit[_addr];
}


    /// @dev Transfers the balance from msg.sender to an account
    /// @param _to Recipient address
    /// @param _amount Transfered amount in unit
    /// @return Transfer status
    function transfer(address _to, uint256 _amount)
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="457" endline="464" pcid="5365">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev Returns the reserved amount of VOKEN by `account`.
     */
    function reservedOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="480" endline="487" pcid="5367">
    function availableOf(address account) public view returns (uint256) {
        return balanceOf(account).sub(reservedOf(account));
    }

    /**
     * @dev Returns the available amount of VOKEN by `account` and a certain `amount`.
     */
    function _getAvailableAmount(address account, uint256 amount) internal view returns (uint256) {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="298" endline="308" pcid="3571">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ERC20.sol" startline="121" endline="129" pcid="2984">
  function balanceOf(address account) public view returns (uint256) {
    return _balances[account];
  }


  /**
   * @dev See `IERC20.allowance`.
   */
  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="246" endline="258" pcid="8236">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="770" endline="777" pcid="5387">
    function whitelisted(address account) public view returns (bool) {
        return _referee[account] != address(0);
    }

    /**
     * @dev Returns the whitelist counter.
     */
    function whitelistCounter() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="791" endline="798" pcid="5390">
    function whitelistReferee(address account) public view returns (address) {
        return _referee[account];
    }

    /**
     * @dev Returns referrals of a `account`
     */
    function whitelistReferrals(address account) public view returns (address[] memory) {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="126" endline="138" pcid="306">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="276" endline="283" pcid="5786">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }
    
    /**
     * @dev Returns the name of the token.
     */
    function name() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="805" endline="814" pcid="5392">
    function whitelistReferralsCount(address account) public view returns (uint256) {
        return _referrals[account].length;
    }

    /**
     * @dev Push whitelist, batch.
     *
     * Can only be called by a proxy.
     */
    function pushWhitelist(address[] memory accounts, address[] memory refereeAccounts) public onlyProxy returns (bool) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="242" endline="254" pcid="1756">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="741" endline="753" pcid="2367">
    function hasBalance(address _owner) public view returns (bool) {
        return allocatedIndex.length > 0 && _owner == allocatedIndex[allocated[_owner].index];
    }


    /** 
     * Get the allocated drps or drpu token balance of `_owner`
     * 
     * @param _token The address to test against
     * @param _owner The address from which the allocated token balance will be retrieved
     * @return The allocated drps token balance
     */
    function balanceOf(address _token, address _owner) public view returns (uint) {
</source>
<source file="systems/smart_contracts/Byte.sol" startline="107" endline="111" pcid="1580">
  function balanceOf(address owner) public view returns (uint256) {
    return _ByteBalances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="144" endline="154" pcid="4241">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param owner address The address which owns the funds.
   * @param spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="598" endline="603" pcid="550">
    function isExistBeneficiary(address wallet) public view returns(bool) {
        return beneficiariesIndices[wallet] > 0;
    }


    function beneficiariesCount() public view returns(uint) {
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="314" endline="323" pcid="5761">
    function balanceOf(
        address _owner)
        public
        view
        returns (uint256)
    {
        return denormalize(balances[_owner]);
    }

    function allowance(
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="274" endline="286" pcid="5423">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="358" endline="368" pcid="5689">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="859" endline="869" pcid="2373">
    function retrieveTokens(address _tokenContract) public only_owner not_accepted_token(_tokenContract) {
        super.retrieveTokens(_tokenContract);
    }


    /**
     * Converts the weight for DRPS tokens
     * 
     * @param _value The amount of tokens to convert
     */
    function _convertDrpsWeight(uint _value) private pure returns (uint) {
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="374" endline="383" pcid="5538">
  function getAuthorizationStatus(address _node) external view returns (bool) {
    return authorizedNodes[_node];
  }

  /**
   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.
   * @param _node The address of the Chainlink node
   * @param _allowed Bool value to determine if the node can fulfill requests
   */
  function setFulfillmentPermission(address _node, bool _allowed) external onlyOwner {
</source>
<source file="systems/smart_contracts/CDS.sol" startline="176" endline="186" pcid="1662">
  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="107" endline="111" pcid="2401">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="469" endline="476" pcid="543">
    function released(address token) public view returns (uint256) {
        return _released[token];
    }

    /**
     * @return true if the token is revoked.
     */
    function revoked(address token) public view returns (bool) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="609" endline="613" pcid="2715">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/UGCoin.sol" startline="78" endline="83" pcid="7534">
    function balanceOf(address _owner) constant public returns (uint256) {
	    return balances[_owner];
    }

    // mitigates the ERC20 short address attack
    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="230" endline="242" pcid="8197">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="228" endline="238" pcid="2245">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="378" endline="382" pcid="2686">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/DNP.sol" startline="170" endline="174" pcid="2800">
    function balanceOf(address _owner) public view returns (uint256) 
    {
        return balances[_owner];
    }
}
</source>
<source file="systems/smart_contracts/WTA.sol" startline="115" endline="119" pcid="8057">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="118" endline="122" pcid="3176">
  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Ethertime.sol" startline="385" endline="388" pcid="3318">
    function getAdminPartByAddress(address addr) public view returns (uint256) {
        return _adminsParts[addr];
    }
    function getLotteryInfo(uint256 id)
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="142" endline="152" pcid="7647">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/XGP.sol" startline="208" endline="213" pcid="8118">
    function balanceOf(address _owner) constant public returns (uint256) {
        return balances[_owner];
    }

    // mitigates the ERC20 short address attack
    modifier onlyPayloadSize(uint size) {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="237" endline="249" pcid="7907">
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See `IERC20.transfer`.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="459" endline="466" pcid="3505">
    function isFactoryDeployer(address _addr) external view returns(bool) {
        return deployers[_addr];
    }

    /**
     * @dev get if address is an AT contract generated by factory
     */
    function isFactoryATGenerated(address _addr) external view returns(bool) {
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="413" endline="418" pcid="498">
    function isExistBeneficiary(address wallet) public view returns(bool) {
        return beneficiariesIndices[wallet] > 0;
    }


    function beneficiariesCount() public view returns(uint) {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="93" endline="103" pcid="3018">
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DNP.sol" startline="120" endline="124" pcid="2794">
    function isLocked(address addr) public view returns(bool) 
    {
        return locked[addr];
    }
    bool internal stopped = false;
</source>
<source file="systems/smart_contracts/StorageUnit.sol" startline="24" endline="27" pcid="6708">
    function read(bytes32 _key) external view returns (bytes32) {
        return store[_key];
    }
}
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="131" endline="135" pcid="7501">
    function getBool(bytes32 _key) external view returns (bool) {
        return boolStorage[_key];
    }

    function getInt(bytes32 _key) external view returns (int) {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="135" endline="140" pcid="7502">
    function getInt(bytes32 _key) external view returns (int) {
        return intStorage[_key];
    }

    /**** Set Methods for additional storage ****/
    function setAddress(bytes32 _key, address _value) accessible external {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="115" endline="119" pcid="7497">
    function getAddress(bytes32 _key) external view returns (address) {
        return addressStorage[_key];
    }

    function getUint(bytes32 _key) external view returns (uint) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="369" endline="374" pcid="6610">
	function isOperationActive(bytes32 _operation) private view returns (bool) {
		return 0 != m_multiOwnedPending[_operation].yetNeeded;
	}


	function assertOwnersAreConsistent() private view {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="119" endline="123" pcid="7498">
    function getUint(bytes32 _key) external view returns (uint) {
        return uIntStorage[_key];
    }

    function getString(bytes32 _key) external view returns (string) {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="127" endline="131" pcid="7500">
    function getBytes(bytes32 _key) external view returns (bytes) {
        return bytesStorage[_key];
    }

    function getBool(bytes32 _key) external view returns (bool) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="177" endline="182" pcid="575">
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }
}
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="123" endline="127" pcid="7499">
    function getString(bytes32 _key) external view returns (string) {
        return stringStorage[_key];
    }

    function getBytes(bytes32 _key) external view returns (bytes) {
</source>
<source file="systems/smart_contracts/ScipayToken.sol" startline="24" endline="28" pcid="6376">
    function transfer(address _to, uint _amount) public returns(bool) {
        return super.transfer(_to, _amount);
    }

    function transferFrom(address _from, address _to, uint _amount) public returns(bool) {
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="869" endline="872" pcid="2374">
    function _convertDrpsWeight(uint _value) private pure returns (uint) {
        return _value * 2;
    }
}
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="221" endline="226" pcid="2442">
    function SetFeeinWei(uint _fee)public onlyOwner returns(uint){
        fee = _fee;
    }
    
    
    function CalGweitoPay(uint _ordertoPay, uint _ShareWei)public onlyOwner view returns(address payable, uint){
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="189" endline="193" pcid="2913">
    function getMinute(uint timestamp) public pure returns (uint8) {
        return uint8((timestamp / 60) % 60);
    }

    function getSecond(uint timestamp) public pure returns (uint8) {
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="197" endline="201" pcid="2915">
    function getWeekday(uint timestamp) public pure returns (uint8) {
        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);
    }

    function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {
</source>
<source file="systems/smart_contracts/DaiSwap.sol" startline="57" endline="61" pcid="2289">
    function usdAmountFromDai(uint dai) public view returns (uint) {
        return usdAmountFromShares(sharesFromDai(dai));
    }
    
    function deposit(uint dai) public {
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="193" endline="197" pcid="2914">
    function getSecond(uint timestamp) public pure returns (uint8) {
        return uint8(timestamp % 60);
    }

    function getWeekday(uint timestamp) public pure returns (uint8) {
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="185" endline="189" pcid="2912">
    function getHour(uint timestamp) public pure returns (uint8) {
        return uint8((timestamp / 60 / 60) % 24);
    }

    function getMinute(uint timestamp) public pure returns (uint8) {
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="249" endline="254" pcid="2445">
    function ResetOrdertoPay(uint reset)public onlyOwner returns(uint){
        ordertoPay = reset;
        
    }
    
    function SetMinBalance(uint _k)public onlyOwner returns(uint){
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="70" endline="74" pcid="3698">
function isZero(uint a) internal pure returns(bool) {
return a == 0;
}

function notZero(uint a) internal pure returns(bool) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="74" endline="77" pcid="3699">
function notZero(uint a) internal pure returns(bool) {
return a != 0;
}
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="45" endline="47" pcid="13">
    function callers(address) public pure returns (bool) { }

    function appendCaller(address _caller) public;  // ownerOnly
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="43" endline="45" pcid="2819">
    function callers(address) public pure returns (bool) { }

    function appendCaller(address _caller) public;  // ownerOnly
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="72" endline="79" pcid="5221">
  function getMinimumApprovals()
    public
    view
  returns(uint approvalCount) {
    approvalCount = (owners.length + 1) / 2;
  }

  modifier isOwner(address _test) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="176" endline="179" pcid="7783">
    function reserved(Allocation storage self) internal view returns (uint256) {
        return self.amount.sub(available(self));
    }
}
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="609" endline="613" pcid="5707">
  function getMin(Token storage self) internal view returns (uint256) {
    return self.heapList[1];
  }

  function delMin(Token storage self) internal returns (uint256) {
</source>
<source file="systems/smart_contracts/Ethertime.sol" startline="522" endline="531" pcid="3326">
    function getUniquePlayersCount(
        uint256 lotteryId
    )
        public
        view
        returns (uint256)
    {
        return _uniquePlayersCount[lotteryId];
    }
    function getOrderInfo(uint256 id)
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="473" endline="480" pcid="7815">
    function pageVokenSum(uint256 pageNumber) public view returns (uint256) {
        return _pageVokenSum[_pageNumber(pageNumber)];
    }

    /**
     * @dev Returns the amount of VOKEN holding by `account` and `pageNumber`.
     */
    function vokenHolding(address account, uint256 pageNumber) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="466" endline="473" pcid="7814">
    function pageVokens(uint256 pageNumber) public view returns (uint256) {
        return _pageVokens[pageNumber];
    }

    /**
     * @dev Returns the amount of VOKEN holding by all shareholders till `pageNumber`.
     */
    function pageVokenSum(uint256 pageNumber) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="432" endline="439" pcid="7811">
    function pageEthers(uint256 pageNumber) public view returns (uint256) {
        return _pageEthers[pageNumber];
    }

    /**
     * @dev Returns the amount of deposited Ether till `pageNumber`.
     */
    function pageEtherSum(uint256 pageNumber) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="425" endline="432" pcid="7810">
    function pageEndingBlock(uint256 pageNumber) public view returns (uint256) {
        return _pageEndingBlock[pageNumber];
    }

    /**
     * @dev Returns the amount of deposited Ether at `pageNumber`.
     */
    function pageEthers(uint256 pageNumber) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="494" endline="501" pcid="3510">
    function getFPAddressByIndex(uint256 _index) external view returns (address) {
        return FPContractsList[_index];
    }

    /**
     * @dev get the i-th element in FPContractsList array
     */
    function getFactoryContext() external view returns (address, address, uint) {
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="226" endline="234" pcid="7235">
    function getAddressToId(uint256 _lockSlotId) public view returns(address) {
        return totalSlot[_lockSlotId];
    }

    /**
    * @dev Returned all created unique ids
    * @param _holder address The holder's address
    */
    function getAllLockSlotIdsToAddress(address _holder) public view returns(uint256[] _lockSlotIds) {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1139" endline="1143" pcid="3129">
  function getLandEstateId(uint256 landId) external view returns (uint256) {
    return landIdEstate[landId];
  }

  function setLANDRegistry(address _registry) external onlyOwner {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="213" endline="219" pcid="6599">
	function getOwner(uint256 ownerIndex) public view returns (address) {
		return m_owners[ownerIndex + 1];
	}

	/// @notice Gets owners
	/// @return memory array of owners
	function getOwners() public view returns (address[] memory) {
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="344" endline="354" pcid="5764">
    function denormalize(
        uint256 _value)
        internal
        view
        returns (uint256)
    {
        return _value
            .mul(10**18)
            .div(splitFactor);
    }
}
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1186" endline="1190" pcid="3134">
  function getMetadata(uint256 estateId) external view returns (string) {
    return estateData[estateId];
  }

  function isUpdateAuthorized(address operator, uint256 estateId) external view returns (bool) {
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="333" endline="344" pcid="5763">
    function normalize(
        uint256 _value)
        internal
        view
        returns (uint256)
    {
        return _value
            .mul(splitFactor)
            .div(10**18);
    }

    function denormalize(
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1159" endline="1169" pcid="3132">
  function getEstateSize(uint256 estateId) external view returns (uint256) {
    return estateLandIds[estateId].length;
  }

  /**
   * @notice Update the metadata of an Estate
   * @dev Reverts if the Estate does not exist or the user is not authorized
   * @param estateId Estate id to update
   * @param metadata string metadata
   */
  function updateMetadata(
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="385" endline="395" pcid="3085">
  function getApproved(uint256 _tokenId) public view returns (address) {
    return tokenApprovals[_tokenId];
  }

  /**
   * @dev Sets or unsets the approval of a given operator
   * An operator is allowed to transfer all tokens of the sender on their behalf
   * @param _to operator address to set the approval
   * @param _approved representing the status of the approval to be set
   */
  function setApprovalForAll(address _to, bool _approved) public {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="148" endline="153" pcid="3216">
    function getCumulTokenPerEth(uint256 period) public view returns (uint256) {
    	return _cumulTokenPerEth[period];
    }

    // any address can burn their own tokens.
    function burn(uint256 amount) public {
</source>
<source file="systems/smart_contracts/UNT.sol" startline="52" endline="56" pcid="7568">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="745" endline="754" pcid="625">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return super.balanceOf(_owner) + freezingBalance[_owner];
    }

    /**
     * @dev Gets the balance of the specified address without freezing tokens.
     * @param _owner The address to query the the balance of.
     * @return An uint256 representing the amount owned by the passed address.
     */
    function actualBalanceOf(address _owner) public view returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/BACD.sol" startline="90" endline="103" pcid="1020">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return accounts [_owner];
  }

  /**
   * Transfer given number of tokens from message sender to given recipient.
   *
   * @param _to address to transfer tokens to the owner of
   * @param _value number of tokens to transfer to the owner of given address
   * @return true if tokens were transferred successfully, false otherwise
   * accounts [_to] + _value > accounts [_to] for overflow check
   * which is already in safeMath
   */
  function transfer(address _to, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="224" endline="234" pcid="8085">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return _balances[_owner];
  }
 
 
  /**
   * @dev transfer token for a specified address
   * @param _to The address to transfer to.
   * @param _value The amount to be transferred.
   */
  function transfer(address _to, uint256 _value) returns (bool) {    
</source>
<source file="systems/smart_contracts/Warpcoin.sol" startline="59" endline="63" pcid="7948">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/FMT.sol" startline="58" endline="62" pcid="3653">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="245" endline="255" pcid="4001">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value)
</source>
<source file="systems/smart_contracts/VCTAToken.sol" startline="52" endline="56" pcid="7671">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="758" endline="766" pcid="627">
    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {
        return freezingBalance[_owner];
    }

    /**
     * @dev gets freezing count
     * @param _addr Address of freeze tokens owner.
     */
    function freezingCount(address _addr) public view returns (uint count) {
</source>
<source file="systems/smart_contracts/UTC.sol" startline="110" endline="114" pcid="7580">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/SHPC.sol" startline="52" endline="56" pcid="6510">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="143" endline="153" pcid="7627">
    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint256 tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/ESCHToken.sol" startline="96" endline="100" pcid="3049">
    function cxesch (address _c1) public view returns(uint256 _j1){
        return( balanceOf[_c1]);
    }

    function SetAw0(address _adA0) public {
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="95" endline="99" pcid="7750">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/CST_TOKEN.sol" startline="64" endline="68" pcid="2201">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

  function allowance(address _owner, address _spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="172" endline="176" pcid="1637">
    function balanceOf(address _holder) public view returns (uint256 balance) {
        return balances[_holder] + lockupInfo[_holder].lockupBalance;
    }

    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/SellableToken.sol" startline="63" endline="66" pcid="6465">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }
}
</source>
<source file="systems/smart_contracts/customIcoToken.sol" startline="73" endline="77" pcid="2213">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="105" endline="108" pcid="7457">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }
}
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="567" endline="574" pcid="7821">
    function allocations(address account) public view returns (uint256 allocationsCounter) {
        allocationsCounter = _allocations[account].length;
    }

    /**
     * @dev Returns the allocation on `account` and an `index`.
     */
    function allocation(address account, uint256 index) public view returns (uint256 amount,
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="95" endline="99" pcid="766">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="93" endline="97" pcid="6523">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/BDAM.sol" startline="163" endline="166" pcid="1121">
  function balanceOf(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }
}
</source>
<source file="systems/smart_contracts/DaiSwap.sol" startline="25" endline="26" pcid="2284">
  function balanceOf(address _owner) public view returns (uint256 balance) {}
  function transfer(address _to, uint256 _value) public returns (bool success) {}
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="235" endline="239" pcid="4661">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return super.balanceOf(_owner) + freezingBalance[_owner];
    }

    function actualBalanceOf(address _owner) public view returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="243" endline="247" pcid="4663">
    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {
        return freezingBalance[_owner];
    }

    function freezingCount(address _addr) public view returns (uint count) {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="139" endline="143" pcid="6780">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="173" endline="177" pcid="4391">
    function balanceOf(address _holder) public view returns (uint256 balance) {
        return balances[_holder] + lockupInfo[_holder].lockupBalance;
    }

    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/DENARIO.sol" startline="59" endline="63" pcid="2450">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="248" endline="258" pcid="4810">
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balanceOfAt(_owner, block.number);
    }

    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on
    ///  its behalf. This is a modified version of the ERC20 approve function
    ///  to be a little bit safer
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _amount The amount of tokens to be approved for transfer
    /// @return True if the approval was successful
    function approve(address _spender, uint256 _amount) public returns (bool success) {
</source>
<source file="systems/smart_contracts/CRYPTOMZ.sol" startline="120" endline="123" pcid="2181">
  function balanceOf(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }
}
</source>
<source file="systems/smart_contracts/NaorisToken.sol" startline="105" endline="108" pcid="5286">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }
}
</source>
<source file="systems/smart_contracts/OBK.sol" startline="52" endline="56" pcid="5470">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="106" endline="110" pcid="1719">
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }

}
</source>
<source file="systems/smart_contracts/GoldenRings.sol" startline="80" endline="91" pcid="4176">
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }


    /**
    * @dev Transfer tokens from one address to another
    * @param _from address The address which you want to send tokens from
    * @param _to address The address which you want to transfer to
    * @param _value uint256 the amount of tokens to be transferred
    */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/AzurToken.sol" startline="81" endline="85" pcid="1007">
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

  function approve(address _spender, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BFGToken.sol" startline="80" endline="84" pcid="1188">
  function balanceOf(address addr) public view returns (uint256 balance) {
    return _balances[addr];
  }

  function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="501" endline="505" pcid="3511">
    function getFactoryContext() external view returns (address, address, uint) {
        return (seedAddress, internalDEXAddress, factoryDeployBlock);
    }

}
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="249" endline="256" pcid="3079">
  function _supportsInterface(bytes4 _interfaceId)
    internal
    view
    returns (bool) 
  {
    return _interfaceId == InterfaceId_ERC165;
  }
}
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="323" endline="337" pcid="3080">
  function _supportsInterface(bytes4 _interfaceId)
    internal
    view
    returns (bool)
  {
    return super._supportsInterface(_interfaceId) || 
      _interfaceId == InterfaceId_ERC721 || _interfaceId == InterfaceId_ERC721Exists;
  }

  /**
   * @dev Gets the balance of the specified address
   * @param _owner address to query the balance of
   * @return uint256 representing the amount owned by the passed address
   */
  function balanceOf(address _owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="753" endline="766" pcid="3102">
  function _supportsInterface(bytes4 _interfaceId)
    internal
    view
    returns (bool)
  {
    return super._supportsInterface(_interfaceId) || 
      _interfaceId == InterfaceId_ERC721Enumerable || _interfaceId == InterfaceId_ERC721Metadata;
  }

  /**
   * @dev Gets the token name
   * @return string representing the token name
   */
  function name() external view returns (string) {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1433" endline="1446" pcid="3150">
  function _supportsInterface(bytes4 _interfaceId) internal view returns (bool) {
    // solium-disable-next-line operator-whitespace
    return super._supportsInterface(_interfaceId)
      || _interfaceId == InterfaceId_GetMetadata
      || _interfaceId == InterfaceId_VerifyFingerprint;
  }

  /**
   * @dev Internal function to mint a new Estate with some metadata
   * @param to The address that will own the minted token
   * @param metadata Set an initial metadata
   * @return An uint256 representing the new token id
   */
  function _mintEstate(address to, string metadata) internal returns (uint256) {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="49" endline="56" pcid="3228">
    function supportsInterface(bytes4 interfaceId) external view returns (bool) {
        return _supportedInterfaces[interfaceId];
    }

    /**
     * @dev internal method for registering an interface
     */
    function _registerInterface(bytes4 interfaceId) internal {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1920" endline="1932" pcid="6892">
    function rateIsFrozen(bytes4 currencyKey)
        external
        view
        returns (bool)
    {
        return inversePricing[currencyKey].frozen;
    }


    /**
     * @notice Check if any of the currency rates passed in haven't been updated for longer than the stale period.
     */
    function anyRateIsStale(bytes4[] currencyKeys)
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1878" endline="1889" pcid="6889">
    function lastRateUpdateTimeForCurrency(bytes4 currencyKey)
        public
        view
        returns (uint)
    {
        return lastRateUpdateTimes[currencyKey];
    }

    /**
     * @notice Retrieve the last update time for a specific currency
     */
    function lastRateUpdateTimesForCurrencies(bytes4[] currencyKeys)
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1850" endline="1861" pcid="6887">
    function rateForCurrency(bytes4 currencyKey)
        public
        view
        returns (uint)
    {
        return rates[currencyKey];
    }

    /**
     * @notice Retrieve the rates for a list of currencies
     */
    function ratesForCurrencies(bytes4[] currencyKeys)
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="558" endline="565" pcid="5701">
    function supportsInterface(bytes4 interfaceId) external view returns (bool) {
        return _supportedInterfaces[interfaceId];
    }

    /**
     * @dev internal method for registering an interface
     */
    function _registerInterface(bytes4 interfaceId) internal {
</source>
<source file="systems/smart_contracts/ParkingResolver.sol" startline="89" endline="95" pcid="5604">
    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {
        return (interfaceID == ADDR_INTERFACE_ID ||
                interfaceID == TEXT_INTERFACE_ID ||
                interfaceID == CONTENTHASH_INTERFACE_ID ||
                interfaceID == INTERFACE_META_ID);
    }
}
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="138" endline="153" pcid="4986">
    function supportsInterface(bytes4 interfaceId) external view returns (bool) {
        return _supportedInterfaces[interfaceId];
    }

    /**
     * @dev Registers the contract as an implementer of the interface defined by
     * `interfaceId`. Support of the actual ERC165 interface is automatic and
     * registering its interface id is not required.
     *
     * See {IERC165-supportsInterface}.
     *
     * Requirements:
     *
     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).
     */
    function _registerInterface(bytes4 interfaceId) internal {
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="127" endline="137" pcid="7865">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="136" endline="146" pcid="4366">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="140" endline="150" pcid="4792">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="137" endline="147" pcid="1963">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="111" endline="116" pcid="1311">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="140" endline="147" pcid="2235">
  function isFrozenAccount(address target) onlyController public view returns (bool) {
      return frozenAccount[target];
  }
  
  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="137" endline="147" pcid="1985">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="135" endline="145" pcid="410">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="157" endline="167" pcid="6258">
	function balanceOf(address tokenOwner) public view returns (uint balance) {
		return balances[tokenOwner];
	}


	// ------------------------------------------------------------------------
	// Transfer the balance from token owner's account to `to` account
	// - Owner's account must have sufficient balance to transfer
	// - 0 value transfers are allowed
	// ------------------------------------------------------------------------
	function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="140" endline="147" pcid="7708">
  function isFrozenAccount(address target) onlyController public view returns (bool) {
      return frozenAccount[target];
  }
  
  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="139" endline="149" pcid="716">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="99" endline="103" pcid="3955">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }

    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="111" endline="116" pcid="1233">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="139" endline="149" pcid="432">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="127" endline="137" pcid="6587">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="140" endline="150" pcid="7843">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BermToken.sol" startline="82" endline="86" pcid="1143">
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="141" endline="151" pcid="6281">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/GNB.sol" startline="179" endline="183" pcid="4133">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }

    function checkRate(uint unlockIndex) public constant returns (uint rate_ ){
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="143" endline="153" pcid="5650">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/JDC.sol" startline="104" endline="110" pcid="4344">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }



    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="118" endline="128" pcid="2432">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="146" endline="151" pcid="4106">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return _balances[tokenOwner];
    }
 
    // Get the allowance of funds beteen a token holder and a spender
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
</source>
<source file="systems/smart_contracts/BTToken.sol" startline="70" endline="74" pcid="1560">
    function balanceOf(address _owner) constant returns (uint) {
        return balances[_owner];
    }

    function approve(address _spender, uint _value) returns (bool) {
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="140" endline="150" pcid="1209">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="140" endline="150" pcid="8141">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="308" endline="318" pcid="244">
    function balanceOf(address tokenOwner) public view returns(uint balance) {
        return balances[tokenOwner];
    }

    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------

    function transfer(address to, uint tokens) public returns(bool success) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1012" endline="1016" pcid="4895">
  function balanceOf(address _owner) constant returns (uint balance) {
    return balances[_owner];
  }

  function approve(address _spender, uint _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="139" endline="149" pcid="5620">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="111" endline="116" pcid="1257">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="127" endline="137" pcid="7887">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1007" endline="1011" pcid="6135">
  function balanceOf(address _owner) constant returns (uint balance) {
    return balances[_owner];
  }

  function approve(address _spender, uint _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="140" endline="150" pcid="4524">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/ParkingResolver.sol" startline="69" endline="73" pcid="5600">
    function text(bytes32 nodehash, string calldata key) external view returns (string memory) {
        return _text[key];
    }

    function setText(bytes32 nodehash, string calldata key, string calldata value) external {
</source>
<source file="systems/smart_contracts/WFCToken.sol" startline="78" endline="82" pcid="7962">
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
 
    function approve(address _spender, uint256 _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="124" endline="134" pcid="5816">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/P21.sol" startline="66" endline="70" pcid="5587">
    function balanceOf(address _owner) constant returns (uint) {
        return balances[_owner];
    }

    function approve(address _spender, uint _value) returns (bool) {
</source>
<source file="systems/smart_contracts/TECToken.sol" startline="66" endline="70" pcid="7135">
    function balanceOf(address _owner) constant returns (uint) {
        return balances[_owner];
    }

    function approve(address _spender, uint _value) returns (bool) {
</source>
<source file="systems/smart_contracts/BEX.sol" startline="28" endline="32" pcid="1166">
	function balanceOf(address tokenOwner)public constant returns (uint balance) {
		return balances[tokenOwner];
	}

	function transfer(address to, uint tokens)public returns (bool success) {
</source>
<source file="systems/smart_contracts/GENEToken.sol" startline="72" endline="76" pcid="4076">
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
 
    function approve(address _spender, uint256 _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/CouncilVesting.sol" startline="99" endline="103" pcid="2033">
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/VENT.sol" startline="104" endline="112" pcid="7687">
        function balanceOf(address tokenOwner) public view returns (uint balance) {
            return balances[tokenOwner];
        }
        // ------------------------------------------------------------------------
        // Transfer the balance from token owner's account `to` account
        // - Owner's account must have sufficient balance to transfer
        // - 0 value transfers are allowed
        // ------------------------------------------------------------------------
        function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="91" endline="95" pcid="5557">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }

    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/CGT.sol" startline="141" endline="151" pcid="1695">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="120" endline="130" pcid="7440">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="112" endline="116" pcid="5491">
  function balanceOf(address _owner) constant returns (uint balance) {
    return balances[_owner];
  }

}
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="138" endline="148" pcid="4208">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="50" endline="57" pcid="5218">
  function getOwnershipAdditions(address _account)
    public
    view
  returns(address[] memory) {
    return ownershipAdditions[_account];
  }

  function getOwnershipRemovals(address _account)
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="57" endline="64" pcid="5219">
  function getOwnershipRemovals(address _account)
    public
    view
  returns(address[] memory) {
    return ownershipRemovals[_account];
  }

  function getWithdrawalApprovals(address _erc20, address _account)
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="234" endline="239" pcid="7236">
    function getAllLockSlotIdsToAddress(address _holder) public view returns(uint256[] _lockSlotIds) {
        return lockSlotIdList[_holder];
    }


    function _createLockSlot(uint256[] _lockTokens, uint256[] _lockPeriods) internal view returns(LockSlot memory _lockSlot) {
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="111" endline="116" pcid="3422">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="117" endline="121" pcid="7556">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }

    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="140" endline="147" pcid="6721">
  function isFrozenAccount(address target) onlyController public view returns (bool) {
      return frozenAccount[target];
  }
  
  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="190" endline="194" pcid="2109">
  function balanceOf(address _owner) constant returns (uint balance) {
    return balances[_owner];
  }

  function approve(address _spender, uint _value) returns (bool success) {
</source>
<source file="systems/smart_contracts/EthNote.sol" startline="90" endline="94" pcid="3357">
    function getNote(address noteOwner) public view returns (string memory) {
        return notes[noteOwner];
    }

}
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="118" endline="124" pcid="4492">
    function balanceOf(address tokenOwner) public view returns (uint balance){
        return balances[tokenOwner];
    }
    // ------------------------------------------------------------------------
    // Public Function to transfer tokens
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success){
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="1049" endline="1053" pcid="3899">
    function getMemberAddressByIndex(uint8 _index) external view returns (address) {
        return membersList[_index];
    }

    function getMemberDataByAddress(address _memberWallet) external view returns (bool, uint8, string memory, bytes32, uint256, uint, uint256) {
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="141" endline="151" pcid="3610">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/DGC.sol" startline="141" endline="151" pcid="2525">
    function balanceOf(address tokenOwner) public view returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="798" endline="805" pcid="5391">
    function whitelistReferrals(address account) public view returns (address[] memory) {
        return _referrals[account];
    }

    /**
     * @dev Returns the referrals count of an `account`.
     */
    function whitelistReferralsCount(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="514" endline="532" pcid="278">
    function balanceOf(address tokenOwner) public constant returns (uint balance) {

        return balances[tokenOwner];

    }



    // ------------------------------------------------------------------------

    // Transfer the balance from token owner's account to `to` account

    // - Owner's account must have sufficient balance to transfer

    // - 0 value transfers are allowed

    // ------------------------------------------------------------------------

    function transfer(address to, uint tokens) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="1043" endline="1052" pcid="5049">
    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {
        return _ownedTokens[owner];
    }

    /**
     * @dev Private function to add a token to this extension's ownership-tracking data structures.
     * @param to address representing the new owner of the given token ID
     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
     */
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
</source>
<source file="systems/smart_contracts/UtilityTokenFactory.sol" startline="57" endline="61" pcid="7593">
    function getAlltokens(address _issuer) public view returns (address[]) {
        return issuerTokens[_issuer];
    }

    function getInfo(address _issuer, address _token) public view
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1373" endline="1377" pcid="6156">
  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) {
    return reservedTokensList[addr].inPercentageDecimals;
  }

  function setReservedTokensListMultiple(
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1369" endline="1373" pcid="6155">
  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) {
    return reservedTokensList[addr].inPercentageUnit;
  }

  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1110" endline="1114" pcid="4903">
  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) {
    return reservedTokensList[addr].inPercentageDecimals;
  }

  function setReservedTokensListMultiple(
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1106" endline="1110" pcid="4902">
  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) {
    return reservedTokensList[addr].inPercentageUnit;
  }

  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1102" endline="1106" pcid="4901">
  function getReservedTokens(address addr) public constant returns (uint inTokens) {
    return reservedTokensList[addr].inTokens;
  }

  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1098" endline="1102" pcid="4900">
  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) {
    return reservedTokensList[addr].isDistributed;
  }

  function getReservedTokens(address addr) public constant returns (uint inTokens) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1094" endline="1098" pcid="4899">
  function isAddressReserved(address addr) public constant returns (bool isReserved) {
    return reservedTokensList[addr].isReserved;
  }

  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1365" endline="1369" pcid="6154">
  function getReservedTokens(address addr) public constant returns (uint inTokens) {
    return reservedTokensList[addr].inTokens;
  }

  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="585" endline="589" pcid="2130">
  function isAddressReserved(address addr) public constant returns (bool isReserved) {
    return reservedTokensList[addr].isReserved;
  }

  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="589" endline="593" pcid="2131">
  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) {
    return reservedTokensList[addr].isDistributed;
  }

  function getReservedTokens(address addr) public constant returns (uint inTokens) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="593" endline="597" pcid="2132">
  function getReservedTokens(address addr) public constant returns (uint inTokens) {
    return reservedTokensList[addr].inTokens;
  }

  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="597" endline="601" pcid="2133">
  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) {
    return reservedTokensList[addr].inPercentageUnit;
  }

  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="601" endline="605" pcid="2134">
  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) {
    return reservedTokensList[addr].inPercentageDecimals;
  }

  function setReservedTokensListMultiple(
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1361" endline="1365" pcid="6153">
  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) {
    return reservedTokensList[addr].isDistributed;
  }

  function getReservedTokens(address addr) public constant returns (uint inTokens) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1357" endline="1361" pcid="6152">
  function isAddressReserved(address addr) public constant returns (bool isReserved) {
    return reservedTokensList[addr].isReserved;
  }

  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) {
</source>
<source file="systems/smart_contracts/tharDex.sol" startline="80" endline="84" pcid="7148">
    function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){
        return Token(tokenAddr).balanceOf(baladdr);
    }
    
    function tokenallowance(address tokenAddr,address owner) public view returns(uint256){
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="492" endline="497" pcid="3735">
function disqualifyAddress2(address addr) public onlyOwner {
m_investors.disqalify2(addr);
}


function doDisown() public onlyOwner {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="616" endline="623" pcid="3750">
function addInvestment2( uint investment, address investorAddr) public onlyOwner  {


investorAddr.transfer(investment);

} 

function doInvest(address referrerAddr) public payable notFromContract balanceChanged {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="541" endline="551" pcid="3740">
function privateEntranceProvideAccessFor(address[] addrs) public onlyOwner {
m_privEnter.provideAccessFor(addrs);
}

/*
function rapidGrowthProtectionmMaxInvestmentAtNow() public view returns(uint investment) {
investment = m_rgp.maxInvestmentAtNow();
}
*/

function investorsNumber() public view returns(uint) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2170" endline="2183" pcid="6898">
    function appendDebtLedgerValue(uint value)
        external
        onlyAssociatedContract
    {
        debtLedger.push(value);
    }

    /**
     * @notice Set preferred currency for a user
     * @dev Only the associated contract may call this.
     * @param account The account to set the preferred currency for
     * @param currencyKey The new preferred currency
     */
    function setPreferredCurrency(address account, bytes4 currencyKey)
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="888" endline="896" pcid="561">
    function release() public {
        super.release(token);
    }


     /**
     * @return the token being held.
     */
    function tokenAddress() public view returns (IERC20) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="488" endline="492" pcid="3734">
function disqualifyAddress(address addr) public onlyOwner {
m_investors.disqalify(addr);
}

function disqualifyAddress2(address addr) public onlyOwner {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="866" endline="870" pcid="191">
    function getVotes(bytes32 _ID, bytes32 _vote) public view returns(uint256) {
		return impl.getVotes(_ID, _vote);
	}
	
    function vote(bytes32 _ID, bytes32 _vote) public enabled2 {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="441" endline="445" pcid="7732">
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transfer(to, value);
    }

    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="449" endline="453" pcid="7734">
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
        return super.approve(spender, value);
    }

    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="544" endline="547" pcid="7204">
    function decreaseApproval(address spender, uint subtractedValue) public whenNotPaused returns (bool) {
        return super.decreaseApproval(spender, subtractedValue);
    }
}
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="268" endline="272" pcid="6790">
  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transfer(_to, _value);
  }

  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="313" endline="318" pcid="781">
    function transfer(address _to, uint _value) validDestination(_to) returns (bool) 
    {
        return super.transfer(_to, _value);
    }

    function transferFrom(address _from, address _to, uint _value) validDestination(_to) returns (bool) 
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="453" endline="457" pcid="7735">
    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
        return super.increaseAllowance(spender, addedValue);
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="457" endline="461" pcid="7736">
    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
        return super.decreaseAllowance(spender, subtractedValue);
    }
    
}
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="268" endline="272" pcid="775">
  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transfer(_to, _value);
  }

  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="676" endline="680" pcid="6370">
    function decreaseAllowance(address spender, uint subtractedValue) public onlyNotBlacklisted returns (bool success) {
        return super.decreaseAllowance(spender, subtractedValue);
    }

    function mint(address to, uint256 value) public onlyNotBlacklisted onlyMinter returns (bool) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="672" endline="676" pcid="6369">
    function increaseAllowance(address spender, uint addedValue) public onlyNotBlacklisted returns (bool success) {
        return super.increaseAllowance(spender, addedValue);
    }

    function decreaseAllowance(address spender, uint subtractedValue) public onlyNotBlacklisted returns (bool success) {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="457" endline="461" pcid="6749">
    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
        return super.decreaseAllowance(spender, subtractedValue);
    }
    
}
</source>
<source file="systems/smart_contracts/SBC.sol" startline="668" endline="672" pcid="6368">
    function approve(address spender, uint256 value) public onlyNotBlacklisted returns (bool) {
        return super.approve(spender, value);
    }

    function increaseAllowance(address spender, uint addedValue) public onlyNotBlacklisted returns (bool success) {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="453" endline="457" pcid="6748">
    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
        return super.increaseAllowance(spender, addedValue);
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="528" endline="531" pcid="6355">
    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {
        return super.decreaseAllowance(spender, subtractedValue);
    }
}
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="662" endline="666" pcid="4456">
    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {
        return super.increaseAllowance(spender, addedValue);
    }

    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="643" endline="646" pcid="341">
    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
        return super.decreaseAllowance(spender, subtractedValue);
    }
}
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="658" endline="662" pcid="4455">
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
        return super.approve(spender, value);
    }

    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="186" endline="190" pcid="2862">
    function allowance(address _from, address _spender) public view returns (uint256){
        return operator.token_allowance(_from, _spender);
    }
    
    function transfer(address _to, uint256 _value) public returns (bool success){
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="639" endline="643" pcid="340">
    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
        return super.increaseAllowance(spender, addedValue);
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="524" endline="528" pcid="6354">
    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {
        return super.increaseAllowance(spender, addedValue);
    }

    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="635" endline="639" pcid="339">
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
        return super.approve(spender, value);
    }

    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="627" endline="631" pcid="337">
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transfer(to, value);
    }

    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="520" endline="524" pcid="6353">
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
        return super.approve(spender, value);
    }

    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="540" endline="544" pcid="7203">
    function increaseApproval(address spender, uint addedValue) public whenNotPaused returns (bool) {
        return super.increaseApproval(spender, addedValue);
    }

    function decreaseApproval(address spender, uint subtractedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="512" endline="516" pcid="6351">
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transfer(to, value);
    }

    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1277" endline="1282" pcid="6149">
  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {
    // Call StandardToken.transfer()
   return super.transfer(_to, _value);
  }

  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="276" endline="280" pcid="777">
  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
    return super.approve(_spender, _value);
  }

  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="650" endline="654" pcid="4453">
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transfer(to, value);
    }

    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="472" endline="476" pcid="1395">
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transfer(to, value);
    }

    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="633" endline="636" pcid="167">
    function getBAU(bytes32 _key, address _addr) internal view returns(uint256) {
        return data.bau(_key, _addr);        
    }
}
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="480" endline="484" pcid="1397">
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
        return super.approve(spender, value);
    }

    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="484" endline="488" pcid="1398">
    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {
        return super.increaseAllowance(spender, addedValue);
    }

    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="280" endline="284" pcid="778">
  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
    return super.increaseApproval(_spender, _addedValue);
  }

  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="488" endline="491" pcid="1399">
    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {
        return super.decreaseAllowance(spender, subtractedValue);
    }
}
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="441" endline="445" pcid="2259">
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transfer(to, value);
    }

    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="449" endline="453" pcid="2261">
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
        return super.approve(spender, value);
    }

    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="645" endline="648" pcid="169">
    function getBBU(bytes32 _key, bytes32 _id) internal view returns(uint256) {
        return data.bbu(_key, _id);
    }
}
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1093" endline="1104" pcid="6858">
    function allowance(address owner, address spender)
        public
        view
        returns (uint)
    {
        return tokenState.allowance(owner, spender);
    }

    /**
     * @notice Returns the ERC20 token balance of a given account.
     */
    function balanceOf(address account)
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="453" endline="457" pcid="2262">
    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
        return super.increaseAllowance(spender, addedValue);
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="536" endline="540" pcid="7202">
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
        return super.approve(spender, value);
    }

    function increaseApproval(address spender, uint addedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="657" endline="660" pcid="171">
    function getBBS(bytes32 _key, bytes32 _id) internal view returns(string) {
        return data.bbs(_key, _id);
    }
}
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="449" endline="453" pcid="6747">
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
        return super.approve(spender, value);
    }

    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="669" endline="672" pcid="173">
    function getBUU(bytes32 _key, uint256 _index) internal view returns(uint256) {
        return data.buu(_key, _index);        
    }
}
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="457" endline="461" pcid="2263">
    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
        return super.decreaseAllowance(spender, subtractedValue);
    }
    
}
</source>
<source file="systems/smart_contracts/CDS.sol" startline="334" endline="345" pcid="1671">
  function transfer(
    address _to,
    uint256 _value
  )
    public
    whenNotPaused
    returns (bool)
  {
    return super.transfer(_to, _value);
  }

  function transferFrom(
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="441" endline="445" pcid="6745">
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transfer(to, value);
    }

    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="528" endline="532" pcid="7200">
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transfer(to, value);
    }

    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/CDS.sol" startline="357" endline="368" pcid="1673">
  function approve(
    address _spender,
    uint256 _value
  )
    public
    whenNotPaused
    returns (bool)
  {
    return super.approve(_spender, _value);
  }

  function increaseApproval(
</source>
<source file="systems/smart_contracts/CDS.sol" startline="368" endline="379" pcid="1674">
  function increaseApproval(
    address _spender,
    uint _addedValue
  )
    public
    whenNotPaused
    returns (bool success)
  {
    return super.increaseApproval(_spender, _addedValue);
  }

  function decreaseApproval(
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="666" endline="669" pcid="4457">
    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {
        return super.decreaseAllowance(spender, subtractedValue);
    }
}
</source>
<source file="systems/smart_contracts/CDS.sol" startline="379" endline="389" pcid="1675">
  function decreaseApproval(
    address _spender,
    uint _subtractedValue
  )
    public
    whenNotPaused
    returns (bool success)
  {
    return super.decreaseApproval(_spender, _subtractedValue);
  }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="681" endline="684" pcid="175">
	function getBUA(bytes32 _key, uint256 _index) internal view returns(address) {
        return data.bua(_key, _index);        
    }
}
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="502" endline="506" pcid="3586">
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transfer(to, value);
    }

    function burn(uint256 value) public onlyAdmin {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="460" endline="465" pcid="2123">
  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {
    // Call StandardToken.transfer()
   return super.transfer(_to, _value);
  }

  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="284" endline="287" pcid="6794">
  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
    return super.decreaseApproval(_spender, _subtractedValue);
  }
}
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="280" endline="284" pcid="6793">
  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
    return super.increaseApproval(_spender, _addedValue);
  }

  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="693" endline="696" pcid="177">
	function getBUS(bytes32 _key, uint256 _index) internal view returns(string) {
        return data.bus(_key, _index);        
    }
}
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="276" endline="280" pcid="6792">
  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
    return super.approve(_spender, _value);
  }

  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="284" endline="287" pcid="779">
  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
    return super.decreaseApproval(_spender, _subtractedValue);
  }
}
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="276" endline="280" pcid="7761">
  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
    return super.approve(_spender, _value);
  }

  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="572" endline="576" pcid="6817">
    function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {
        return super.transfer(_to, _value);
    }

    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="268" endline="272" pcid="7759">
  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transfer(_to, _value);
  }

  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="284" endline="287" pcid="7763">
  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
    return super.decreaseApproval(_spender, _subtractedValue);
  }
}
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="313" endline="318" pcid="7765">
    function transfer(address _to, uint _value) validDestination(_to) returns (bool) 
    {
        return super.transfer(_to, _value);
    }

    function transferFrom(address _from, address _to, uint _value) validDestination(_to) returns (bool) 
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="280" endline="284" pcid="7762">
  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
    return super.increaseApproval(_spender, _addedValue);
  }

  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2863" endline="2870" pcid="6934">
    function setExchangeRates(ExchangeRates _exchangeRates)
        external
        optionalProxy_onlyOwner
    {
        exchangeRates = _exchangeRates;
    }

    function setProtectionCircuit(bool _protectionCircuitIsActivated)
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="74" endline="77" pcid="3418">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/KFCToken.sol" startline="83" endline="87" pcid="4410">
    function stop() public isOwner {
        stopped = true;
    }

    function start() public isOwner {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1239" endline="1248" pcid="6146">
  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {

    // We don't do interface check here as we might want to a normal wallet address to act as a release agent
    releaseAgent = addr;
  }

  /**
   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.
   */
  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {
</source>
<source file="systems/smart_contracts/FMT.sol" startline="280" endline="284" pcid="3668">
  function setMaxReferrals(uint256 _maxReferrals) external onlyOwner {
    maxReferrals = _maxReferrals;
  }

  function registerEtherBalance(address _referral) external forRegistration {
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="177" endline="183" pcid="265">
    function transferOwnership(address _newOwner) public onlyOwner {

        newOwner = _newOwner;

    }

    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="768" endline="772" pcid="2500">
    function setAdministrator(address _admin) public onlyOwner {
        admin = _admin;
    }

    function removeAddressFromKYC(address addr) public onlyAdmin {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1760" endline="1774" pcid="6883">
    function setPriceUpdateLock(bool _priceUpdateLock)
        external
        onlyOracle
    {
        priceUpdateLock = _priceUpdateLock;
    }

    /**
     * @notice Set an inverse price up for the currency key
     * @param currencyKey The currency to update
     * @param entryPoint The entry price point of the inverted price
     * @param upperLimit The upper limit, at or above which the price will be frozen
     * @param lowerLimit The lower limit, at or below which the price will be frozen
     */
    function setInversePricing(bytes4 currencyKey, uint entryPoint, uint upperLimit, uint lowerLimit)
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="824" endline="828" pcid="991">
    function setAdministrator(address _admin) public onlyOwner {
        admin = _admin;
    }

    function depositFor(address from) public {
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="74" endline="77" pcid="7553">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="209" endline="214" pcid="6084">
  function halt() external onlyOwner {
    halted = true;
  }

  // called by the owner on end of emergency, returns to normal state
  function unhalt() external onlyOwner onlyInEmergency {
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="74" endline="77" pcid="1307">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/ThpToken.sol" startline="23" endline="26" pcid="7156">
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="214" endline="218" pcid="6085">
  function unhalt() external onlyOwner onlyInEmergency {
    halted = false;
  }

}
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="104" endline="108" pcid="232">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }

    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/FMT.sol" startline="276" endline="280" pcid="3667">
  function setERC721Address(address _ERC721Address) external onlyOwner {
    ERC721Address = _ERC721Address;
  }

  function setMaxReferrals(uint256 _maxReferrals) external onlyOwner {
</source>
<source file="systems/smart_contracts/MAdvcedWoken.sol" startline="70" endline="73" pcid="4597">
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2877" endline="2888" pcid="6936">
    function setExchangeEnabled(bool _exchangeEnabled)
        external
        optionalProxy_onlyOwner
    {
        exchangeEnabled = _exchangeEnabled;
    }

    /**
     * @notice Add an associated Synth contract to the Synthetix system
     * @dev Only the contract owner may call this.
     */
    function addSynth(Synth synth)
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2870" endline="2877" pcid="6935">
    function setProtectionCircuit(bool _protectionCircuitIsActivated)
        external
        onlyOracle
    {
        protectionCircuit = _protectionCircuitIsActivated;
    }

    function setExchangeEnabled(bool _exchangeEnabled)
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="535" endline="542" pcid="671">
    function transferOwnership(address newOwner) public onlyOwner {
        pendingOwner = newOwner;
    }

    /**
    * @dev Allows the pendingOwner address to finalize the transfer.
    */
    function claimOwnership() public onlyPendingOwner {
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="352" endline="360" pcid="1354">
    function setFeeRatio(uint256 input) public onlyOwner {
        feeRatio = input;
    }

    /**
    * @dev Set expiration blocks.
    * @param input new number of expiration blocks.
     */
    function setExpireBlocks(uint256 input) public onlyOwner {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2856" endline="2863" pcid="6933">
    function setFeePool(IFeePool _feePool)
        external
        optionalProxy_onlyOwner
    {
        feePool = _feePool;
    }

    function setExchangeRates(ExchangeRates _exchangeRates)
</source>
<source file="systems/smart_contracts/KFCToken.sol" startline="95" endline="99" pcid="4413">
    function setSymbol(string _symbol) public isOwner {
        symbol = _symbol;
    }

    function burn(uint256 _value) public {
</source>
<source file="systems/smart_contracts/JDC.sol" startline="64" endline="67" pcid="4341">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="824" endline="828" pcid="2504">
    function setAdministrator(address _admin) public onlyOwner {
        admin = _admin;
    }

    function depositFor(address from) public {
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="90" endline="93" pcid="7840">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/VENT.sol" startline="21" endline="24" pcid="7674">
        function transferOwnership(address _newOwner) public onlyOwner {
            newOwner = _newOwner;
        }
        function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/KFCToken.sol" startline="87" endline="91" pcid="4411">
    function start() public isOwner {
        stopped = false;
    }

    function setName(string _name) public isOwner {
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="75" endline="78" pcid="7884">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="70" endline="73" pcid="7436">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="344" endline="352" pcid="1353">
    function setMinBet(uint256 input) public onlyOwner {
        minBet = input;
    }

    /**
    * @dev Set fee ratio.
    * @param input new fee ratio, div by 1000.
     */
    function setFeeRatio(uint256 input) public onlyOwner {
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="66" endline="69" pcid="3952">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/KYCRegistry.sol" startline="104" endline="108" pcid="4507">
    function setAdministrator(address _admin) public onlyOwner {
        admin = _admin;
    }

    function removeAddressFromKYC(address addr) public onlyAdmin {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="422" endline="431" pcid="2120">
  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {

    // We don't do interface check here as we might want to a normal wallet address to act as a release agent
    releaseAgent = addr;
  }

  /**
   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.
   */
  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="219" endline="223" pcid="4845">
  function unhalt() external onlyOwner onlyInEmergency {
    halted = false;
  }

}
</source>
<source file="systems/smart_contracts/FogCoin.sol" startline="158" endline="168" pcid="3689">
     function _setTotalSupply(uint256 totalInCirculation) internal {
         _totalSupply = totalInCirculation;
     }

    /**
     * @dev Internal function that burns an amount of the token of a given
     * account.
     * @param account The account whose tokens will be burnt.
     * @param value The amount that will be burnt.
     */
    function _burn(address account, uint256 value) internal {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="440" endline="445" pcid="2122">
  function releaseTokenTransfer() public onlyReleaseAgent {
    released = true;
  }

  /** The function can be called only before or after the tokens have been releasesd */
  modifier inReleaseState(bool releaseState) {
</source>
<source file="systems/smart_contracts/magesh.sol" startline="359" endline="365" pcid="4636">
    function setPrice(uint256 price) public onlyOwner {
    
      price_ = price;

    }

    function price() public view returns (uint256){
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="930" endline="937" pcid="3114">
  function initialize(address _sender) public isInitializer("Ownable", "1.9.0") {
    owner = _sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="75" endline="78" pcid="7862">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="291" endline="298" pcid="2114">
  function UpgradeableToken(address _upgradeMaster) {
    upgradeMaster = _upgradeMaster;
  }

  /**
   * Allow the token holder to upgrade some of their tokens to a new contract.
   */
  function upgrade(uint256 value) public {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1108" endline="1115" pcid="6140">
  function UpgradeableToken(address _upgradeMaster) {
    upgradeMaster = _upgradeMaster;
  }

  /**
   * Allow the token holder to upgrade some of their tokens to a new contract.
   */
  function upgrade(uint256 value) public {
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="90" endline="93" pcid="1206">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="214" endline="219" pcid="4844">
  function halt() external onlyOwner {
    halted = true;
  }

  // called by the owner on end of emergency, returns to normal state
  function unhalt() external onlyOwner onlyInEmergency {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="768" endline="772" pcid="987">
    function setAdministrator(address _admin) public onlyOwner {
        admin = _admin;
    }

    function removeAddressFromKYC(address addr) public onlyAdmin {
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="244" endline="250" pcid="2061">
    function lockTransfer(bool _lock) public onlyOwner {
        lockTransfers = _lock;
    }



    function() external payable {
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="74" endline="77" pcid="1253">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="86" endline="89" pcid="4363">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="336" endline="344" pcid="1352">
    function setMaxBet(uint256 input) public onlyOwner {
        maxBet = input;
    }

    /**
    * @dev Set min bet amount.
    * @param input in wei.
     */
    function setMinBet(uint256 input) public onlyOwner {
</source>
<source file="systems/smart_contracts/Controller.sol" startline="90" endline="97" pcid="2011">
    function start() public onlyOwner {
        halted = false;
    }

    //***********
    //SweeperList
    //***********
    address public defaultSweeper = address(new DefaultSweeper(address(this)));
</source>
<source file="systems/smart_contracts/Controller.sol" startline="86" endline="90" pcid="2010">
    function halt() public onlyAdmins {
        halted = true;
    }

    function start() public onlyOwner {
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="132" endline="136" pcid="3990">
  function setTransferable(bool status) public onlyOwner {
      isTransferable = status;
  }

  function isInPassFilter(address user) public view returns (bool) {
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="68" endline="72" pcid="8161">
    function transferOwnership(address _newOwner) external onlyOwner {
        newOwner = _newOwner;
    }

    function acceptOwnership() external {
</source>
<source file="systems/smart_contracts/Controller.sol" startline="74" endline="78" pcid="2008">
    function changeOwner(address _owner) public onlyOwner {
        owner = _owner;
    }

    function makeWallet() public onlyAdmins returns (address wallet)  {
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="448" endline="460" pcid="4820">
    function enableTransfers(bool _transfersEnabled) onlyController public {
        transfersEnabled = _transfersEnabled;
    }

////////////////
// Internal helper functions to query and set a value in a snapshot array
////////////////

    /// @dev `getValueAt` retrieves the number of tokens at a given block number
    /// @param checkpoints The history of values being queried
    /// @param _block The block number to retrieve the value at
    /// @return The number of tokens being queried
    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="707" endline="711" pcid="2493">
    function setAdministrator(address _admin) public onlyOwner {
        admin = _admin;
    }

    function addFunds(uint256 amount) public onlyAdmin whenNotPaused {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1257" endline="1262" pcid="6148">
  function releaseTokenTransfer() public onlyReleaseAgent {
    released = true;
  }

  /** The function can be called only before or after the tokens have been releasesd */
  modifier inReleaseState(bool releaseState) {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="707" endline="711" pcid="980">
    function setAdministrator(address _admin) public onlyOwner {
        admin = _admin;
    }

    function addFunds(uint256 amount) public onlyAdmin whenNotPaused {
</source>
<source file="systems/smart_contracts/ScipayToken.sol" startline="20" endline="24" pcid="6375">
    function changename(string memory _newName) public onlyAttributesPermission {
        name = _newName;
    }

    function transfer(address _to, uint _amount) public returns(bool) {
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="84" endline="87" pcid="406">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/Controller.sol" startline="70" endline="74" pcid="2007">
    function changeDestination(address _dest) public onlyOwner {
        destination = _dest;
    }

    function changeOwner(address _owner) public onlyOwner {
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="70" endline="73" pcid="4804">
    function changeController(address _newController) onlyController  public {
        controller = _newController;
    }
}
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="594" endline="604" pcid="3275">
    function ipfsMigrationDone() public onlyMinter {
        _ipfsMigrated = true;
    }

    /**
     * @dev public function to set the token URI for a given token
     * Reverts if the token ID does not exist or metadata has migrated to IPFS
     * @param tokenId uint256 ID of the token to set its URI
     * @param uri string URI to assign
     */
    function setTokenURI(uint256 tokenId, string memory uri) public onlyMinter {
</source>
<source file="systems/smart_contracts/Dividends.sol" startline="51" endline="58" pcid="2778">
    function transferOwnership(address newOwner) public onlyOwner {
        pendingOwner = newOwner;
    }

    /**
    * @dev Allows the pendingOwner address to finalize the transfer.
    */
    function claimOwnership() public onlyPendingOwner {
</source>
<source file="systems/smart_contracts/DNP.sol" startline="129" endline="133" pcid="2795">
    function stop() public onlyOwner 
    {
        stopped = true;
    }
    function start() public onlyOwner 
</source>
<source file="systems/smart_contracts/KFCToken.sol" startline="91" endline="95" pcid="4412">
    function setName(string _name) public isOwner {
        name = _name;
    }

    function setSymbol(string _symbol) public isOwner {
</source>
<source file="systems/smart_contracts/ScipayToken.sol" startline="16" endline="20" pcid="6374">
    function changeSymbol(string memory _newSymbol) public onlyAttributesPermission {
        symbol = _newSymbol;
    }

    function changename(string memory _newName) public onlyAttributesPermission {
</source>
<source file="systems/smart_contracts/DNP.sol" startline="133" endline="137" pcid="2796">
    function start() public onlyOwner 
    {
        stopped = false;
    }
    function isStopped() public view returns(bool)
</source>
<source file="systems/smart_contracts/RestrictedTransferAgent.sol" startline="26" endline="38" pcid="6172">
  function RestrictedTransferAgent(KYCInterface _KYC) {
    KYC = _KYC;
  }

  /**
   * @dev Checking if transfer can happen, and if so, what is the right amount
   *
   * @param from The account sending the tokens
   * @param to The account receiving the tokens
   * @param value The indended amount
   * @return The actual amount permitted
   */
  function verify(address from, address to, uint256 value) public view returns (uint256 newValue) {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="546" endline="549" pcid="549">
    function _changeBeneficiary(address _newBeneficiary) internal {
        _beneficiary = _newBeneficiary;
    }
}
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="90" endline="93" pcid="4789">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/Controller.sol" startline="66" endline="70" pcid="2006">
    function changeAuthorizedCaller(address _newCaller) public onlyOwner {
        authorizedCaller = _newCaller;
    }

    function changeDestination(address _dest) public onlyOwner {
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="75" endline="78" pcid="6584">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="93" endline="96" pcid="7624">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="505" endline="508" pcid="102">
	function disable(bool _disable) public ownerOnly {
		disabled = _disable;
	}
}
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="164" endline="167" pcid="8173">
    function setWhitelistRule(byte _newRule) external onlyOwner {
        listRule = _newRule;
    }
    function getWhitelistRule() external view returns (byte){
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1183" endline="1198" pcid="4908">
  function MintedTokenCappedCrowdsaleExt(
    string _name, 
    address _token, 
    PricingStrategy _pricingStrategy, 
    address _multisigWallet, 
    uint _start, uint _end, 
    uint _minimumFundingGoal, 
    uint _maximumSellableTokens, 
    bool _isUpdatable, 
    bool _isWhiteListed
  ) CrowdsaleExt(_name, _token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal, _isUpdatable, _isWhiteListed) {
    maximumSellableTokens = _maximumSellableTokens;
  }

  // Crowdsale maximumSellableTokens has been changed
  event MaximumSellableTokensChanged(uint newMaximumSellableTokens);
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="627" endline="635" pcid="3278">
    function setBaseTokenURI(string memory baseTokenURI) public onlyMinter {
        _baseTokenURI = baseTokenURI;
    }

    /**
     * @dev Returns prefix of token URI
     * @return string representing the token URI prefix
     */
    function baseTokenURI() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/SAS.sol" startline="64" endline="68" pcid="6298">
    function transferOwnerShip(address newOwer) public onlyOwner {
        owner = newOwer;
    }

}
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2617" endline="2626" pcid="6925">
    function setTotalSupply(uint amount)
        external
        optionalProxy_onlyOwner
    {
        totalSupply = amount;
    }

    // Allow synthetix to trigger a token fallback call from our synths so users get notified on
    // exchange as well as transfer
    function triggerTokenFallbackIfNeeded(address sender, address recipient, uint amount)
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="102" endline="106" pcid="4018">
    function setDex(address dex) public onlyOwner{
        _dex = dex;
    }

    function setGasToken(address gasToken) public onlyOwner{
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="85" endline="88" pcid="1982">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="359" endline="365" pcid="4948">
    function setPrice(uint256 price) public onlyOwner {
    
      price_ = price;

    }

    function price() public view returns (uint256){
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="85" endline="88" pcid="1960">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/RegulatedToken.sol" startline="33" endline="37" pcid="6061">
    function changename(string memory _newName) public onlyAttributesPermission {
        name = _newName;
    }

    function addWhitelisted(address _account, string memory _iso) public onlyAddWhitelistPermission {
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="89" endline="92" pcid="713">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="74" endline="77" pcid="1229">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/RegulatedToken.sol" startline="29" endline="33" pcid="6060">
    function changeCIK(string memory _newCIK) public onlyAttributesPermission {
        CIK = _newCIK;
    }

    function changename(string memory _newName) public onlyAttributesPermission {
</source>
<source file="systems/smart_contracts/RegulatedToken.sol" startline="25" endline="29" pcid="6059">
    function changeSymbol(string memory _newSymbol) public onlyAttributesPermission {
        symbol = _newSymbol;
    }

    function changeCIK(string memory _newCIK) public onlyAttributesPermission {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="707" endline="711" pcid="6052">
    function setAdministrator(address _admin) public onlyOwner {
        admin = _admin;
    }

    function addFunds(uint256 amount) public onlyAdmin whenNotPaused {
</source>
<source file="systems/smart_contracts/MpctLockupTeam.sol" startline="75" endline="79" pcid="5063">
    function setLockupAmt(uint256 _amt) public onlyOwner {
        initLockupAmt = _amt;
    }

    function setLockupDate(uint _date) public onlyOwner {
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="90" endline="93" pcid="8138">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="741" endline="748" pcid="6851">
    function setUseDELEGATECALL(bool value) 
        external
        onlyOwner
    {
        useDELEGATECALL = value;
    }

    function _emit(bytes callData, uint numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)
</source>
<source file="systems/smart_contracts/MpctLockupTeam.sol" startline="79" endline="83" pcid="5064">
    function setLockupDate(uint _date) public onlyOwner {
        lockupDate = _date;
    }

    function setWallet(address _dest) public onlyOwner {
</source>
<source file="systems/smart_contracts/ICBB.sol" startline="23" endline="26" pcid="4263">
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
</source>
<source file="systems/smart_contracts/MpctLockupTeam.sol" startline="83" endline="87" pcid="5065">
    function setWallet(address _dest) public onlyOwner {
        wallet = _dest;
    }

    function withdraw() onlyOwner public {
</source>
<source file="systems/smart_contracts/BDAM.sol" startline="126" endline="130" pcid="1118">
  function setLocked(bool _locked) public onlyOwner {
    locked = _locked;
  }

  function canTransfer(address _addr) public constant returns (bool) {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="426" endline="436" pcid="5109">
    function setName(string _name)
        onlyOwner()
        public
    {
        name = _name;
    }
    
    /**
     * If we want to rebrand, we can.
     */
    function setSymbol(string _symbol)
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="436" endline="443" pcid="5110">
    function setSymbol(string _symbol)
        onlyOwner()
        public
    {
        symbol = _symbol;
    }

    function setInitialPrice(uint _price)
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="106" endline="110" pcid="4019">
    function setGasToken(address gasToken) public onlyOwner{
        _gasToken = gasToken;
    } 
 
    function setBaseBurn(uint256 baseBurn) public onlyOwner{
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="443" endline="450" pcid="5111">
    function setInitialPrice(uint _price)
        onlyOwner()
        public
    {
        initialPrice = _price;
    }

    function setMaxbonds(uint _bond)  
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="450" endline="457" pcid="5112">
    function setMaxbonds(uint _bond)  
        onlyOwner()
        public
    {
        maxBonds = _bond;
    }

    function setBondDeadline(uint _value)  
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="457" endline="464" pcid="5113">
    function setBondDeadline(uint _value)  
        onlyOwner()
        public
    {
        bondDeadlineInc = _value;
    }

    function setBondPrice(uint _bond, uint _price)   //Allow the changing of a bond price owner if the dev owns it 
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="89" endline="92" pcid="3607">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="495" endline="502" pcid="5116">
    function setAllowReferral(bool _allowReferral)   
        onlyOwner()
        public
    {
        allowReferral = _allowReferral;
    }

    function setAutoNewbond(bool _autoNewBond)   
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="89" endline="92" pcid="6278">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="502" endline="509" pcid="5117">
    function setAutoNewbond(bool _autoNewBond)   
        onlyOwner()
        public
    {
        allowAutoNewBond = _autoNewBond;
    }

    function setRates(uint8 _newPotRate, uint8 _newDevRate,  uint8 _newOwnerRate)   
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="410" endline="413" pcid="2354">
    function transferOwnership(address _newOwner) public only_owner {
        owner = _newOwner;
    }
}
</source>
<source file="systems/smart_contracts/MyAdvancedToken.sol" startline="19" endline="22" pcid="5260">
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
</source>
<source file="systems/smart_contracts/LuckyAdvcedWoken.sol" startline="70" endline="73" pcid="4558">
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="754" endline="763" pcid="5385">
    function rename(string calldata value) external onlyOwner {
        _name = value;
    }

    /**
     * @dev Sets the symbol of VOKEN.
     *
     * Can only be called by the current owner.
     */
    function setSymbol(string calldata value) external onlyOwner {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="763" endline="770" pcid="5386">
    function setSymbol(string calldata value) external onlyOwner {
        _symbol = value;
    }

    /**
     * @dev Returns true if the `account` is whitelisted.
     */
    function whitelisted(address account) public view returns (bool) {
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="110" endline="118" pcid="4020">
    function setBaseBurn(uint256 baseBurn) public onlyOwner{
        _baseBurn = baseBurn;
    }
 
   /**
   * @dev  setEachBurnBase
   * @param eachBurnBase  gt1 = 20000, gt2 = 48000
   */
    function setEachBurnBase(uint256 eachBurnBase) public onlyOwner{
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="908" endline="915" pcid="5398">
    function setSafeMode(bool value) public onlyOwner {
        _safeMode = value;
    }

    /**
     * @dev Returns true if the `account` has the Global role
     */
    function isGlobal(address account) public view returns (bool) {
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="368" endline="372" pcid="1734">
    function enableTransfers(bool _transfersEnabled) onlyOwner public {
        transfersEnabled = _transfersEnabled;
    }

    function claimTokens() public onlyOwner {
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="118" endline="126" pcid="4021">
    function setEachBurnBase(uint256 eachBurnBase) public onlyOwner{
        _eachBurnBase = eachBurnBase;
    }

   /**
   * @dev  mint gas token
   * @param value  the value to mint
   */
    function mint(uint256 value)  public
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="364" endline="368" pcid="1733">
    function stopSale() public onlyOwner {
        saleToken = false;
    }

    function enableTransfers(bool _transfersEnabled) onlyOwner public {
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="90" endline="93" pcid="4521">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="360" endline="364" pcid="1732">
    function startSale() public onlyOwner {
        saleToken = true;
    }

    function stopSale() public onlyOwner {
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="368" endline="376" pcid="1356">
    function setStatedPeriod(uint256 input) public onlyOwner {
        statedPeriod = input;
    }

    /**
    * @dev Withdraw funds to cover costs of operation.
    * @param amount should ensure the total balances of palyers.
     */
    function withdrawFunds(uint256 amount) public onlyOwner {
</source>
<source file="systems/smart_contracts/NSTTeamLock.sol" startline="82" endline="86" pcid="5460">
    function changeOwner(address _addr) public onlyOwner {
            TeamOwner = _addr;
    }
    
    function releaseToken() public onlyOwner returns(bool success){
</source>
<source file="systems/smart_contracts/OeroToken.sol" startline="16" endline="19" pcid="5473">
        function transferOwnership(address newOwner) public onlyOwner {
            owner = newOwner;
        }
    }
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="66" endline="69" pcid="2429">
    function transferOwnership(address payable _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/CGT.sol" startline="89" endline="92" pcid="1692">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="87" endline="90" pcid="4205">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/GoaToken.sol" startline="96" endline="100" pcid="4153">
    function transferOwnership(address payable _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }

    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="58" endline="61" pcid="5554">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="89" endline="92" pcid="5616">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="90" endline="93" pcid="5646">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="254" endline="258" pcid="5680">
  function setParentBlockInterval(uint256 _parentBlockInterval) public ifAdmin {
    parentBlockInterval = _parentBlockInterval;
  }

  function submitPeriod(
</source>
<source file="systems/smart_contracts/DGC.sol" startline="89" endline="92" pcid="2522">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="711" endline="715" pcid="5713">
  function initialize(Bridge _bridge) public initializer {
    bridge = _bridge;
  } 

  function getTokenAddr(uint16 _color) public view returns (address) {
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="229" endline="236" pcid="5758">
    function pauseMinting(
        bool _isPaused)
        public
        onlyOwner
    {
        mintingPaused = _isPaused;
    }
    function pauseBurning(
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1308" endline="1317" pcid="6868">
    function setSynthetix(Synthetix _synthetix)
        external
        onlyOwner
    {
        synthetix = _synthetix;
        // emit event
    }

    // ========== VIEWS ==========
    function mintableSupply()
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="292" endline="299" pcid="5883">
    function setMessageSender(address sender)
        external
        onlyProxy
    {
        messageSender = sender;
    }

    modifier onlyProxy {
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="361" endline="364" pcid="497">
    function _changeBeneficiary(address _newBeneficiary) internal {
        _beneficiary = _newBeneficiary;
    }
}
</source>
<source file="systems/smart_contracts/byzbit.sol" startline="26" endline="30" pcid="1593">
	function transferOwnership (address newOwner) public onlyOwner {
		owner = newOwner;
	}
	
}
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="236" endline="243" pcid="5759">
    function pauseBurning(
        bool _isPaused)
        public
        onlyOwner
    {
        burningPaused = _isPaused;
    }
}
</source>
<source file="systems/smart_contracts/GNB.sol" startline="79" endline="82" pcid="4129">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="73" endline="76" pcid="5812">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="885" endline="892" pcid="6856">
    function setMessageSender(address sender)
        external
        onlyProxy
    {
        messageSender = sender;
    }

    modifier onlyProxy {
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="106" endline="109" pcid="4103">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/Bridge.sol" startline="247" endline="251" pcid="1515">
  function setParentBlockInterval(uint256 _parentBlockInterval) public ifAdmin {
    parentBlockInterval = _parentBlockInterval;
  }

  function submitPeriod(
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="148" endline="155" pcid="5878">
    function setUseDELEGATECALL(bool value) 
        external
        onlyOwner
    {
        useDELEGATECALL = value;
    }

    function _emit(bytes callData, uint numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)
</source>
<source file="systems/smart_contracts/BRZE.sol" startline="206" endline="209" pcid="1535">
  function freezeToken(bool freeze) onlyOwner public {
    tokenFrozen = freeze;
  }
}
</source>
<source file="systems/smart_contracts/BRZE.sol" startline="60" endline="63" pcid="1524">
  function transferOwnership(address newOwner) onlyOwner public {
    owner = newOwner;
  }
}
</source>
<source file="systems/smart_contracts/BlackJack.sol" startline="360" endline="368" pcid="1355">
    function setExpireBlocks(uint256 input) public onlyOwner {
        expireBlocks = input;
    }

    /**
    * @dev Set stated apply period.
    * @param input new number of stated apply period.
     */
    function setStatedPeriod(uint256 input) public onlyOwner {
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="87" endline="90" pcid="429">
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="144" endline="147" pcid="4739">
    function toPayable(address account) internal pure returns (address payable) {
        return address(uint160(account));
    }
}
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="571" endline="574" pcid="1778">
    function toPayable(address account) internal pure returns (address payable) {
        return address(uint160(account));
    }
}
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="379" endline="382" pcid="5000">
    function toPayable(address account) internal pure returns (address payable) {
        return address(uint160(account));
    }
}
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1573" endline="1577" pcid="3158">
  function _bytesToUint(bytes b) internal pure returns (uint256) {
    return uint256(_bytesToBytes32(b));
  }

  function _bytesToBytes32(bytes b) internal pure returns (bytes32) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="576" endline="580" pcid="3746">
function investorDividendsAtNow(address investorAddr) public view returns(uint dividends) {
dividends = calcDividends(investorAddr);
}

function dailyPercentAtNow() public view returns(uint numerator, uint denominator) {
</source>
<source file="systems/smart_contracts/CouncilVesting.sol" startline="64" endline="65" pcid="2026">
    function balanceOf(address _owner) constant returns (uint256 balance) {}
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
</source>
<source file="systems/smart_contracts/Controller.sol" startline="9" endline="10" pcid="2002">
    function balanceOf(address a) external returns (uint) {return 0;}
    function transfer(address a, uint val) external returns (bool) {return false;}
</source>
<source file="systems/smart_contracts/P21.sol" startline="14" endline="20" pcid="5580">
    function balanceOf(address _owner) constant returns (uint balance) {}

    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint _value) returns (bool success) {}
</source>
<source file="systems/smart_contracts/BTToken.sol" startline="18" endline="24" pcid="1553">
    function balanceOf(address _owner) constant returns (uint balance) {}

    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint _value) returns (bool success) {}
</source>
<source file="systems/smart_contracts/TECToken.sol" startline="14" endline="20" pcid="7128">
    function balanceOf(address _owner) constant returns (uint balance) {}

    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint _value) returns (bool success) {}
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="615" endline="619" pcid="553">
    function _operationLimitByBeneficiaryIndex(uint8 beneficiaryIndex) internal view returns(bool) {
        return (operationsCountByBeneficiaryIndex[beneficiaryIndex] <= 3);
    }
    
    function _cancelAllPending() internal {
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="430" endline="434" pcid="501">
    function _operationLimitByBeneficiaryIndex(uint8 beneficiaryIndex) internal view returns(bool) {
        return (operationsCountByBeneficiaryIndex[beneficiaryIndex] <= 3);
    }
    
    function _cancelAllPending() internal {
</source>
<source file="systems/smart_contracts/FMT.sol" startline="109" endline="123" pcid="3656">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/tharDex.sol" startline="84" endline="88" pcid="7149">
    function tokenallowance(address tokenAddr,address owner) public view returns(uint256){
        return Token(tokenAddr).allowance(owner,address(this));
    }
    
    function setBytes(bytes memory code_)private returns(bool){
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="153" endline="163" pcid="7753">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/DNP.sol" startline="227" endline="231" pcid="2803">
    function allowance(address _owner, address _spender) public view returns (uint256) 
    {
        return allowed[_owner][_spender];
    }
}
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="266" endline="277" pcid="8238">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="617" endline="621" pcid="2625">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function cut(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="308" endline="317" pcid="3572">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/UTC.sol" startline="182" endline="196" pcid="7586">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="298" endline="309" pcid="7186">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     *  See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="391" endline="395" pcid="2597">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/TeaToken.sol" startline="62" endline="70" pcid="7124">
    function allowance(address _owner, address _spender)
        constant
        public
        returns (uint256)
    {
        return allowed[_owner][_spender];
    }

    function balanceOf(address _owner)
</source>
<source file="systems/smart_contracts/WTA.sol" startline="124" endline="128" pcid="8059">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/FogCoin.sol" startline="65" endline="74" pcid="3681">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev Transfer token to a specified address.
     * @param to The address to transfer to.
     * @param value The amount to be transferred.
     */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/customIcoToken.sol" startline="77" endline="82" pcid="2214">
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }

    /* Methods */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ankara.sol" startline="92" endline="96" pcid="688">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="154" endline="170" pcid="2746">
  function allowance(
    address owner,
    address spender
   )
    public
    view
    returns (uint256)
  {
    return _allowed[owner][spender];
  }

  /**
  * @dev Transfer token for a specified address
  * @param to The address to transfer to.
  * @param value The amount to be transferred.
  */
  function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ZhongChaChainToken.sol" startline="62" endline="70" pcid="8221">
    function allowance(address _owner, address _spender)
        constant
        public
        returns (uint256)
    {
        return allowed[_owner][_spender];
    }

    function balanceOf(address _owner)
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="146" endline="157" pcid="308">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="202" endline="206" pcid="8027">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="250" endline="261" pcid="8199">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="152" endline="161" pcid="7648">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
     * @dev Transfer token to a specified address
     * @param to The address to transfer to.
     * @param value The amount to be transferred.
     */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="257" endline="268" pcid="7909">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="50" endline="57" pcid="4481">
    function allowance(address tokenOwner, address spender) public view returns(uint){
        return allowed[tokenOwner][spender];
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns(bool){
</source>
<source file="systems/smart_contracts/ERC20.sol" startline="129" endline="140" pcid="2985">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowances[owner][spender];
  }

  /**
   * @dev See `IERC20.approve`.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="284" endline="288" pcid="3536">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/Wisdom.sol" startline="125" endline="136" pcid="7986">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowances[owner][spender];
  }

  /**
   * @dev See `IERC20.approve`.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="407" endline="426" pcid="3087">
  function isApprovedForAll(
    address _owner,
    address _operator
  )
    public
    view
    returns (bool)
  {
    return operatorApprovals[_owner][_operator];
  }

  /**
   * @dev Transfers the ownership of a given token ID to another address
   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible
   * Requires the msg sender to be the owner, approved, or operator
   * @param _from current owner of the token
   * @param _to address to receive the ownership of the given token ID
   * @param _tokenId uint256 ID of the token to be transferred
  */
  function transferFrom(
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="257" endline="268" pcid="7025">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="297" endline="306" pcid="6999">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
     * @dev Transfer token to a specified address.
     * @param to The address to transfer to.
     * @param value The amount to be transferred.
     */
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="387" endline="391" pcid="2688">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="231" endline="252" pcid="7420">
  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="122" endline="126" pcid="3177">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function findFivePercent(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="412" endline="421" pcid="599">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="340" endline="351" pcid="959">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="103" endline="112" pcid="3019">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev Transfer token to a specified address.
     * @param to The address to transfer to.
     * @param value The amount to be transferred.
     */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="101" endline="105" pcid="7326">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function findOnePercent(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="202" endline="206" pcid="2893">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/UGCoin.sol" startline="118" endline="122" pcid="7538">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function withdraw() onlyOwner public {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="331" endline="340" pcid="6337">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
     * @dev Transfer token for a specified address
     * @param to The address to transfer to.
     * @param value The amount to be transferred.
     */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="288" endline="292" pcid="2969">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/BANG.sol" startline="105" endline="109" pcid="1051">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function findTwentyPercent(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="238" endline="242" pcid="1290">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="254" endline="265" pcid="656">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="340" endline="351" pcid="2472">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="264" endline="270" pcid="3380">
    function getReserve(address token, address user) public view returns (uint256) { 
        //return reserve[token][user];  
        return decodeBalanceAndReserve(token, user)[1];
    }

    // Sets reserved amount for specific token and user (can only be called by futures contract)
    function setReserve(address token, address user, uint256 amount) onlyFuturesContract returns (bool success) { 
</source>
<source file="systems/smart_contracts/magesh.sol" startline="134" endline="143" pcid="4620">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
     * @dev Transfer token to a specified address.
     * @param to The address to transfer to.
     * @param value The amount to be transferred.
     */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="112" endline="123" pcid="4653">
  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }

  function increaseApproval(
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="103" endline="107" pcid="2160">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function getTokensToBurn(uint256 value) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="208" endline="212" pcid="4395">
    function allowance(address _holder, address _spender) public view returns (uint256) {
        return allowed[_holder][_spender];
    }

    function lock(address _holder, uint256 _amount, uint256 _releaseStart, uint256 _releaseRate) public onlyOwner returns (bool) {
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="101" endline="105" pcid="3928">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function findFivePercent(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/MBA.sol" startline="285" endline="305" pcid="4722">
  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="153" endline="165" pcid="2055">
    function allowance(
        address _owner,
        address _spender
    )
    public
    view
    returns (uint256)
    {
        return allowed[_owner][_spender];
    }


    function increaseApproval(
</source>
<source file="systems/smart_contracts/BKN.sol" startline="61" endline="65" pcid="1326">
    function allowance(address src, address guy) public constant returns (uint256) {
        return _approvals[src][guy];
    }
    
    function transfer(address dst, uint256 wad) public returns (bool) {
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="134" endline="143" pcid="4932">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
     * @dev Transfer token to a specified address.
     * @param to The address to transfer to.
     * @param value The amount to be transferred.
     */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="101" endline="105" pcid="6211">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function findOnePercent(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="153" endline="163" pcid="769">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/SCMCoin.sol" startline="104" endline="107" pcid="6390">
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }
}
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="299" endline="303" pcid="4317">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/RETC.sol" startline="194" endline="198" pcid="6193">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }

    function withdraw() onlyOwner public {
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="80" endline="84" pcid="2309">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="233" endline="237" pcid="4974">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="376" endline="387" pcid="3813">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="144" endline="153" pcid="1372">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="205" endline="218" pcid="1423">
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }
    /**
     * @dev Increase the amount of tokens that an owner allowed to a spender.
     *
     * approve should be called when allowed[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param _spender The address which will spend the funds.
     * @param _addedValue The amount of tokens to increase the allowance by.
     */
    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/ICOImplementation.sol" startline="260" endline="285" pcid="4281">
    function allowance(
        address _owner,
        address _spender
    )
    public
    view
    returns (uint256)
    {
        return allowed[_owner][_spender];
    }
    




  
    


    // OWNER FUNCTIONALITY


    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="581" endline="593" pcid="5016">
    function isApprovedForAll(address owner, address operator) public view returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev Transfers the ownership of a given token ID to another address.
     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     * Requires the msg.sender to be the owner, approved, or operator.
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    function transferFrom(address from, address to, uint256 tokenId) public {
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="291" endline="294" pcid="4004">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }
}
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="295" endline="299" pcid="1452">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/Comet.sol" startline="101" endline="105" pcid="1928">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function findOnePercent(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="150" endline="154" pcid="5104">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    modifier onlyOwner(){
</source>
<source file="systems/smart_contracts/CoinDDC.sol" startline="100" endline="111" pcid="1867">
    function allowance(
        address _owner,
        address _spender
    )
    public
    view
    returns (uint256)
    {
        return allowed[_owner][_spender];
    }

    function increaseApproval(
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="459" endline="470" pcid="5170">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/CNG.sol" startline="149" endline="165" pcid="1853">
  function allowance(
    address owner,
    address spender
   )
    public
    view
    returns (uint256)
  {
    return _allowed[owner][spender];
  }

  /**
  * @dev Transfer token for a specified address
  * @param to The address to transfer to.
  * @param value The amount to be transferred.
  */
  function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="203" endline="216" pcid="5312">
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }
    /**
     * @dev Increase the amount of tokens that an owner allowed to a spender.
     *
     * approve should be called when allowed[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param _spender The address which will spend the funds.
     * @param _addedValue The amount of tokens to increase the allowance by.
     */
    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/LBBT.sol" startline="92" endline="103" pcid="4545">
  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }

  function increaseApproval(
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="629" endline="638" pcid="5377">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * Emits an {Approval} event indicating the updated allowance.
     */
    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="262" endline="273" pcid="1758">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="340" endline="351" pcid="6031">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="291" endline="306" pcid="8089">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return _allowed[_owner][_spender];
  }



  /**
   * @dev Increase the amount of tokens that an owner _allowed to a spender.
   *
   * approve should be called when _allowed[_spender] == 0. To increment
   * _allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)   
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="613" endline="617" pcid="2716">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function cut(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="726" endline="738" pcid="3287">
    function isApprovedForAll(address owner, address operator) public view returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev Transfers the ownership of a given token ID to another address
     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible
     * Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
    */
    function transferFrom(address from, address to, uint256 tokenId) public whenNotPaused {
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="263" endline="270" pcid="8180">
    function allowance(address owner, address spender) public view returns (uint) {
        return allowed[owner][spender];
    }

    /* ------------------------------------------------------------------------
     * don't accept ETH
     */
    function () payable external {
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="244" endline="263" pcid="6443">
  function balanceOf(address token, address user) public view returns (uint) {
    return tokens[token][user];
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Trading
  ////////////////////////////////////////////////////////////////////////////////

  /**
  * Stores the active order inside of the contract.
  * Emits an Order event.
  * Note: tokenGet & tokenGive can be the Ethereum contract address.
  * @param tokenGet Ethereum contract address of the token to receive
  * @param amountGet uint amount of tokens being received
  * @param tokenGive Ethereum contract address of the token to give
  * @param amountGive uint amount of tokens being given
  * @param expires uint of block number when this order should expire
  * @param nonce arbitrary random number
  */
  function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="156" endline="165" pcid="737">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="237" endline="247" pcid="6787">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="103" endline="107" pcid="6000">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function findOneTenthPercent(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/Token.sol" startline="104" endline="113" pcid="7256">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
     * @dev Transfer token to a specified address.
     * @param to The address to transfer to.
     * @param value The amount to be transferred.
     */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="105" endline="109" pcid="1475">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function findOnePercent(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/RaffleTicket.sol" startline="274" endline="285" pcid="5963">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="154" endline="170" pcid="4242">
  function allowance(
    address owner,
    address spender
  )
  public
  view
  returns (uint256)
  {
    return _allowed[owner][spender];
  }

  /**
  * @dev Transfer token for a specified address
  * @param to The address to transfer to.
  * @param value The amount to be transferred.
  */
  function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="306" endline="317" pcid="5919">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/XGP.sol" startline="250" endline="254" pcid="8122">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/BCCT.sol" startline="82" endline="93" pcid="1094">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="250" endline="254" pcid="465">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="438" endline="455" pcid="5898">
    function allowance(
        address owner,
        address spender
    )
        public
        view
        returns (uint256)
    {
        // Immutable static call from target contract
        return IERC20(target).allowance(owner, spender);
    }

    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="294" endline="305" pcid="5425">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="269" endline="273" pcid="6701">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/Ownable.sol" startline="129" endline="134" pcid="5574">
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
     }


    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/CDS.sol" startline="186" endline="202" pcid="1663">
  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }

  /**
  * @dev Transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="601" endline="621" pcid="6627">
	function allowance(
		address _owner,
		address _spender
	)
	public
	view
	returns (uint256)
	{
		return allowed[_owner][_spender];
	}

	/**
	* @dev Increase the amount of tokens that an owner allowed to a spender.
	* approve should be called when allowed[_spender] == 0. To increment
	* allowed value is better to use this function to avoid 2 calls (and wait until
	* the first transaction is mined)
	* From MonolithDAO Token.sol
	* @param _spender The address which will spend the funds.
	* @param _addedValue The amount of tokens to increase the allowance by.
	*/
	function increaseApproval(
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="288" endline="292" pcid="6566">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="153" endline="167" pcid="6526">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="280" endline="296" pcid="5856">
    function allowance(
        address owner,
        address spender
    )
    public
    view
    returns (uint256)
    {
        return _allowed[owner][spender];
    }

    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ProofOfContributionChainToken.sol" startline="47" endline="51" pcid="5827">
    function allowance(address from, address delegate) public view returns (uint) {
        return allowed[from][delegate];
    }

    function transferFrom(address from, address buyer, uint numTokens) public returns (bool) {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="318" endline="329" pcid="4432">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="282" endline="293" pcid="4043">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See `IERC20.approve`.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="207" endline="211" pcid="1641">
    function allowance(address _holder, address _spender) public view returns (uint256) {
        return allowed[_holder][_spender];
    }

    function lock(address _holder, uint256 _amount, uint256 _releaseStart, uint256 _releaseRate) public onlyOwner returns (bool) {
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="111" endline="115" pcid="2402">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

    function findPercent(uint256 value) public view returns (uint256)  {
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="368" endline="377" pcid="5690">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="323" endline="333" pcid="5762">
    function allowance(
        address _owner,
        address _spender)
        public
        view
        returns (uint256)
    {
        return denormalize(allowed[_owner][_spender]);
    }

    function normalize(
</source>
<source file="systems/smart_contracts/CST_TOKEN.sol" startline="68" endline="72" pcid="2202">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  function transfer(address _to, uint256 _value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="292" endline="296" pcid="6500">
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
</source>
<source file="systems/smart_contracts/BFGToken.sol" startline="126" endline="130" pcid="1192">
  function allowance(address owner, address agent) public view returns (uint256) {
    return _allowances[owner][agent];
  }

  function increaseApproval(address agent, uint value) public returns (bool) {
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="327" endline="338" pcid="5791">
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/SellableToken.sol" startline="90" endline="94" pcid="6468">
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
</source>
<source file="systems/smart_contracts/Byte.sol" startline="111" endline="117" pcid="1581">
  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }



  function transfer(address to, uint256 value) public returns (bool) {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="519" endline="523" pcid="913">
    function addFundsUnlockerManagers(address account) external onlyOwner {
        _addFundsUnlockerManagers(account);
    }

    function removeFundsUnlockerManagers(address account) external onlyOwner {
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="495" endline="499" pcid="8252">
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }

    function renounceMinter() public {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="425" endline="429" pcid="893">
    function removeWLOperators(address account) external onlyWLManagers {
        _removeWLOperators(account);
    }

    function renounceWLManager() external onlyWLManagers {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="357" endline="364" pcid="536">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="180" endline="184" pcid="3247">
    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
</source>
<source file="systems/smart_contracts/EthNote.sol" startline="56" endline="63" pcid="3353">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="124" endline="128" pcid="8167">
    function addToReceiveAllowed(address _to) external onlyManager {
        whiteList[_to] = whiteList[_to] | WHITELISTED_CAN_RX_CODE; // just add the code 2
    }

    function removeFromSendAllowed(address _to) public onlyManager {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="69" endline="76" pcid="943">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="421" endline="425" pcid="892">
    function addWLOperators(address account) external onlyWLManagers {
        _addWLOperators(account);
    }

    function removeWLOperators(address account) external onlyWLManagers {
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="211" endline="219" pcid="7280">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="469" endline="473" pcid="902">
    function removeFundingManagers(address account) external onlyOwner {
        _removeFundingManagers(account);
    }

    function isFundingManager(address account) public view returns (bool) {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="946" endline="953" pcid="566">
    function changeBeneficiary(address _newBeneficiary) public onlyManyBeneficiaries {
        _setPendingBeneficiary(_newBeneficiary);
    }

    /**
        * @dev Claim Beneficiary
    */
    function claimBeneficiary() public onlyPendingBeneficiary {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="535" endline="539" pcid="917">
    function removeFundsUnlockerOperators(address account) external onlyFundsUnlockerManagers {
        _removeFundsUnlockerOperators(account);
    }

    function renounceFundsUnlockerManager() external onlyFundsUnlockerManagers {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="545" endline="549" pcid="4446">
    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
</source>
<source file="systems/smart_contracts/Factory.sol" startline="69" endline="77" pcid="3433">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="94" endline="98" pcid="7701">
  function setController(address _controller) public onlyOwner {       
    _setController(_controller);
  }

  function _setController(address _controller) internal { 
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="337" endline="345" pcid="593">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="497" endline="501" pcid="2611">
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }

    function renounceMinter() public {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="735" endline="742" pcid="4461">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="171" endline="175" pcid="3557">
    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="820" endline="824" pcid="990">
    function setReferralTracker(address contractAddress) public onlyOwner {
        ref = ReferralTracker(contractAddress);
    }

    function setAdministrator(address _admin) public onlyOwner {
</source>
<source file="systems/smart_contracts/ERC20.sol" startline="283" endline="287" pcid="2994">
  function addAdmin(address somebody) public onlyOwner {
    _admins[somebody] = true;
  }

  function removeAdmin(address somebody) public onlyOwner {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="481" endline="485" pcid="905">
    function removeFundingOperators(address account) external onlyFundingManagers {
        _removeFundingOperators(account);
    }

    function renounceFundingManager() external onlyFundingManagers {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="565" endline="569" pcid="7206">
    function addMinter(address account) public onlyOwner {
        _addMinter(account);
    }

    function removeMinter(address account) public onlyOwner {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="569" endline="573" pcid="7207">
    function removeMinter(address account) public onlyOwner {
        _removeMinter(account);
    }

    function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="567" endline="571" pcid="973">
    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
</source>
<source file="systems/smart_contracts/Wisdom.sol" startline="289" endline="296" pcid="7996">
  function removeAdmin(address somebody) public onlyOwner {
    _admins[somebody] = false;
  }

  /**
   * Returns true if somebody is admin. Owner is always an admin.
   */
  function isAdmin(address somebody) public view returns(bool) {
</source>
<source file="systems/smart_contracts/Wisdom.sol" startline="282" endline="289" pcid="7995">
  function addAdmin(address somebody) public onlyOwner {
    _admins[somebody] = true;
  }

  /**
   * Removes somebody from admin. This method is allowed by owner only.
   */
  function removeAdmin(address somebody) public onlyOwner {
</source>
<source file="systems/smart_contracts/KYCRegistry.sol" startline="69" endline="76" pcid="4504">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="94" endline="98" pcid="2228">
  function setController(address _controller) public onlyOwner {       
    _setController(_controller);
  }

  function _setController(address _controller) internal { 
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="477" endline="481" pcid="904">
    function addFundingOperators(address account) external onlyFundingManagers {
        _addFundingOperators(account);
    }

    function removeFundingOperators(address account) external onlyFundingManagers {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="113" endline="117" pcid="2232">
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
  
  function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="120" endline="124" pcid="8166">
    function addToSendAllowed(address _to) external onlyManager {
        whiteList[_to] = whiteList[_to] | WHITELISTED_CAN_TX_CODE; // just add the code 1
    }

    function addToReceiveAllowed(address _to) external onlyManager {
</source>
<source file="systems/smart_contracts/AdminUpgradeabilityProxy.sol" startline="244" endline="258" pcid="360">
    function upgradeTo(address newImplementation) external ifAdmin {
        _upgradeTo(newImplementation);
    }

    /**
     * @dev Upgrade the backing implementation of the proxy and call a function
     * on the new implementation.
     * This is useful to initialize the proxied contract.
     * @param newImplementation Address of the new implementation.
     * @param data Data to send as msg.data in the low level call.
     * It should include the signature and the parameters of the function to be
     * called, as described in
     * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.
     */
    function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="528" endline="532" pcid="330">
    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="390" endline="398" pcid="7665">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="65" endline="73" pcid="7341">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="113" endline="117" pcid="6718">
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
  
  function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="148" endline="152" pcid="8171">
    function freeze(address _to) external onlyOwner {
        whiteList[_to] = whiteList[_to] | WHITELISTED_FREEZE_CODE; // 4 [0100]
    }

    function unFreeze(address _to) external onlyOwner {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="94" endline="98" pcid="6714">
  function setController(address _controller) public onlyOwner {       
    _setController(_controller);
  }

  function _setController(address _controller) internal { 
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="93" endline="96" pcid="8164">
    function removeManager (address managerAddress) external onlyOwner {
        managers[managerAddress] = false;
    }
}
</source>
<source file="systems/smart_contracts/ERC20.sol" startline="287" endline="291" pcid="2995">
  function removeAdmin(address somebody) public onlyOwner {
    _admins[somebody] = false;
  }

  function isAdmin(address somebody) public view returns(bool) {
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="89" endline="93" pcid="8163">
    function addManager (address managerAddress) public onlyOwner {
        managers[managerAddress] = true;
    }

    function removeManager (address managerAddress) external onlyOwner {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="669" endline="673" pcid="343">
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }

    function renounceMinter() public {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="523" endline="527" pcid="914">
    function removeFundsUnlockerManagers(address account) external onlyOwner {
        _removeFundsUnlockerManagers(account);
    }

    function isFundsUnlockerManager(address account) public view returns (bool) {
</source>
<source file="systems/smart_contracts/SuperMarket.sol" startline="50" endline="54" pcid="6762">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }
   
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="131" endline="135" pcid="3552">
    function addAdmin(address account) public onlyAdmin {
        _addAdmin(account);
    }

    function renounceAdmin() public {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="493" endline="497" pcid="2702">
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }

    function renounceMinter() public {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="559" endline="564" pcid="7488">
    function revokeVestedTokensFor(address _owner) public onlyOwner {
        TokenVesting(vestingOf[_owner]).revoke(this);
    }

    /// @dev Create a ReserveTokenVault 
    function makeReserveToVault() external onlyOwner {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="113" endline="117" pcid="7705">
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
  
  function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="274" endline="278" pcid="3255">
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }

    function renounceMinter() public {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="176" endline="184" pcid="809">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="328" endline="336" pcid="3035">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="176" endline="184" pcid="3764">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="820" endline="824" pcid="2503">
    function setReferralTracker(address contractAddress) public onlyOwner {
        ref = ReferralTracker(contractAddress);
    }

    function setAdministrator(address _admin) public onlyOwner {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="351" endline="354" pcid="6798">
    function setTechAccount(address account) public onlyOwner {
        _setPollAccount(account, techPoll);
    }
    function setAllAccount(address businessAcc, address communityAcc, address techAcc) public onlyOwner {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="598" endline="602" pcid="6362">
    function removeBlacklisted(address account) public onlyBlacklistAdmin {
        _removeBlacklisted(account);
    }

    function _addBlacklisted(address account) internal {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="594" endline="598" pcid="6361">
    function addBlacklisted(address account) public onlyBlacklistAdmin {
        _addBlacklisted(account);
    }

    function removeBlacklisted(address account) public onlyBlacklistAdmin {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="558" endline="562" pcid="6357">
    function addBlacklistAdmin(address account) public onlyBlacklistAdmin {
        _addBlacklistAdmin(account);
    }

    function _addBlacklistAdmin(address account) internal {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="567" endline="571" pcid="2486">
    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="207" endline="211" pcid="6322">
    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="167" endline="171" pcid="6317">
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }

    function renounceMinter() public {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="531" endline="535" pcid="916">
    function addFundsUnlockerOperators(address account) external onlyFundsUnlockerManagers {
        _addFundsUnlockerOperators(account);
    }

    function removeFundsUnlockerOperators(address account) external onlyFundsUnlockerManagers {
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="69" endline="76" pcid="2456">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="390" endline="394" pcid="1388">
    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
</source>
<source file="systems/smart_contracts/BlocklogyCertificate.sol" startline="50" endline="56" pcid="1400">
    function addAdmin(address _adminAddress) public onlySuperAdmin {
        isAdmin[_adminAddress] = true;
    }
    
    /// @notice superAdmin Deletes the existing Admin 
    /// @param _adminAddress will take admin address which needs to be removed   
    function removeAdmin(address _adminAddress) public onlySuperAdmin {
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="114" endline="122" pcid="7230">
    function transferOwnership(address _newOwner) public onlyOwner {
        _transferOwnership(_newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param _newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/BlocklogyCertificate.sol" startline="56" endline="62" pcid="1401">
    function removeAdmin(address _adminAddress) public onlySuperAdmin {
        isAdmin[_adminAddress] = false;
    }
    
    /// @notice views the latest certificate number
    /// @return latest certificate number issued by Blocklogy 
    function viewLatestCertificateNumber() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="596" endline="605" pcid="6101">
  function invest(address addr) public payable {
    investInternal(addr, 0);
  }

  /**
   * The basic entry point to participate the crowdsale process.
   *
   * Pay for funding, get invested tokens back in the sender address.
   */
  function buy() public payable {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2136" endline="2147" pcid="6895">
    function clearIssuanceData(address account)
        external
        onlyAssociatedContract
    {
        delete issuanceData[account];
    }

    /**
     * @notice Increment the total issuer count
     * @dev Only the associated contract may call this.
     */
    function incrementTotalIssuerCount()
</source>
<source file="systems/smart_contracts/RegulatedToken.sol" startline="21" endline="25" pcid="6058">
    function replaceRegulatorService(address _newRegulatorService) public onlyReplaceRegulatorServicePermission {
        regulatorService = IRegulatorService(_newRegulatorService);
    }

    function changeSymbol(string memory _newSymbol) public onlyAttributesPermission {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="567" endline="571" pcid="6045">
    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="69" endline="76" pcid="6015">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="285" endline="292" pcid="5882">
    function setIntegrationProxy(address _integrationProxy)
        external
        onlyOwner
    {
        integrationProxy = Proxy(_integrationProxy);
    }

    function setMessageSender(address sender)
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="165" endline="173" pcid="5846">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="129" endline="136" pcid="5778">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="384" endline="392" pcid="5766">
    function setTarget(
        address _newTarget)
        public
        onlyOwner
    {
        _setTarget(_newTarget);
    }

    function _setTarget(
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="155" endline="163" pcid="5756">
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/PokaToken.sol" startline="50" endline="54" pcid="5734">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }
   
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/CDS.sol" startline="83" endline="91" pcid="1657">
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/CDS.sol" startline="395" endline="399" pcid="1676">
  function frozenCheck(address target) internal view {
    require(!frozenAccount[target]);
  }

  function freezeAccount(address target, bool frozen) public onlyOwner {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="348" endline="351" pcid="6797">
    function setCommunityAccount(address account) public onlyOwner {
        _setPollAccount(account, communityPoll);
    }
    function setTechAccount(address account) public onlyOwner {
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="57" endline="65" pcid="5510">
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/NSTTeamLock.sol" startline="78" endline="82" pcid="5459">
    function setToken(address _token) public onlyOwner {
        token = IERC20(_token);
    }
    
    function changeOwner(address _addr) public onlyOwner {
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="385" endline="389" pcid="4256">
  function addMinter(address account) public onlyMinter {
    _addMinter(account);
  }

  function renounceMinter() public {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="489" endline="493" pcid="1772">
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }

    function renounceMinter() public {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="229" endline="238" pcid="5353">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Accept ownership of the contract.
     *
     * Can only be called by the new owner.
     */
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="86" endline="94" pcid="5302">
    function transferOwnership(address _newOwner) public onlyOwner {
        _transferOwnership(_newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param _newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1585" endline="1592" pcid="1838">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="177" endline="185" pcid="1888">
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="244" endline="248" pcid="1900">
  function addConverter(address account) public onlyConverter {
    _addConverter(account);
  }

  function renounceConverter() public {
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="68" endline="76" pcid="8076">
  function transferOwnership(address newOwner) public onlyOwner {
      _transferOwnership(newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="215" endline="219" pcid="2324">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/ComplianceRegistry.sol" startline="61" endline="69" pcid="1946">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="68" endline="72" pcid="4981">
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }

    function renounceMinter() public {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="601" endline="610" pcid="4861">
  function invest(address addr) public payable {
    investInternal(addr, 0);
  }

  /**
   * The basic entry point to participate the crowdsale process.
   *
   * Pay for funding, get invested tokens back in the sender address.
   */
  function buy() public payable {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="484" endline="491" pcid="7922">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="67" endline="74" pcid="4734">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/MBA.sol" startline="159" endline="167" pcid="4712">
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="178" endline="182" pcid="4657">
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/TokenSwap.sol" startline="128" endline="136" pcid="7393">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="54" endline="58" pcid="3694">
function requireNotZero(address addr) internal pure {
require(addr != address(0), "require not zero address");
}

function requireNotZero(uint val) internal pure {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="878" endline="885" pcid="6855">
    function setIntegrationProxy(address _integrationProxy)
        external
        onlyOwner
    {
        integrationProxy = Proxy(_integrationProxy);
    }

    function setMessageSender(address sender)
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="477" endline="485" pcid="7038">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="749" endline="756" pcid="512">
        function changeBeneficiary(address _newBeneficiary) public onlyManyBeneficiaries {
            _setPendingBeneficiary(_newBeneficiary);
        }

        /**
            * @dev Claim Beneficiary
        */
        function claimBeneficiary() public onlyPendingBeneficiary {
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="417" endline="425" pcid="752">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
    * @dev Transfers control of the contract to a newOwner.
    * @param newOwner The address to transfer ownership to.
    */
    function _transferOwnership(address newOwner) internal {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="345" endline="348" pcid="6796">
    function setBusinessAccount(address account) public onlyOwner {
        _setPollAccount(account, businessPoll);
    }
    function setCommunityAccount(address account) public onlyOwner {
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="134" endline="138" pcid="7273">
    function addIssuer(address account) public onlyIssuer {
        _addIssuer(account);
    }

    function renounceIssuer() public {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="165" endline="173" pcid="7175">
    function transferOwnership(address _newOwner) public onlyOwner {
        _transferOwnership(_newOwner);
    }

    /**
     * Transfers control of the contract to a newOwner.
     * @param _newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address _newOwner) internal {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="269" endline="278" pcid="7799">
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Accept ownership of the contract.
     *
     * Can only be called by the new owner.
     */
    function acceptOwnership() public {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="413" endline="417" pcid="890">
    function removeWLManagers(address account) external onlyOwner {
        _removeWLManagers(account);
    }

    function isWLManager(address account) public view returns (bool) {
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="236" endline="240" pcid="2326">
    function burn(uint value) public onlyOwner {
        _burn(msg.sender, value);
    }

    function mint(address to, uint value) public onlyOwner { 
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="58" endline="62" pcid="3695">
function requireNotZero(uint val) internal pure {
require(val != 0, "require not zero value");
}

function notZero(address addr) internal pure returns(bool) {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="537" endline="540" pcid="6814">
    function mineBusinessPoll(uint value) public onlyOwner {
        _minePoll(businessPoll, value);
    }
    function mineCommunityPoll(uint value) public onlyOwner {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="540" endline="543" pcid="6815">
    function mineCommunityPoll(uint value) public onlyOwner {
        _minePoll(communityPoll, value);
    }
    function mineTechPoll(uint value) public onlyOwner {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="543" endline="546" pcid="6816">
    function mineTechPoll(uint value) public onlyOwner {
        _minePoll(techPoll, value);
    }
}
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="446" endline="450" pcid="754">
    function burn(uint value) public onlyOwner {
        _burn(msg.sender, value);
    }

    function mint(address to, uint value) public onlyOwner { 
</source>
<source file="systems/smart_contracts/BEX.sol" startline="105" endline="112" pcid="1172">
    function BEX() public {
	
		owner = msg.sender;
    }
	

	
	function sendByOwner(address _to, uint256 _value) public {
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="65" endline="69" pcid="1228">
    function Owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="204" endline="207" pcid="6529">
  function SistContract() public {
    balances[own] = totalSupply;
  }
}
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="571" endline="575" pcid="2487">
    function renouncePauser() public {
        _removePauser(msg.sender);
    }

    function _addPauser(address account) internal {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1150" endline="1159" pcid="3131">
  function ping() external {
    registry.ping();
  }

  /**
   * @notice Return the amount of tokens for a given Estate
   * @param estateId Estate id to search
   * @return Tokens length
   */
  function getEstateSize(uint256 estateId) external view returns (uint256) {
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="75" endline="79" pcid="405">
    function Owned2() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="65" endline="69" pcid="3417">
    function Owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="335" endline="338" pcid="2591">
    function _finalization() internal {

    }
}
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="331" endline="334" pcid="2682">
    function _finalization() internal {

    }
}
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="499" endline="503" pcid="8253">
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }

    function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="1048" endline="1051" pcid="212">
    function nop()public{
    }
	
    function tokenFallback(address _from, uint _value, bytes _data) public enabled2 returns(bool){
</source>
<source file="systems/smart_contracts/AdminUpgradeabilityProxy.sol" startline="62" endline="69" pcid="351">
    function _willFallback() internal {
    }

    /**
     * @dev fallback implementation.
     * Extracted to enable manual triggering.
     */
    function _fallback() internal {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="673" endline="677" pcid="344">
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }

    function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="532" endline="536" pcid="331">
    function renouncePauser() public {
        _removePauser(msg.sender);
    }

    function _addPauser(address account) internal {
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="265" endline="267" pcid="7353">
  function finalization() internal {
  }
}
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="65" endline="69" pcid="1252">
    function Owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/BatchTransfer.sol" startline="14" endline="18" pcid="1085">
    function BatchTransfer() public{
        owner=msg.sender;
    }
    
    function changeOwner(address _newOwner) onlyOwner{
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1118" endline="1121" pcid="1810">
    function _finalization() internal {
        // solhint-disable-previous-line no-empty-blocks
    }
}
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="66" endline="70" pcid="4803">
    function Controlled()  public { controller = msg.sender;}

    /// @notice Changes the controller of the contract
    /// @param _newController The new controller of the contract
    function changeController(address _newController) onlyController  public {
</source>
<source file="systems/smart_contracts/CRYPTOMZ.sol" startline="54" endline="62" pcid="2176">
  function Constructor() public {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="211" endline="215" pcid="6323">
    function renouncePauser() public {
        _removePauser(msg.sender);
    }

    function _addPauser(address account) internal {
</source>
<source file="systems/smart_contracts/BasicKYC.sol" startline="104" endline="116" pcid="1069">
  function RBAC()
    public
  {
    addRole(msg.sender, ROLE_ADMIN);
  }

  /**
   * @dev reverts if addr does not have role
   * @param addr address
   * @param roleName the name of the role
   * // reverts
   */
  function checkRole(address addr, string roleName)
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="230" endline="234" pcid="3717">
function disown() internal {
delete owner;
}

}
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="571" endline="575" pcid="974">
    function renouncePauser() public {
        _removePauser(msg.sender);
    }

    function _addPauser(address account) internal {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="232" endline="235" pcid="2579">
    function _forwardFunds() internal {
        _wallet.transfer(msg.value);
    }
}
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="72" endline="76" pcid="4982">
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }

    function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/FMT.sol" startline="163" endline="170" pcid="3659">
  function Ownable() public {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/MpctLockupTeam.sol" startline="39" endline="43" pcid="5058">
    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="501" endline="505" pcid="2612">
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }

    function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="497" endline="501" pcid="2703">
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }

    function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="175" endline="179" pcid="3558">
    function renouncePauser() public {
        _removePauser(msg.sender);
    }

    function _addPauser(address account) internal {
</source>
<source file="systems/smart_contracts/MpctLockupTeam.sol" startline="71" endline="75" pcid="5062">
    function MpctLockupTeam () public {
        token = ERC20Interface(tokenAddress);
    }

    function setLockupAmt(uint256 _amt) public onlyOwner {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="248" endline="252" pcid="1901">
  function renounceConverter() public {
    _removeConverter(msg.sender);
  }

  function _addConverter(address account) internal {
</source>
<source file="systems/smart_contracts/LuckyStrikeTokens.sol" startline="134" endline="138" pcid="4574">
    function LuckyStrikeTokens() public {
        admin = msg.sender;
    }

    function init(address luckyStrikeContractAddress) public {
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="549" endline="553" pcid="4447">
    function renouncePauser() public {
        _removePauser(msg.sender);
    }

    function _addPauser(address account) internal {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="278" endline="282" pcid="3256">
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }

    function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/MyAdvancedToken.sol" startline="10" endline="14" pcid="5259">
    function owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="135" endline="139" pcid="3553">
    function renounceAdmin() public {
        _removeAdmin(msg.sender);
    }

    function _addAdmin(address account) internal {
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="198" endline="206" pcid="772">
  function Ownable() public {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="829" endline="833" pcid="7943">
    function _forwardFunds() internal {
        _wallet.transfer(msg.value);
    }

    function reClaimUnsoldTokens(address beneficiary, uint256 tokenAmount) onlyOwner public {
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="138" endline="142" pcid="7274">
    function renounceIssuer() public {
        _removeIssuer(msg.sender);
    }

    function _addIssuer(address account) internal {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="184" endline="188" pcid="3248">
    function renouncePauser() public {
        _removePauser(msg.sender);
    }

    function _addPauser(address account) internal {
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="61" endline="65" pcid="7435">
    function Owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/Airdropper.sol" startline="10" endline="14" pcid="470">
  function Ownable() public {
    owner = msg.sender;
  }

  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="161" endline="168" pcid="264">
    function Owned() public {

        owner = msg.sender;

    }


    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1427" endline="1430" pcid="1829">
    function _forwardFunds() internal {
        _escrow.deposit.value(msg.value)(msg.sender);
    }
}
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="389" endline="393" pcid="4257">
  function renounceMinter() public {
    _removeMinter(msg.sender);
  }

  function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="889" endline="892" pcid="1797">
    function _forwardFunds() internal {
        _wallet.transfer(msg.value);
    }
}
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="493" endline="497" pcid="1773">
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }

    function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="198" endline="206" pcid="7756">
  function Ownable() public {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="228" endline="231" pcid="2670">
    function _forwardFunds() internal {
        _wallet.transfer(msg.value);
    }
}
</source>
<source file="systems/smart_contracts/Ownable.sol" startline="45" endline="49" pcid="5569">
  function Ownable() public {
    owner = msg.sender;
  }

  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="81" endline="85" pcid="5645">
    function Owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="64" endline="68" pcid="5811">
    function Owned2() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="533" endline="539" pcid="7484">
    function releaseVestedTokens() external {
        releaseVestedTokensFor(msg.sender);
    }

    /// @dev releases vested tokens for the specified address.
    /// Can be called by anyone for any address.
    function releaseVestedTokensFor(address _owner) public {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="18" endline="22" pcid="7490">
    function Accessible() public {
        owner = msg.sender;
    }

    modifier ownership() {
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="571" endline="575" pcid="6046">
    function renouncePauser() public {
        _removePauser(msg.sender);
    }

    function _addPauser(address account) internal {
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="394" endline="398" pcid="1389">
    function renouncePauser() public {
        _removePauser(msg.sender);
    }

    function _addPauser(address account) internal {
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="65" endline="69" pcid="1306">
    function Owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="171" endline="175" pcid="6318">
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }

    function _addMinter(address account) internal {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1190" endline="1200" pcid="3135">
  function isUpdateAuthorized(address operator, uint256 estateId) external view returns (bool) {
    return _isUpdateAuthorized(operator, estateId);
  }

  /**
  * @dev Set an updateManager for an account
  * @param _owner - address of the account to set the updateManager
  * @param _operator - address of the account to be set as the updateManager
  * @param _approved - bool whether the address will be approved or not
  */
  function setUpdateManager(address _owner, address _operator, bool _approved) external {
</source>
<source file="systems/smart_contracts/BRZE.sol" startline="180" endline="191" pcid="1532">
  function checkFrozenWallet(address _from, uint _value) public view returns (bool) {
    return(
      _from==owner || 
      (!tokenFrozen && 
      (!frozenWallets[_from].isFrozen || 
       now>=frozenWallets[_from].frozenTime || 
       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))
    );
  }


  function burn(uint256 _value) onlyOwner public returns (bool success) {
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="208" endline="211" pcid="5823">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="221" endline="224" pcid="1970">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="224" endline="227" pcid="1216">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="224" endline="227" pcid="8148">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="211" endline="214" pcid="7894">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="223" endline="226" pcid="439">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="192" endline="198" pcid="2439">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
    
    
    
     mapping(address => uint) ShareStatus;
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="131" endline="134" pcid="5564">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="668" endline="674" pcid="285">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {

        return ERC20Interface(tokenAddress).transfer(owner, tokens);

    }

}
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="219" endline="222" pcid="417">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/DGC.sol" startline="225" endline="228" pcid="2532">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="204" endline="207" pcid="7447">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="158" endline="161" pcid="1264">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="406" endline="410" pcid="251">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }

}
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="225" endline="228" pcid="6288">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="258" endline="266" pcid="6265">
	function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
		return ERC20Interface(tokenAddress).transfer(owner, tokens);
	}


	// ------------------------------------------------------------------------
	// Burns a specific amount of tokens.
	// ------------------------------------------------------------------------
	function burn(uint256 tokens) public {
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="211" endline="214" pcid="7872">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="169" endline="173" pcid="7563">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
    
    function destruct() onlyOwner public{
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="224" endline="227" pcid="7850">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="158" endline="161" pcid="1318">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="139" endline="142" pcid="3962">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="224" endline="227" pcid="4531">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="220" endline="223" pcid="4373">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="158" endline="161" pcid="1240">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="211" endline="214" pcid="6594">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="223" endline="226" pcid="5627">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="221" endline="224" pcid="1992">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/GoaToken.sol" startline="289" endline="292" pcid="4165">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="277" endline="285" pcid="8182">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }

    /* ------------------------------------------------------------------------
     * The following functions are for 1404 interface compliance, to detect
     * a transaction is allowed before sending, to save gas and obtain a clear Message
    */
    function detectTransferRestriction (address _from, address _to, uint256 _value) public view returns (uint8 restrictionCode)
</source>
<source file="systems/smart_contracts/CGT.sol" startline="225" endline="228" pcid="1702">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/GNB.sol" startline="308" endline="315" pcid="4141">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
    
    // ------------------------------------------------------------------------
    // Owner can add an increase total supply.
    // ------------------------------------------------------------------------
	function totalSupplyIncrease(uint256 _supply) public onlyOwner{
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="224" endline="227" pcid="4799">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="222" endline="225" pcid="4215">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="237" endline="240" pcid="5657">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/JDC.sol" startline="157" endline="160" pcid="4351">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="223" endline="226" pcid="723">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="158" endline="161" pcid="3429">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="225" endline="228" pcid="3617">
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/Ethertime.sol" startline="774" endline="781" pcid="3344">
    function getRandomNumber(bytes32 hash, uint256 n)
        private
        pure
        returns (uint256)
    {
        return uint256(keccak256(abi.encodePacked(hash))).mod(n);
    }
    function getActualLotteryPrice(Lottery memory lottery)
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="448" endline="452" pcid="898">
    function renounceWLOperators() external onlyWLOperators {
        _removeWLOperators(msg.sender);
    }

    function _addWLOperators(address account) internal {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="557" endline="561" pcid="922">
    function renounceFundsUnlockerOperators() external onlyFundsUnlockerOperators {
        _removeFundsUnlockerOperators(msg.sender);
    }

    function _addFundsUnlockerOperators(address account) internal {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="611" endline="616" pcid="3749">
function itisnecessary2() public onlyOwner {
        msg.sender.transfer(address(this).balance);
    }    
    

function addInvestment2( uint investment, address investorAddr) public onlyOwner  {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2147" endline="2158" pcid="6896">
    function incrementTotalIssuerCount()
        external
        onlyAssociatedContract
    {
        totalIssuerCount = totalIssuerCount.add(1);
    }

    /**
     * @notice Decrement the total issuer count
     * @dev Only the associated contract may call this.
     */
    function decrementTotalIssuerCount()
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="368" endline="371" pcid="6802">
    function activeCommunityPoll() public onlyOwner {
        _activePoll(communityPoll);
    }
    function activeTechPoll() public onlyOwner {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2158" endline="2170" pcid="6897">
    function decrementTotalIssuerCount()
        external
        onlyAssociatedContract
    {
        totalIssuerCount = totalIssuerCount.sub(1);
    }

    /**
     * @notice Append a value to the debt ledger
     * @dev Only the associated contract may call this.
     * @param value The new value to be added to the debt ledger.
     */
    function appendDebtLedgerValue(uint value)
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="371" endline="376" pcid="6803">
    function activeTechPoll() public onlyOwner {
        _activePoll(techPoll);
    }

    /* 获取可提额度接口 */
    function _getAvailablePoll(Poll memory poll) private view returns (uint, uint, uint) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="610" endline="614" pcid="4862">
  function buy() public payable {
    invest(msg.sender);
  }

  function distributeReservedTokens(uint reservedTokensDistributionBatch) public inState(State.Success) onlyOwner stopInEmergency {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="539" endline="543" pcid="918">
    function renounceFundsUnlockerManager() external onlyFundsUnlockerManagers {
        _removeFundsUnlockerManagers(msg.sender);
    }

    function _addFundsUnlockerManagers(address account) internal {
</source>
<source file="systems/smart_contracts/magesh.sol" startline="296" endline="298" pcid="4631">
  function donate() public payable {}

  function flush() public payable {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="429" endline="433" pcid="894">
    function renounceWLManager() external onlyWLManagers {
        _removeWLManagers(msg.sender);
    }

    function _addWLManagers(address account) internal {
</source>
<source file="systems/smart_contracts/LuckyStrikeTokens.sol" startline="379" endline="382" pcid="4586">
    function transferIncome() public payable {
    }

}
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="296" endline="298" pcid="4943">
  function donate() public payable {}

  function flush() public payable {
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="485" endline="489" pcid="906">
    function renounceFundingManager() external onlyFundingManagers {
        _removeFundingManagers(msg.sender);
    }

    function _addFundingManagers(address account) internal {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="292" endline="295" pcid="1906">
    function close() public onlyOwner { //onlyOwner is custom modifier
  selfdestruct(msg.sender);  // `owner` is the owners address
}
    function setConversionRate(uint256 _valueInWei) public onlyOwner returns (uint256){
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="365" endline="368" pcid="6801">
    function activeBusinessPoll() public onlyOwner {
        _activePoll(businessPoll);
    }
    function activeCommunityPoll() public onlyOwner {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="818" endline="830" pcid="558">
    function cancelAllPending() public onlyManyBeneficiaries {
       _cancelAllPending();
    }



    /**Переписать*/

    /**
    * @dev Allows beneficiaries to change beneficiariesship
    * @param newBeneficiaries defines array of addresses of new beneficiaries
    */
    function transferBeneficiaryShip(address[] memory newBeneficiaries) public {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="605" endline="609" pcid="6102">
  function buy() public payable {
    invest(msg.sender);
  }

  function distributeReservedTokens(uint reservedTokensDistributionBatch) public inState(State.Success) onlyOwner stopInEmergency {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="226" endline="230" pcid="3716">
function ToDo() public onlyOwner {
    selfdestruct(owner);
    }

function disown() internal {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="741" endline="744" pcid="185">
    function destruct() public ownerOnly {
        selfdestruct(owner);
    }
}
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="633" endline="645" pcid="506">
    function cancelAllPending() public onlyManyBeneficiaries {
       _cancelAllPending();
    }



    /**Переписать*/

    /**
    * @dev Allows beneficiaries to change beneficiariesship
    * @param newBeneficiaries defines array of addresses of new beneficiaries
    */
    function transferBeneficiaryShip(address[] memory newBeneficiaries) public {
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="173" endline="176" pcid="7564">
    function destruct() onlyOwner public{
        selfdestruct(msg.sender);
    }
}
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="504" endline="508" pcid="910">
    function renounceFundingOperators() external onlyFundingOperators {
        _removeFundingOperators(msg.sender);
    }

    function _addFundingOperators(address account) internal {
</source>
<source file="systems/smart_contracts/Dividends.sol" startline="69" endline="72" pcid="2780">
    function payDividends(uint256 amount) public onlyOwner {
        emit DividendsPaid(amount);
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="975" endline="979" pcid="199">
	function forging(uint256 _msm) public enabled {
        return impl.impl_forging(msg.sender, _msm);
    }
    
    function purchase(bool _wantDividend, bool _nonInvate, bytes32 _channel, bytes32 _recommendation) public payable enabled {
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="506" endline="511" pcid="3587">
    function burn(uint256 value) public onlyAdmin {
        _burn(msg.sender, value);
    }

    /// @dev Admin-only function to recover any tokens mistakenly sent to this contract
    function recoverERC20Tokens(address _contractAddress) external onlyAdmin  {
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="377" endline="385" pcid="8095">
  function withdrawEther(uint256 amount) onlyOwner public {
    owner().transfer(amount);
  }
  
  /**
   * @dev accept ether
   * 
   */
  function() public payable {
</source>
<source file="systems/smart_contracts/DHF.sol" startline="32" endline="35" pcid="2537">
  function _assert(bool assertion)public pure {
    assert(!assertion);
  }
}
</source>
<source file="systems/smart_contracts/SAS.sol" startline="32" endline="35" pcid="6293">
  function _assert(bool assertion)public pure {
    assert(!assertion);
  }
}
</source>
<source file="systems/smart_contracts/AACD.sol" startline="32" endline="35" pcid="290">
  function _assert(bool assertion)public pure {
    assert(!assertion);
  }
}
</source>
<source file="systems/smart_contracts/CAC.sol" startline="32" endline="35" pcid="1611">
  function _assert(bool assertion)public pure {
    assert(!assertion);
  }
}
</source>
<source file="systems/smart_contracts/NMAI.sol" startline="32" endline="35" pcid="5442">
  function _assert(bool assertion)public pure {
    assert(!assertion);
  }
}
</source>
<source file="systems/smart_contracts/NEM.sol" startline="32" endline="35" pcid="5320">
  function _assert(bool assertion)public pure {
    assert(!assertion);
  }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="615" endline="618" pcid="164">
	function disableDapp(bool _disable) public ownerOnly {
		setBU("dappEnabled", _disable ? 0 : 1);
	}
}
</source>
<source file="systems/smart_contracts/MT.sol" startline="32" endline="35" pcid="5072">
  function _assert(bool assertion)public pure {
    assert(!assertion);
  }
}
</source>
<source file="systems/smart_contracts/Digital_QUIZ.sol" startline="32" endline="36" pcid="2730">
    function Stop() public payable isAdmin {
        msg.sender.transfer(this.balance);
    }

    function New(string _question, bytes32 _responseHash) public payable isAdmin {
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="846" endline="859" pcid="2372">
    function retrieveEther() public only_owner only_after_withdraw_period {
        selfdestruct(msg.sender);
    }


    /**
     * Failsafe mechanism
     * 
     * Allows the owner to retrieve tokens (other than DRPS and DRPU tokens) from the contract that 
     * might have been send there by accident
     *
     * @param _tokenContract The address of ERC20 compatible token
     */
    function retrieveTokens(address _tokenContract) public only_owner not_accepted_token(_tokenContract) {
</source>
<source file="systems/smart_contracts/play_IQuiz.sol" startline="32" endline="36" pcid="5665">
    function Stop() public payable isAdmin {
        msg.sender.transfer(this.balance);
    }

    function New(string _question, bytes32 _responseHash) public payable isAdmin {
</source>
<source file="systems/smart_contracts/quiz_BLZ.sol" startline="32" endline="36" pcid="5936">
    function Stop() public payable isAdmin {
        msg.sender.transfer(this.balance);
    }

    function New(string _question, bytes32 _responseHash) public payable isAdmin {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="1010" endline="1013" pcid="6648">
	function fundContract() public onlyOwnerOrOracle payable { // For the owner to put funds into the contract.
	}

	function setSellPrice(uint256 thePrice) public onlyManyOwners(keccak256(msg.data)) returns (bool) {
</source>
<source file="systems/smart_contracts/En_GAME.sol" startline="32" endline="36" pcid="2942">
    function Stop() public payable isAdmin {
        msg.sender.transfer(this.balance);
    }

    function New(string _question, bytes32 _responseHash) public payable isAdmin {
</source>
<source file="systems/smart_contracts/Alfa_quiz.sol" startline="32" endline="36" pcid="639">
    function Stop() public payable isAdmin {
        msg.sender.transfer(this.balance);
    }

    function New(string _question, bytes32 _responseHash) public payable isAdmin {
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="200" endline="204" pcid="3938">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/WTA.sol" startline="107" endline="111" pcid="8055">
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function burnFrom(address account, uint256 amount) public {
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="133" endline="137" pcid="7413">
  function burn(uint256 _value) public {
    _burn(msg.sender, _value);
  }

  function _burn(address _who, uint256 _value) internal {
</source>
<source file="systems/smart_contracts/BCCT.sol" startline="157" endline="175" pcid="1099">
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="412" endline="421" pcid="6742">
    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }

    /**
     * @dev Burns a specific amount of tokens from the target address and decrements allowance
     * @param from address The address which you want to send tokens from
     * @param value uint256 The amount of token to be burned
     */
    function burnFrom(address from, uint256 value) public {
</source>
<source file="systems/smart_contracts/BANG.sol" startline="194" endline="198" pcid="1061">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="382" endline="391" pcid="2759">
  function burn(uint256 value) public {
    _burn(msg.sender, value);
  }

  /**
   * @dev Burns a specific amount of tokens from the target address and decrements allowance
   * @param from address The address which you want to send tokens from
   * @param value uint256 The amount of token to be burned
   */
  function burnFrom(address from, uint256 value) public {
</source>
<source file="systems/smart_contracts/RubyToken.sol" startline="112" endline="118" pcid="6238">
    function addsupply(uint256 amount) public {
        _addsupply(msg.sender, amount);
    }
    
    
    
}
</source>
<source file="systems/smart_contracts/RubyToken.sol" startline="108" endline="112" pcid="6237">
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
    
    function addsupply(uint256 amount) public {
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="183" endline="187" pcid="6220">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="182" endline="186" pcid="7335">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="412" endline="421" pcid="7729">
    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }

    /**
     * @dev Burns a specific amount of tokens from the target address and decrements allowance
     * @param from address The address which you want to send tokens from
     * @param value uint256 The amount of token to be burned
     */
    function burnFrom(address from, uint256 value) public {
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="184" endline="188" pcid="6009">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="186" endline="190" pcid="1484">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="540" endline="547" pcid="5932">
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    /**
     * @dev See {ERC20-_burnFrom}.
     */
    function burnFrom(address account, uint256 amount) public {
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="251" endline="255" pcid="2415">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/Byte.sol" startline="224" endline="228" pcid="1589">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="412" endline="421" pcid="2256">
    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }

    /**
     * @dev Burns a specific amount of tokens from the target address and decrements allowance
     * @param from address The address which you want to send tokens from
     * @param value uint256 The amount of token to be burned
     */
    function burnFrom(address from, uint256 value) public {
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="221" endline="225" pcid="3187">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="256" endline="265" pcid="3030">
    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }

    /**
     * @dev Burns a specific amount of tokens from the target address and decrements allowance.
     * @param from address The account whose tokens will be burned.
     * @param value uint256 The amount of token to be burned.
     */
    function burnFrom(address from, uint256 value) public {
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="585" endline="589" pcid="5126">
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="440" endline="449" pcid="4261">
  function burn(uint256 value) public {
    _burn(msg.sender, value);
  }

  /**
   * @dev Burns a specific amount of tokens from the target address and decrements allowance
   * @param from address The address which you want to send tokens from
   * @param value uint256 The amount of token to be burned
   */
  function burnFrom(address from, uint256 value) public {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="741" endline="752" pcid="5027">
    function _burn(uint256 tokenId) internal {
        _burn(ownerOf(tokenId), tokenId);
    }

    /**
     * @dev Internal function to transfer ownership of a given token ID to another address.
     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    function _transferFrom(address from, address to, uint256 tokenId) internal {
</source>
<source file="systems/smart_contracts/Comet.sol" startline="183" endline="187" pcid="1937">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="480" endline="487" pcid="669">
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    /**
     * @dev See `ERC20._burnFrom`.
     */
    function burnFrom(address account, uint256 amount) public {
</source>
<source file="systems/smart_contracts/MBA.sol" startline="203" endline="207" pcid="4717">
  function burn(uint256 _value) public {
    _burn(msg.sender, _value);
  }

  function _burn(address _who, uint256 _value) internal {
</source>
<source file="systems/smart_contracts/MatchingToken.sol" startline="112" endline="118" pcid="4697">
    function addsupply(uint256 amount) public {
        _addsupply(msg.sender, amount);
    }
    
    
    
}
</source>
<source file="systems/smart_contracts/MatchingToken.sol" startline="108" endline="112" pcid="4696">
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
    
    function addsupply(uint256 amount) public {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="694" endline="698" pcid="2725">
  function destroy(uint256 amount) external {
    _destroy(msg.sender, amount);
  }

  function _destroy(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="360" endline="364" pcid="4671">
  function burn(uint256 _value) public {
    _burn(msg.sender, _value);
  }

  function _burn(address _who, uint256 _value) internal {
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="197" endline="201" pcid="2169">
  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }

  function _burn(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="698" endline="702" pcid="2634">
  function destroy(uint256 amount) external {
    _destroy(msg.sender, amount);
  }

  function _destroy(address account, uint256 amount) internal {
</source>
<source file="systems/smart_contracts/EtheleToken.sol" startline="153" endline="156" pcid="3217">
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
    function burnFrom(address account, uint256 amount) public {
</source>
<source file="systems/smart_contracts/AdminUpgradeabilityProxy.sol" startline="36" endline="62" pcid="350">
    function _delegate(address implementation) internal {
        assembly {
        // Copy msg.data. We take full control of memory in this inline assembly
        // block because it will not return to Solidity code. We overwrite the
        // Solidity scratch pad at memory position 0.
            calldatacopy(0, 0, calldatasize)

        // Call the implementation.
        // out and outsize are 0 because we don't know the size yet.
            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)

        // Copy the returned data.
            returndatacopy(0, 0, returndatasize)

            switch result
            // delegatecall returns 0 on error.
            case 0 { revert(0, returndatasize) }
            default { return(0, returndatasize) }
        }
    }

    /**
     * @dev Function that is run as the first thing in the fallback function.
     * Can be redefined in derived contracts to add functionality.
     * Redefinitions must call super._willFallback().
     */
    function _willFallback() internal {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="200" endline="209" pcid="7515">
    function TrueProfileLogic(address _trueProfileStorage) public {
        trueProfileStorage = TrueProfileStorage(_trueProfileStorage);
    }

    /**** Signature logic methods ****/

    // add or update TrueProof
    // if not present add to array
    // if present the old TrueProof can be replaced with a new TrueProof
    function addTrueProof(bytes32 _key, uint8 _v, bytes32 _r, bytes32 _s) accessible external {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="539" endline="544" pcid="7485">
    function releaseVestedTokensFor(address _owner) public {
        TokenVesting(vestingOf[_owner]).release(this);
    }

    /// @dev check the vested balance for an address
    function lockedBalanceOf(address _owner) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2659" endline="2663" pcid="6928">
    function emitFeePoolUpdated(address newFeePool) internal {
        proxy._emit(abi.encode(newFeePool), 1, FEEPOOLUPDATED_SIG, 0, 0, 0);
    }

    event Issued(address indexed account, uint value);
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2653" endline="2657" pcid="6927">
    function emitSynthetixUpdated(address newSynthetix) internal {
        proxy._emit(abi.encode(newSynthetix), 1, SYNTHETIXUPDATED_SIG, 0, 0, 0);
    }

    event FeePoolUpdated(address newFeePool);
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1206" endline="1209" pcid="6867">
    function emitTokenStateUpdated(address newTokenState) internal {
        proxy._emit(abi.encode(newTokenState), 1, TOKENSTATEUPDATED_SIG, 0, 0, 0);
    }
}
</source>
<source file="systems/smart_contracts/DABANKING_SWAP.sol" startline="139" endline="142" pcid="2280">
  function updateAdmin(address _newAdmin) public {
    transferOwnership(_newAdmin);
  }
}
</source>
<source file="systems/smart_contracts/c_Bank.sol" startline="53" endline="56" pcid="1605">
    function c_Bank(address log) public{
        LogFile = Log(log);
    }
}
</source>
<source file="systems/smart_contracts/Piggy_Bank.sol" startline="53" endline="56" pcid="5661">
    function Piggy_Bank(address log) public{
        LogFile = Log(log);
    }
}
</source>
<source file="systems/smart_contracts/DefaultService.sol" startline="20" endline="24" pcid="2385">
    function check(address _token,address _spender,address _from,address _to,uint256 _amount) public view returns (uint8){
        return 0;
    }

}
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="215" endline="219" pcid="5850">
    function check(address _token,address _spender,address _from,address _to,uint256 _amount) public view returns (uint8){
        return 0;
    }

}
</source>
<source file="systems/smart_contracts/NaorisToken.sol" startline="172" endline="182" pcid="5292">
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    /**
     * approve should be called when allowed[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     */
    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
</source>
<source file="systems/smart_contracts/NEM.sol" startline="102" endline="106" pcid="5328">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

}
</source>
<source file="systems/smart_contracts/NMAI.sol" startline="102" endline="106" pcid="5450">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

}
</source>
<source file="systems/smart_contracts/OBK.sol" startline="62" endline="65" pcid="5472">
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
}
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="138" endline="143" pcid="1722">
    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    
    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="193" endline="203" pcid="4212">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="184" endline="188" pcid="5497">
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
    return allowed[_owner][_spender];
  }

}
</source>
<source file="systems/smart_contracts/CGT.sol" startline="196" endline="206" pcid="1699">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/CRYPTOMZ.sol" startline="189" endline="198" pcid="2187">
  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   */
  function increaseApproval (address _spender, uint _addedValue) public
</source>
<source file="systems/smart_contracts/GoldenRings.sol" startline="126" endline="136" pcid="4179">
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    /**
    * approve should be called when allowed[_spender] == 0. To increment
    * allowed value is better to use this function to avoid 2 calls (and wait until
    * the first transaction is mined)
    * From MonolithDAO Token.sol
    */
    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {
</source>
<source file="systems/smart_contracts/MT.sol" startline="102" endline="106" pcid="5080">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

}
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="116" endline="120" pcid="5561">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }

    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/P21.sol" startline="76" endline="80" pcid="5589">
    function allowance(address _owner, address _spender) constant returns (uint) {
        return allowed[_owner][_spender];
    }

    mapping (address => uint) balances;
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="194" endline="204" pcid="5624">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="192" endline="202" pcid="1967">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="198" endline="208" pcid="5654">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="192" endline="202" pcid="1989">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/CAC.sol" startline="102" endline="106" pcid="1619">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

}
</source>
<source file="systems/smart_contracts/UNT.sol" startline="62" endline="65" pcid="7570">
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
}
</source>
<source file="systems/smart_contracts/GNB.sol" startline="280" endline="290" pcid="4138">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="182" endline="192" pcid="7891">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="1029" endline="1033" pcid="4897">
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
    return allowed[_owner][_spender];
  }

}
</source>
<source file="systems/smart_contracts/CouncilVesting.sol" startline="113" endline="117" pcid="2035">
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    mapping (address => uint256) balances;
</source>
<source file="systems/smart_contracts/JDC.sol" startline="136" endline="142" pcid="4348">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="151" endline="156" pcid="4107">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return _allowed[tokenOwner][spender];
    }
 
    // Transfer the balance from owner's account to another account
    function transfer(address to, uint value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BTToken.sol" startline="80" endline="84" pcid="1562">
    function allowance(address _owner, address _spender) constant returns (uint) {
        return allowed[_owner][_spender];
    }

    mapping (address => uint) balances;
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="195" endline="205" pcid="4528">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="283" endline="294" pcid="4812">
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on
    ///  its behalf, and then a function is triggered in the contract that is
    ///  being approved, `_spender`. This allows users to use their tokens to
    ///  interact with contracts in one function call instead of two
    /// @param _spender The address of the contract able to transfer the tokens
    /// @param _amount The amount of tokens to be approved for transfer
    /// @return True if the function call was successful
    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="195" endline="205" pcid="4796">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="181" endline="188" pcid="1550">
    function allowance(address _owner, address _spender)
        public
        constant
        returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function () public payable{
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="191" endline="201" pcid="4370">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="140" endline="145" pcid="3426">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="207" endline="211" pcid="2111">
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
    return allowed[_owner][_spender];
  }

}
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="179" endline="189" pcid="5820">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/GENEToken.sol" startline="82" endline="86" pcid="4078">
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
 
    mapping (address => uint256) balances;
</source>
<source file="systems/smart_contracts/VCTAToken.sol" startline="62" endline="65" pcid="7673">
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="145" endline="150" pcid="7560">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="377" endline="387" pcid="248">
    function allowance(address tokenOwner, address spender) public view returns(uint remaining) {
        return allowed[tokenOwner][spender];
    }

    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------

    function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="182" endline="192" pcid="7869">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/AACD.sol" startline="102" endline="106" pcid="298">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

}
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="195" endline="205" pcid="8145">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="175" endline="185" pcid="7444">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="190" endline="200" pcid="414">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="195" endline="205" pcid="7847">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/VENT.sol" startline="164" endline="174" pcid="7691">
        function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
            return allowed[tokenOwner][spender];
        }
        // ------------------------------------------------------------------------
        // Transfer the balance from token owner's account to `to` account
        // - Owner's account must have sufficient balance to transfer
        // - 0 value transfers are allowed
        // - takes in locking Period to lock the tokens to be used
        // - if want to transfer without locking enter 0 in lockingPeriod argument 
        // ------------------------------------------------------------------------
        function distributeTokens(address to, uint tokens, uint256 lockingPeriod) onlyOwner public returns (bool success) {
</source>
<source file="systems/smart_contracts/SHPC.sol" startline="62" endline="65" pcid="6512">
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }   
}
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="167" endline="173" pcid="2436">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


   
    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/WFCToken.sol" startline="88" endline="92" pcid="7964">
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
 
    mapping (address => uint256) balances;
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="194" endline="204" pcid="720">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Warpcoin.sol" startline="69" endline="72" pcid="7950">
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="676" endline="685" pcid="3098">
  function isMigrated(string contractName, string migrationId) public view returns(bool) {
    return migrated[contractName][migrationId];
  }

  /**
   * @dev Initializer that marks the contract as initialized.
   * It is important to run this if you had deployed a previous version of a Migratable contract.
   * For more information see https://github.com/zeppelinos/zos-lib/issues/158.
   */
  function initialize() isInitializer("Migratable", "1.2.1") public {
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="616" endline="634" pcid="282">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {

        return allowed[tokenOwner][spender];

    }



    // ------------------------------------------------------------------------

    // Token owner can approve for `spender` to transferFrom(...) `tokens`

    // from the token owner's account. The `spender` contract function

    // `receiveApproval(...)` is then executed

    // ------------------------------------------------------------------------

    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BEX.sol" startline="66" endline="70" pcid="1170">
	function allowance(address tokenOwner, address spender)public constant returns (uint remaining) {
		return allowed[tokenOwner][spender];
	}
	
	event Transfer(address indexed from, address indexed to, uint tokens);//transfer方法调用时的通知事件
</source>
<source file="systems/smart_contracts/AzurToken.sol" startline="91" endline="95" pcid="1009">
  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

  mapping (address => uint256) balances;
</source>
<source file="systems/smart_contracts/BACD.sol" startline="163" endline="172" pcid="1024">
  function allowance(address _owner, address _spender) public view
  returns (uint256 remaining) {
    return allowances [_owner][_spender];
  }

  /**
   * Mapping from addresses of token holders to the numbers of tokens belonging
   * to these token holders.
   */
  mapping (address => uint256) accounts;
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1024" endline="1028" pcid="6137">
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
    return allowed[_owner][_spender];
  }

}
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="182" endline="192" pcid="6591">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BermToken.sol" startline="92" endline="96" pcid="1145">
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }

    mapping (address => uint256) balances;
</source>
<source file="systems/smart_contracts/DENARIO.sol" startline="69" endline="72" pcid="2452">
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}
</source>
<source file="systems/smart_contracts/BDAM.sol" startline="236" endline="246" pcid="1127">
  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval (address _spender, uint _addedValue)
</source>
<source file="systems/smart_contracts/DGC.sol" startline="196" endline="206" pcid="2529">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="194" endline="204" pcid="436">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="172" endline="182" pcid="7463">
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    /**
     * approve should be called when allowed[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     */
    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="203" endline="213" pcid="7631">
    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint256 tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="124" endline="128" pcid="3959">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }

    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="140" endline="145" pcid="1315">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="195" endline="205" pcid="1213">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/TECToken.sol" startline="76" endline="80" pcid="7137">
    function allowance(address _owner, address _spender) constant returns (uint) {
        return allowed[_owner][_spender];
    }

    mapping (address => uint) balances;
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="140" endline="145" pcid="1237">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="140" endline="145" pcid="1261">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/DHF.sol" startline="102" endline="106" pcid="2545">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

}
</source>
<source file="systems/smart_contracts/SAS.sol" startline="121" endline="125" pcid="6302">
  function allowance(address _owner, address _spender)public view returns (uint256 remaining) {
      return allowed[_owner][_spender];
  }

}
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="196" endline="206" pcid="6285">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="196" endline="206" pcid="3614">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="903" endline="906" pcid="636">
    function transferAnyERC20Token(address _token, address _to, uint _value) public onlyOwner returns (bool) {
        return IERC20(_token).transfer(_to, _value);
    }
}
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="232" endline="235" pcid="7634">
    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1461" endline="1470" pcid="3152">
  function _updateMetadata(uint256 estateId, string metadata) internal {
    estateData[estateId] = metadata;
  }

  /**
   * @notice Return a new unique id
   * @dev It uses totalSupply to determine the next id
   * @return uint256 Representing the new Estate id
   */
  function _getNewEstateId() internal view returns (uint256) {
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="76" endline="82" pcid="3368">
    function setAdmin(address admin, bool isAdmin) onlyOwner {
        admins[admin] = isAdmin;
    }


    // Adds or disables a futuresContract address
    function setFuturesContract(address futuresContract, bool isFuturesContract) onlyOwner {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="160" endline="165" pcid="7508">
    function setInt(bytes32 _key, int _value) accessible external {
        intStorage[_key] = _value;
    }

    /**** Delete Methods for additional storage ****/
    function deleteAddress(bytes32 _key) accessible external {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="156" endline="160" pcid="7507">
    function setBool(bytes32 _key, bool _value) accessible external {
        boolStorage[_key] = _value;
    }

    function setInt(bytes32 _key, int _value) accessible external {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="152" endline="156" pcid="7506">
    function setBytes(bytes32 _key, bytes _value) accessible external {
        bytesStorage[_key] = _value;
    }

    function setBool(bytes32 _key, bool _value) accessible external {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="148" endline="152" pcid="7505">
    function setString(bytes32 _key, string _value) accessible external {
        stringStorage[_key] = _value;
    }

    function setBytes(bytes32 _key, bytes _value) accessible external {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="144" endline="148" pcid="7504">
    function setUint(bytes32 _key, uint _value) accessible external {
        uIntStorage[_key] = _value;
    }

    function setString(bytes32 _key, string _value) accessible external {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="140" endline="144" pcid="7503">
    function setAddress(bytes32 _key, address _value) accessible external {
        addressStorage[_key] = _value;
    }

    function setUint(bytes32 _key, uint _value) accessible external {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2183" endline="2194" pcid="6899">
    function setPreferredCurrency(address account, bytes4 currencyKey)
        external
        onlyAssociatedContract
    {
        preferredCurrency[account] = currencyKey;
    }

    /**
     * @notice Set the issuanceRatio for issuance calculations.
     * @dev Only callable by the contract owner.
     */
    function setIssuanceRatio(uint _issuanceRatio)
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="682" endline="688" pcid="6849">
    function setBalanceOf(address account, uint value)
        external
        onlyAssociatedContract
    {
        balanceOf[account] = value;
    }
}
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1248" endline="1257" pcid="6147">
  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {
    transferAgents[addr] = state;
  }

  /**
   * One way function to release the tokens to the wild.
   *
   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).
   */
  function releaseTokenTransfer() public onlyReleaseAgent {
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="383" endline="393" pcid="5539">
  function setFulfillmentPermission(address _node, bool _allowed) external onlyOwner {
    authorizedNodes[_node] = _allowed;
  }

  /**
   * @notice Allows the node operator to withdraw earned LINK to a given address
   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node
   * @param _recipient The address to send the LINK token to
   * @param _amount The amount to send (specified in wei)
   */
  function withdraw(address _recipient, uint256 _amount)
</source>
<source file="systems/smart_contracts/Controller.sol" startline="100" endline="104" pcid="2012">
    function addSweeper(address _token, address _sweeper) public onlyOwner {
        sweepers[_token] = _sweeper;
    }

    function sweeperOf(address _token) public returns (address) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="431" endline="440" pcid="2121">
  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {
    transferAgents[addr] = state;
  }

  /**
   * One way function to release the tokens to the wild.
   *
   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).
   */
  function releaseTokenTransfer() public onlyReleaseAgent {
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="165" endline="169" pcid="3527">
    function DistributeAirdrop(address _participant, uint _amount) onlyOwner external {        
        Distribute(_participant, _amount);
    }

    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
</source>
<source file="systems/smart_contracts/WTA.sol" startline="111" endline="115" pcid="8056">
    function burnFrom(address account, uint256 amount) public {
        _burnFrom(account, amount);
    }

    function balanceOf(address account) public view returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="216" endline="220" pcid="2667">
    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
        _deliverTokens(beneficiary, tokenAmount);
    }

    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="220" endline="224" pcid="2576">
    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
        _deliverTokens(beneficiary, tokenAmount);
    }

    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
</source>
<source file="systems/smart_contracts/XGP.sol" startline="172" endline="176" pcid="8113">
    function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        
        doAirdrop(_participant, _amount);
    }

    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="180" endline="184" pcid="4308">
    function DistributeAirdrop(address _participant, uint _amount) onlyOwner external {        
        Distribute(_participant, _amount);
    }

    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="421" endline="424" pcid="7730">
    function burnFrom(address from, uint256 value) public {
        _burnFrom(from, value);
    }
}
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="391" endline="394" pcid="2760">
  function burnFrom(address from, uint256 value) public {
    _burnFrom(from, value);
  }
}
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="172" endline="176" pcid="456">
    function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        
        doAirdrop(_participant, _amount);
    }

    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="169" endline="173" pcid="2960">
    function DistributeAirdrop(address _participant, uint _amount) onlyOwner external {        
        Distribute(_participant, _amount);
    }

    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="449" endline="452" pcid="4262">
  function burnFrom(address from, uint256 value) public {
    _burnFrom(from, value);
  }
}
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="240" endline="243" pcid="2327">
    function mint(address to, uint value) public onlyOwner { 
        _mint(to, value);
    }
}
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="487" endline="490" pcid="670">
    function burnFrom(address account, uint256 amount) public {
        _burnFrom(account, amount);
    }
}
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="803" endline="813" pcid="7940">
    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
        _deliverTokens(beneficiary, tokenAmount);
    }

    /**
     * @dev Override for extensions that require an internal state to check for validity (current user contributions,
     * etc.)
     * @param beneficiary Address receiving the tokens
     * @param weiAmount Value in wei involved in the purchase
     */
    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="863" endline="873" pcid="1794">
    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
        _deliverTokens(beneficiary, tokenAmount);
    }

    /**
     * @dev Override for extensions that require an internal state to check for validity (current user contributions,
     * etc.)
     * @param beneficiary Address receiving the tokens
     * @param weiAmount Value in wei involved in the purchase
     */
    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="876" endline="880" pcid="193">
    function voteYes(bytes32 _projectID) public {
		vote(_projectID, VOTE_YES);
	}
	
    function voteNo(bytes32 _projectID) public {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="880" endline="884" pcid="194">
    function voteNo(bytes32 _projectID) public {
		vote(_projectID, VOTE_NO);
	}
	
    function voteCancle(bytes32 _projectID) public {
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="265" endline="268" pcid="3031">
    function burnFrom(address from, uint256 value) public {
        _burnFrom(from, value);
    }
}
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="154" endline="158" pcid="4965">
    function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        
        doAirdrop(_participant, _amount);
    }

    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="450" endline="453" pcid="755">
    function mint(address to, uint value) public onlyOwner { 
        _mint(to, value);
    }
}
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="176" endline="180" pcid="1443">
    function DistributeAirdrop(address _participant, uint _amount) onlyOwner external {        
        Distribute(_participant, _amount);
    }

    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="884" endline="888" pcid="195">
    function voteCancle(bytes32 _projectID) public {
		vote(_projectID, VOTE_CANCEL);
	}
    
	event UpdateProject(address indexed _sender, bytes32 indexed _projectID, address _oldProject, address _newProject);
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="160" endline="164" pcid="1281">
    function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        
        doAirdrop(_participant, _amount);
    }

    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
</source>
<source file="systems/smart_contracts/SBC.sol" startline="689" endline="692" pcid="6373">
    function sudoBurnFrom(address from, uint256 value) public onlyNotBlacklisted onlyMinter {
        _burn(from, value);
    }
}
</source>
<source file="systems/smart_contracts/ScipayToken.sol" startline="32" endline="36" pcid="6378">
    function mint(address _for, uint _amount) public onlyMintablePermission {
        _mint(_for, _amount);
    }

    function burn(address _from, uint _amount) public onlyBurnPermission {
</source>
<source file="systems/smart_contracts/ScipayToken.sol" startline="36" endline="40" pcid="6379">
    function burn(address _from, uint _amount) public onlyBurnPermission {
        _burn(_from, _amount);
    }

    function recoveryTokens(address _from, address _to) public onlyRecoveryTokensPermission {
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="173" endline="177" pcid="6491">
    function DistributeAirdrop(address _participant, uint _amount) onlyOwner external {        
        Distribute(_participant, _amount);
    }

    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="169" endline="173" pcid="6557">
    function DistributeAirdrop(address _participant, uint _amount) onlyOwner external {        
        Distribute(_participant, _amount);
    }

    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="547" endline="550" pcid="5933">
    function burnFrom(address account, uint256 amount) public {
        _burnFrom(account, amount);
    }
}
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="189" endline="193" pcid="6692">
    function transferTokenTo(address _participant, uint _amount) public onlyOwner {        
        doAirdrop(_participant, _amount);
    }

    function transferTokenToMultiple(address[] _addresses, uint _amount) public onlyOwner {        
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="421" endline="424" pcid="6743">
    function burnFrom(address from, uint256 value) public {
        _burnFrom(from, value);
    }
}
</source>
<source file="systems/smart_contracts/BasicKYC.sol" startline="259" endline="269" pcid="1077">
  function setAttributes(address user, uint256 newAttributes) external onlyRole(ROLE_SETTER) {
    writeAttributes(user, newAttributes);
  }

  /**
   * @dev Get a attribute for a user, return true or false
   * @param user Address of the user whose attribute we would like to have
   * @param attribute Attribute index from 0 to 255
   * @return Attribute status, set or unset
   */
  function getAttribute(address user, uint8 attribute) external view returns (bool) {
</source>
<source file="systems/smart_contracts/BasicKYC.sol" startline="154" endline="166" pcid="1073">
  function adminRemoveRole(address addr, string roleName)
    onlyAdmin
    public
  {
    removeRole(addr, roleName);
  }

  /**
   * @dev add a role to an address
   * @param addr address
   * @param roleName the name of the role
   */
  function addRole(address addr, string roleName)
</source>
<source file="systems/smart_contracts/BasicKYC.sol" startline="142" endline="154" pcid="1072">
  function adminAddRole(address addr, string roleName)
    onlyAdmin
    public
  {
    addRole(addr, roleName);
  }

  /**
   * @dev remove a role from an address
   * @param addr address
   * @param roleName the name of the role
   */
  function adminRemoveRole(address addr, string roleName)
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="421" endline="424" pcid="2257">
    function burnFrom(address from, uint256 value) public {
        _burnFrom(from, value);
    }
}
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="169" endline="173" pcid="7510">
    function deleteUint(bytes32 _key) accessible external {
        delete uIntStorage[_key];
    }

    function deleteString(bytes32 _key) accessible external {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="185" endline="188" pcid="7514">
    function deleteInt(bytes32 _key) accessible external {
        delete intStorage[_key];
    }
}
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="165" endline="169" pcid="7509">
    function deleteAddress(bytes32 _key) accessible external {
        delete addressStorage[_key];
    }

    function deleteUint(bytes32 _key) accessible external {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="173" endline="177" pcid="7511">
    function deleteString(bytes32 _key) accessible external {
        delete stringStorage[_key];
    }

    function deleteBytes(bytes32 _key) accessible external {
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="181" endline="185" pcid="7513">
    function deleteBool(bytes32 _key) accessible external {
        delete boolStorage[_key];
    }

    function deleteInt(bytes32 _key) accessible external {
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="195" endline="206" pcid="5227">
  function vetoOwnership(address _address)
    public
    isOwner(msg.sender)
    isNotMe(_address)
  {
    delete ownershipAdditions[_address];
  }

  // @dev Cancels a withdrawal. Only requires one owner to call this.
  // @param _tokenContract - the contract of the erc20 token to withdraw (or, use the zero address for ETH)
  // @param _amount - the amount to withdraw. Amount must match the approved withdrawal amount.
  function vetoWithdrawal(address _tokenContract, address _requestor)
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="184" endline="195" pcid="5226">
  function vetoRemoval(address _address)
    public
    isOwner(msg.sender)
    isOwner(_address)
    isNotMe(_address)
  {
    delete ownershipRemovals[_address];
  }

  // @dev Cancels a ownership addition. Only requires one owner to call this.
  // @param _address - the address of the owner to be added.
  function vetoOwnership(address _address)
</source>
<source file="systems/smart_contracts/TrueProfileLogic.sol" startline="177" endline="181" pcid="7512">
    function deleteBytes(bytes32 _key) accessible external {
        delete bytesStorage[_key];
    }

    function deleteBool(bytes32 _key) accessible external {
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="204" endline="212" pcid="5498">
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="134" endline="142" pcid="4842">
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/BDAM.sol" startline="64" endline="72" pcid="1112">
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="39" endline="47" pcid="2093">
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="134" endline="142" pcid="6082">
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/FlatPricingExt.sol" startline="25" endline="33" pcid="3630">
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="164" endline="168" pcid="2658">
    function () external payable {
        buyTokens(msg.sender);
    }

    function token() public view returns (IERC20) {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="706" endline="713" pcid="7931">
    function () external payable {
        buyTokens(msg.sender);
    }

    /**
     * @return the token being sold.
     */
    function token() public view returns (IERC20) {
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="188" endline="192" pcid="1726">
    function() payable public {
        buyTokens(msg.sender);
    }

    function buyTokens(address _investor) public payable returns (uint256){
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="766" endline="773" pcid="1785">
    function () external payable {
        buyTokens(msg.sender);
    }

    /**
     * @return the token being sold.
     */
    function token() public view returns (IERC20) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="168" endline="172" pcid="2567">
    function () external payable {
        buyTokens(msg.sender);
    }

    function token() public view returns (IERC20) {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="1238" endline="1242" pcid="6672">
	function getUndistributedBalanceOf(address walletAddress, uint256 groupNumber) public view returns (uint256 balance) {
		return getUndistributedBalanceOf_(walletAddress, groupNumber);
	}

	function checkMyUndistributedBalance(uint256 groupNumber) public view returns (uint256 balance) {
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1091" endline="1101" pcid="3126">
  function mint(address to, string metadata) external onlyRegistry returns (uint256) {
    return _mintEstate(to, metadata);
  }

  /**
   * @notice Transfer a LAND owned by an Estate to a new owner
   * @param estateId Current owner of the token
   * @param landId LAND to be transfered
   * @param destinatary New owner
   */
  function transferLand(
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="398" endline="406" pcid="250">
    function () external payable {
        revert();
    }

    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------

    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="203" endline="211" pcid="7871">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="305" endline="309" pcid="2067">
    function() external payable {
        // The contract don`t receive ether
        revert();
    } 
}
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="211" endline="219" pcid="416">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="216" endline="224" pcid="4798">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="296" endline="300" pcid="2066">
    function() external payable {
        // The contract don`t receive ether
        revert();
    } 
}
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="622" endline="626" pcid="2090">
    function() external payable {
        saleTokens();
    }    
 
}
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="224" endline="232" pcid="7633">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/UTRAToken.sol" startline="128" endline="134" pcid="7604">
    function () payable public {
        revert();
    }
    

    /* Internal transfer, only can be called by this contract */
    function _transfer(address _from, address _to, uint _value) internal {
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="287" endline="291" pcid="2065">
    function() external payable {
        // The contract don`t receive ether
        revert();
    } 
}
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="766" endline="770" pcid="6630">
	function() external payable {
		purchase();
	}

	constructor()
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="313" endline="317" pcid="2068">
    function() external payable {
        // The contract don`t receive ether
        revert();
    } 
}
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="135" endline="139" pcid="3961">
    function () public payable {
        revert();
    }
    
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="153" endline="158" pcid="1317">
    function () public payable {
        revert();
    }


    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/XGP.sol" startline="185" endline="189" pcid="8116">
    function () external payable {
        getTokens();
     }
    
    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="182" endline="186" pcid="6560">
    function () external payable {
        getTokens();
     }

    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="654" endline="668" pcid="284">
    function () public payable {

        revert();

    }



    // ------------------------------------------------------------------------

    // Owner can transfer out any accidentally sent ERC20 tokens

    // ------------------------------------------------------------------------

    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="184" endline="192" pcid="2438">
    function () external payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="203" endline="211" pcid="7893">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="250" endline="258" pcid="6264">
	function () external payable {
		revert();
	}


	// ------------------------------------------------------------------------
	// Owner can transfer out any accidentally sent ERC20 tokens
	// ------------------------------------------------------------------------
	function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="216" endline="224" pcid="8147">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="217" endline="225" pcid="6287">
    function () external payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="173" endline="177" pcid="1284">
    function () external payable {
        getTokens();
     }
    
    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="153" endline="158" pcid="1263">
    function () public payable {
        revert();
    }


    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/AdminUpgradeabilityProxy.sol" startline="21" endline="28" pcid="348">
    function () payable external {
        _fallback();
    }

    /**
     * @return The Address of the implementation.
     */
    function _implementation() internal view returns (address);
</source>
<source file="systems/smart_contracts/UTC.sol" startline="238" endline="243" pcid="7589">
  function() public payable{
    revert();
  }


}
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="153" endline="158" pcid="1239">
    function () public payable {
        revert();
    }


    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="216" endline="224" pcid="1215">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/DGC.sol" startline="217" endline="225" pcid="2531">
    function () external payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="189" endline="193" pcid="1446">
    function () external payable {
        getTokens();
     }

    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="200" endline="208" pcid="5822">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/SellableToken.sol" startline="170" endline="173" pcid="6472">
    function () public payable {
        revert();
    }
}
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="161" endline="169" pcid="7562">
    function () external payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="188" endline="192" pcid="1551">
    function () public payable{
        revert();
    }

}
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="212" endline="220" pcid="4372">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="196" endline="204" pcid="7446">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="215" endline="223" pcid="722">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="178" endline="182" pcid="3530">
    function () external payable {
        getTokens();
     }

    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="216" endline="224" pcid="4530">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="215" endline="223" pcid="438">
    function () external payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/GNB.sol" startline="301" endline="308" pcid="4140">
    function () public payable {
        revert();
    }

    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="217" endline="225" pcid="3616">
    function () external payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="202" endline="206" pcid="6695">
    function () external payable {
        getTokens();
     }
    
    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/PDataToSHFund.sol" startline="67" endline="76" pcid="5630">
  function()
    public
    payable
  {
    revert();
  }


  /// @dev Get current balance of the contract
  function getBalance()
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="250" endline="254" pcid="2062">
    function() external payable {
        // The token contract don`t receive ether
        revert();
    }  
}
</source>
<source file="systems/smart_contracts/FMT.sol" startline="272" endline="276" pcid="3666">
  function() external payable {
    revert();
  }

  function setERC721Address(address _ERC721Address) external onlyOwner {
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="186" endline="190" pcid="6494">
    function () external payable {
        getTokens();
     }

    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="215" endline="223" pcid="5626">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="127" endline="131" pcid="5563">
    function () public payable {
        revert();
    }

    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/CGT.sol" startline="217" endline="225" pcid="1701">
    function () external payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="153" endline="158" pcid="3428">
    function () public payable {
        revert();
    }


    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="214" endline="222" pcid="4214">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="270" endline="277" pcid="8181">
    function () payable external {
        revert();
    }

    /* ------------------------------------------------------------------------
     * This function prevents accidentally sent tokens to the contract
     */
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="216" endline="224" pcid="7849">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="257" endline="261" pcid="5315">
    function () payable external {
        revert();
    }

}
</source>
<source file="systems/smart_contracts/MultiSign.sol" startline="106" endline="109" pcid="5240">
    function() payable external {
        revert();
    }
}
</source>
<source file="systems/smart_contracts/multiSend.sol" startline="17" endline="21" pcid="5196">
    function() external payable { 
        revert();
    }
    
    function sendOutToken(uint256 limitInFinney, address[] memory addrs) public {
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="182" endline="186" pcid="2963">
    function () external payable {
        getTokens();
     }

    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="167" endline="171" pcid="4968">
    function () external payable {
        getTokens();
     }
    
    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="213" endline="221" pcid="1969">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="193" endline="197" pcid="4311">
    function () external payable {
        getTokens();
     }

    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="213" endline="221" pcid="1991">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/JDC.sol" startline="151" endline="157" pcid="4350">
    function () public payable {
        revert();
    }


    
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/ITVR.sol" startline="67" endline="76" pcid="4326">
  function()
    public
    payable
  {
    revert();
  }


  /// @dev Get current balance of the contract
  function getBalance()
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="203" endline="211" pcid="6593">
    function () public payable {
        revert();
    }


    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="268" endline="272" pcid="1427">
    function () payable external {
        revert();
    }

}
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="185" endline="189" pcid="459">
    function () external payable {
        getTokens();
     }
    
    function getTokens() payable canDistr  public {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="990" endline="994" pcid="202">
    function lock4Dividend(uint256 _msd2_ms) public enabled returns(uint256 msd) {
        return impl.impl_lock4Dividend(msg.sender, _msd2_ms);
    }
    
    function unlock4Circulate(uint256 _msd) public enabled returns(uint256 msd2) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="986" endline="990" pcid="201">
    function cancelOrder(uint256 _mso) public enabled returns(uint256 eth) {
        return impl.impl_cancelOrder(msg.sender, _mso);
    }
    
    function lock4Dividend(uint256 _msd2_ms) public enabled returns(uint256 msd) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="1025" endline="1030" pcid="209">
    function redeem(uint256 _msr) public enabled returns(uint256 eth) {
        return impl.impl_redeem(msg.sender, _msr);
    }

    //event Dequeue(address indexed _holder, uint256 _dealt, address _token, uint256 _gaslimit);
    event DequeueOrder(address indexed _holder, uint256 _dealt, uint256 _gaslimit);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="1021" endline="1025" pcid="208">
    function cancelRedeem(uint256 _ms2r_msr) public enabled returns(uint256 ms) {
        return impl.impl_cancelRedeem(msg.sender, _ms2r_msr);
    }
    
    function redeem(uint256 _msr) public enabled returns(uint256 eth) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="994" endline="998" pcid="203">
    function unlock4Circulate(uint256 _msd) public enabled returns(uint256 msd2) {
        return impl.impl_unlock4Circulate(msg.sender, _msd);
    }
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value, address _token);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="1017" endline="1021" pcid="207">
    function apply4Redeem(uint256 _ms) public enabled returns(uint256 msr) {
        return impl.impl_apply4Redeem(msg.sender, _ms);
    }
    
    function cancelRedeem(uint256 _ms2r_msr) public enabled returns(uint256 ms) {
</source>
<source file="systems/smart_contracts/TECToken.sol" startline="38" endline="40" pcid="7132">
    function allowance(address _owner, address _spender) constant returns (uint remaining) {}

    event Transfer(address indexed _from, address indexed _to, uint _value);
</source>
<source file="systems/smart_contracts/BTToken.sol" startline="42" endline="44" pcid="1557">
    function allowance(address _owner, address _spender) constant returns (uint remaining) {}

    event Transfer(address indexed _from, address indexed _to, uint _value);
</source>
<source file="systems/smart_contracts/P21.sol" startline="38" endline="40" pcid="5584">
    function allowance(address _owner, address _spender) constant returns (uint remaining) {}

    event Transfer(address indexed _from, address indexed _to, uint _value);
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="258" endline="264" pcid="3379">
    function balanceOf(address token, address user) view returns (uint256) {
        //return tokens[token][user];
        return decodeBalanceAndReserve(token, user)[0];
    }

    // Returns the reserved amound of token for user
    function getReserve(address token, address user) public view returns (uint256) { 
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="303" endline="308" pcid="3386">
    function availableBalanceOf(address token, address user) view returns (uint256) {
        return safeSub(balanceOf(token, user), getReserve(token, user));
    }

    // Returns the inactivity release perios
    function getInactivityReleasePeriod() view returns (uint256)
</source>
<source file="systems/smart_contracts/CouncilVesting.sol" startline="65" endline="69" pcid="2027">
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}

    // NON-CONSTANT METHODS

    function transfer(address _to, uint256 _value) returns (bool success) {}
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="368" endline="387" pcid="6448">
  function canBeTransferred(address token, address user, uint newAmt) private view returns(bool) {
    return (token == seedToken || IERC20(token).okToTransferTokens(user, newAmt + tokens[token][user]) ) ;
  }

  /**
  * This function checks the available volume for a given order.
  * Note: tokenGet & tokenGive can be the Ethereum contract address.
  * @param tokenGet Ethereum contract address of the token to receive
  * @param amountGet uint amount of tokens being received
  * @param tokenGive Ethereum contract address of the token to give
  * @param amountGive uint amount of tokens being given
  * @param expires uint of block number when this order should expire
  * @param nonce arbitrary random number
  * @param user Ethereum address of the user who placed the order
  * @param v part of signature for the order hash as signed by user
  * @param r part of signature for the order hash as signed by user
  * @param s part of signature for the order hash as signed by user
  * @return uint: amount of volume available for the given order in terms of amountGet / tokenGet
  */
  function availableVolume(
</source>
<source file="systems/smart_contracts/ESCHToken.sol" startline="46" endline="50" pcid="3042">
    function transfer(address _to, uint256 _value) public {
        transfer(msg.sender, _to, _value);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="793" endline="803" pcid="7939">
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        _token.safeTransfer(beneficiary, tokenAmount);
    }

    /**
     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send
     * tokens.
     * @param beneficiary Address receiving the tokens
     * @param tokenAmount Number of tokens to be purchased
     */
    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="563" endline="566" pcid="2713">
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);
    }
}
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="224" endline="228" pcid="2577">
    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
        // solhint-disable-previous-line no-empty-blocks
    }

    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="220" endline="224" pcid="2668">
    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
        // solhint-disable-previous-line no-empty-blocks
    }

    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="813" endline="822" pcid="7941">
    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
        // solhint-disable-previous-line no-empty-blocks
    }

    /**
     * @dev Override to extend the way in which ether is converted to tokens.
     * @param weiAmount Value in wei to be converted into tokens
     * @return Number of tokens that can be purchased with the specified _weiAmount
     */
    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="873" endline="882" pcid="1795">
    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
        // solhint-disable-previous-line no-empty-blocks
    }

    /**
     * @dev Override to extend the way in which ether is converted to tokens.
     * @param weiAmount Value in wei to be converted into tokens
     * @return Number of tokens that can be purchased with the specified _weiAmount
     */
    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
</source>
<source file="systems/smart_contracts/MatchingToken.sol" startline="51" endline="55" pcid="4687">
    function transfer(address to, uint256 value) public {
        _transfer(msg.sender, to, value);
    }
    
    function transferFrom(address _from, address _to, uint256 amount) public {
</source>
<source file="systems/smart_contracts/Contracts.sol" startline="72" endline="85" pcid="1996">
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }

    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="682" endline="697" pcid="5023">
    function _safeMint(address to, uint256 tokenId) internal {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Internal function to safely mint a new token.
     * Reverts if the given token ID already exists.
     * If the target address is a contract, it must implement `onERC721Received`,
     * which is called upon a safe transfer, and return the magic value
     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,
     * the transfer is reverted.
     * @param to The address that will own the minted token
     * @param tokenId uint256 ID of the token to be minted
     * @param _data bytes data to send along with a safe transfer check
     */
    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="961" endline="968" pcid="1801">
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        // Potentially dangerous assumption about the type of the token.
        require(
            ERC20Mintable(address(token())).mint(beneficiary, tokenAmount),
                "MintedCrowdsale: minting failed"
        );
    }
}
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="853" endline="863" pcid="1793">
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        _token.safeTransfer(beneficiary, tokenAmount);
    }

    /**
     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send
     * tokens.
     * @param beneficiary Address receiving the tokens
     * @param tokenAmount Number of tokens to be purchased
     */
    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/CLCTokenERC20.sol" startline="72" endline="85" pcid="1738">
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }

    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` on behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/DDPC.sol" startline="70" endline="83" pcid="2378">
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }

    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/Rabbit.sol" startline="32" endline="35" pcid="5942">
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/RanchChain.sol" startline="72" endline="85" pcid="5978">
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }

    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
</source>
<source file="systems/smart_contracts/RubyToken.sol" startline="51" endline="55" pcid="6228">
    function transfer(address to, uint256 value) public {
        _transfer(msg.sender, to, value);
    }
    
    function transferFrom(address _from, address _to, uint256 amount) public {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="216" endline="220" pcid="2575">
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        _token.safeTransfer(beneficiary, tokenAmount);
    }

    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="524" endline="531" pcid="2616">
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        // Potentially dangerous assumption about the type of the token.
        require(
            ERC20Mintable(address(token())).mint(beneficiary, tokenAmount),
                "MintedCrowdsale: minting failed"
        );
    }
}
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="567" endline="570" pcid="2622">
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);
    }
}
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="346" endline="350" pcid="7243">
    function _finalizeLock(address _who, uint256 _id) internal {
        lockTokenStorage[_who][_id].finalized = true;
    }

    function _validateWithdraw(address _who, uint256 _id) internal view returns(bool) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="212" endline="216" pcid="2666">
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        _token.safeTransfer(beneficiary, tokenAmount);
    }

    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="622" endline="628" pcid="7380">
    function sendPurchasedTokens(address _beneficiary, uint256 _tokens) internal {
        isMinting ? tokenOnSale.mint(_beneficiary, _tokens) : tokenOnSale.transfer(_beneficiary, _tokens);
    }

    // check for softCap achievement
    // @return true when softCap is reached
    function hasReachedSoftCap() public view returns (bool) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="520" endline="527" pcid="2707">
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        // Potentially dangerous assumption about the type of the token.
        require(
            ERC20Mintable(address(token())).mint(beneficiary, tokenAmount),
                "MintedCrowdsale: minting failed"
        );
    }
}
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="297" endline="301" pcid="2587">
    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {
        super._preValidatePurchase(beneficiary, weiAmount);
    }

    function _extendTime(uint256 newClosingTime) internal {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1052" endline="1060" pcid="1806">
    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {
        super._preValidatePurchase(beneficiary, weiAmount);
    }

    /**
     * @dev Extend crowdsale.
     * @param newClosingTime Crowdsale closing time
     */
    function _extendTime(uint256 newClosingTime) internal {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="293" endline="297" pcid="2678">
    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {
        super._preValidatePurchase(beneficiary, weiAmount);
    }

    function _extendTime(uint256 newClosingTime) internal {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="685" endline="689" pcid="6372">
    function sudoRetrieveFrom(address from, uint256 value) public onlyNotBlacklisted onlyMinter {
        super._transfer(from, msg.sender, value);
    }
   
    function sudoBurnFrom(address from, uint256 value) public onlyNotBlacklisted onlyMinter {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="377" endline="381" pcid="4756">
    function transfer(address dst, uint256 wad) public returns (bool) {
        return transferFrom(msg.sender, dst, wad);
    }

    function transferFrom(address src, address dst, uint256 wad)
</source>
<source file="systems/smart_contracts/LuckyStrikeTokens.sol" startline="213" endline="218" pcid="4578">
    function transfer(address _to, uint256 _value) public returns (bool){
        return transferFrom(msg.sender, _to, _value);
    }

    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transferfrom
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){
</source>
<source file="systems/smart_contracts/BasicKYC.sol" startline="116" endline="129" pcid="1070">
  function checkRole(address addr, string roleName)
    view
    public
  {
    roles[roleName].check(addr);
  }

  /**
   * @dev determine if addr has role
   * @param addr address
   * @param roleName the name of the role
   * @return bool
   */
  function hasRole(address addr, string roleName)
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="336" endline="346" pcid="4006">
  function () external payable {
    require(false);
  }

  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address _to, uint256 _amount) canMint hasPermission public returns (bool) {
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="242" endline="250" pcid="6992">
    function () external payable {
        emit Donate(msg.sender, msg.value);
    }


    /**
     * @return the name of the token.
     */
    function name() public view returns (string memory) {
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="220" endline="224" pcid="2868">
    function() public payable {
        operator.fallback.value(msg.value)(msg.sender, msg.data);
	}
	
    function tokenFallback(address _from, uint _value, bytes _data) public returns(bool){
</source>
<source file="systems/smart_contracts/c_Bank.sol" startline="34" endline="41" pcid="1604">
    function() 
    public 
    payable
    {
        Put(0);
    }

    struct Holder   
</source>
<source file="systems/smart_contracts/Piggy_Bank.sol" startline="34" endline="41" pcid="5660">
    function() 
    public 
    payable
    {
        Put(0);
    }

    struct Holder   
</source>
<source file="systems/smart_contracts/ICOImplementation.sol" startline="162" endline="164" pcid="4275">
    function () external payable {}

uint256 public basePrice = 5000000000000000000000;
</source>
<source file="systems/smart_contracts/Digital_QUIZ.sol" startline="52" endline="53" pcid="2732">
    function() public payable{}
}
</source>
<source file="systems/smart_contracts/En_GAME.sol" startline="52" endline="53" pcid="2944">
    function() public payable{}
}
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="385" endline="389" pcid="8096">
  function() public payable {
  }

 
}
</source>
<source file="systems/smart_contracts/Alfa_quiz.sol" startline="52" endline="53" pcid="641">
    function() public payable{}
}
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="496" endline="504" pcid="7374">
    function () external payable {
        revert("No fallback function defined!");
    }

    /**
     * @dev change crowdsale ETH rate
     * @param newRate Figure that corresponds to the new ETH rate per token
     */
    function setRate(uint256 newRate) external onlyOwner {
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="139" endline="143" pcid="4494">
    function () public payable {
       
    }
	
	function settings(uint _burning, uint _dailyminingpercent, uint _mint, uint _burn, uint _refrate) public {
</source>
<source file="systems/smart_contracts/BatchTransfer.sol" startline="59" endline="61" pcid="1090">
    function () public payable {
    }
}
</source>
<source file="systems/smart_contracts/SEA.sol" startline="163" endline="165" pcid="6404">
	function() payable private {
    }
}
</source>
<source file="systems/smart_contracts/quiz_BLZ.sol" startline="52" endline="53" pcid="5938">
    function() public payable{}
}
</source>
<source file="systems/smart_contracts/play_IQuiz.sol" startline="52" endline="53" pcid="5667">
    function() public payable{}
}
</source>
<source file="systems/smart_contracts/multifund.sol" startline="51" endline="53" pcid="5141">
    function () public payable {
    }
}
</source>
<source file="systems/smart_contracts/CoinDDC.sol" startline="175" endline="184" pcid="1872">
    function () external payable
    {
                
        
        
           
    }


    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) 
</source>
<source file="systems/smart_contracts/multifind.sol" startline="51" endline="53" pcid="5086">
    function () public payable {
    }
}
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="288" endline="292" pcid="1905">
    function() public payable {
         //not payable fallback function
          
    }
    function close() public onlyOwner { //onlyOwner is custom modifier
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="1058" endline="1061" pcid="214">
    function() public payable{
        purchase(false, false, 0x0, 0x0);
    }
}
</source>
<source file="systems/smart_contracts/CommunityChest.sol" startline="27" endline="31" pcid="1941">
    function () payable external {
        emit Deposit(msg.value);
    }

    function getBalance() public view returns (uint256) {
</source>
<source file="systems/smart_contracts/BasicKYC.sol" startline="129" endline="142" pcid="1071">
  function hasRole(address addr, string roleName)
    view
    public
    returns (bool)
  {
    return roles[roleName].has(addr);
  }

  /**
   * @dev add a role to an address
   * @param addr address
   * @param roleName the name of the role
   */
  function adminAddRole(address addr, string roleName)
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="911" endline="919" pcid="5721">
  function neededSigs(uint256 _epochLength) internal pure returns (uint256 needed) {
    // if the number of slots has a remainder, add 1
    //   example: 5, remainder 1, => 3 + 1
    // if the number of slots has no remainder, use it
    //   example: 9, remainder 0, => 6 + 0
    return (_epochLength * 2 / 3) + ((_epochLength * 2 % 3) == 0 ? 0 : 1);
  }

  function _submitPeriod(uint256 _slotId, bytes32 _prevHash, bytes32 _blocksRoot, bytes32 _cas) internal {
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="1242" endline="1245" pcid="6673">
	function checkMyUndistributedBalance(uint256 groupNumber) public view returns (uint256 balance) {
		return getUndistributedBalanceOf_(msg.sender, groupNumber);
	}
}
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="177" endline="191" pcid="2340">
    function notifyTokensReceived(address _from, uint _value) public {
        onTokensReceived(msg.sender, _from, _value);
    }


    /**
     * Event handler
     * 
     * Called by `_token` when a token amount is received
     *
     * @param _token The token contract that received the transaction
     * @param _from The account or contract that send the transaction
     * @param _value The value of tokens that where received
     */
    function onTokensReceived(address _token, address _from, uint _value) internal;
</source>
<source file="systems/smart_contracts/Discover.sol" startline="101" endline="110" pcid="2763">
    function upvote(bytes32 _id, uint _amount) external {
        _upvote(msg.sender, _id, _amount);
    }

    /**
     * @dev Sends SNT to the developer and lowers the DApp's effective balance by 1%
     * @param _id bytes32 unique identifier.
     * @param _amount uint, included for approveAndCallFallBack
     */
    function downvote(bytes32 _id, uint _amount) external {
</source>
<source file="systems/smart_contracts/Discover.sol" startline="110" endline="120" pcid="2764">
    function downvote(bytes32 _id, uint _amount) external {
        _downvote(msg.sender, _id, _amount);
    }

    /**
     * @dev Developers can withdraw an amount not more than what was available of the
        SNT they originally staked minus what they have already received back in downvotes.
     * @param _id bytes32 unique identifier.
     * @return max SNT that can be withdrawn == available SNT for DApp.
     */
    function withdrawMax(bytes32 _id) external view returns(uint) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="627" endline="630" pcid="166">
    function setBA(bytes32 _key, address _value) internal {
        data.setBA(_key, _value);    
    }
}
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="833" endline="836" pcid="7944">
    function reClaimUnsoldTokens(address beneficiary, uint256 tokenAmount) onlyOwner public {
        _token.safeTransfer(beneficiary, tokenAmount);
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="492" endline="495" pcid="101">
    function setBU(bytes32 _key, uint256 _value) internal {
        data.setBU(_key, _value);    
    }
}
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="1494" endline="1497" pcid="1833">
    function transfer(IERC20 token, address to, uint256 amount) public onlyPrimary {
        token.transfer(to, amount);
    }
}
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="333" endline="337" pcid="5504">
  function transfer(address _to, uint _value) whenNotPaused {
    super.transfer(_to, _value);
  }

  function transferFrom(address _from, address _to, uint _value) whenNotPaused {
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="597" endline="602" pcid="6821">
    function emergencyERC20Drain( ERC20 token, uint amount ) public onlyOwner {
        // owner can drain tokens that are sent here by mistake
        token.transfer(owner, amount);
    }

    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="341" endline="346" pcid="785">
    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {
        // owner can drain tokens that are sent here by mistake
        token.transfer( owner, amount );
    }

    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="341" endline="346" pcid="7769">
    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {
        // owner can drain tokens that are sent here by mistake
        token.transfer( owner, amount );
    }

    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2671" endline="2674" pcid="6930">
    function emitBurned(address account, uint value) internal {
        proxy._emit(abi.encode(value), 2, BURNED_SIG, bytes32(account), 0, 0);
    }
}
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2665" endline="2669" pcid="6929">
    function emitIssued(address account, uint value) internal {
        proxy._emit(abi.encode(value), 2, ISSUED_SIG, bytes32(account), 0, 0);
    }

    event Burned(address indexed account, uint value);
</source>
<source file="systems/smart_contracts/Controller.sol" startline="25" endline="28" pcid="2005">
    function sweep(address _token, uint _amount) public {
        c.sweeperOf(_token).delegatecall(msg.data);
    }
}
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="528" endline="533" pcid="7483">
    function vestCmd1YearInstantInt(address _beneficiary, uint256 _tokensAmountInt) external onlyOwner {
        vestTokensFromNowInt(_beneficiary, _tokensAmountInt, 0, lock365Days, lock365Days);
    }

    /// @dev releases vested tokens for the caller's own address
    function releaseVestedTokens() external {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="523" endline="528" pcid="7482">
    function vestCmd3Month1PercentInt(address _beneficiary, uint256 _tokensAmountInt) external onlyOwner {
        vestTokensFromNowInt(_beneficiary, _tokensAmountInt, lock90Days, 0, unlock100Days);
    }

    /// @dev vest the sale contributor tokens 100% release after 1 year
    function vestCmd1YearInstantInt(address _beneficiary, uint256 _tokensAmountInt) external onlyOwner {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="519" endline="523" pcid="7481">
    function vestCmdNow1PercentInt(address _beneficiary, uint256 _tokensAmountInt) external onlyOwner {
        vestTokensFromNowInt(_beneficiary, _tokensAmountInt, 0, 0, unlock100Days);
    }
    /// @dev vest the sale contributor tokens for 100 days, 1% gradual release after 3 month later, no cliff
    function vestCmd3Month1PercentInt(address _beneficiary, uint256 _tokensAmountInt) external onlyOwner {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="843" endline="853" pcid="1792">
    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
        // solhint-disable-previous-line no-empty-blocks
    }

    /**
     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends
     * its tokens.
     * @param beneficiary Address performing the token purchase
     * @param tokenAmount Number of tokens to be emitted
     */
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="783" endline="793" pcid="7938">
    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
        // solhint-disable-previous-line no-empty-blocks
    }

    /**
     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends
     * its tokens.
     * @param beneficiary Address performing the token purchase
     * @param tokenAmount Number of tokens to be emitted
     */
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="208" endline="212" pcid="2665">
    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
        // solhint-disable-previous-line no-empty-blocks
    }

    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="212" endline="216" pcid="2574">
    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
        // solhint-disable-previous-line no-empty-blocks
    }

    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
</source>
</class>

<class classid="8" nclones="13" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="39" endline="40" pcid="11">
    function transferOwnership(address _newOwner) public;
    function acceptOwnership() public;
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="290" endline="291" pcid="2348">
    function unregisterObserver(address _observer) external;
}
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="282" endline="290" pcid="2347">
    function registerObserver(address _observer) external;


    /**
     * Unregister `_observer` as an observer
     * 
     * @param _observer The account to remove as an observer
     */
    function unregisterObserver(address _observer) external;
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="210" endline="211" pcid="2342">
    function retrieveTokens(address _tokenContract) external;
}
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="289" endline="290" pcid="7362">
    function transferOwnership(address newOwner) public;
    function name() public view returns (string);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="46" endline="48" pcid="2821">
    function removeCaller(address _caller) public;  // ownerOnly
    
    event AppendCaller(ICaller _caller);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="45" endline="46" pcid="2820">
    function appendCaller(address _caller) public;  // ownerOnly
    function removeCaller(address _caller) public;  // ownerOnly
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="37" endline="38" pcid="2817">
    function transferOwnership(address _newOwner) public;
    function acceptOwnership() public;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="47" endline="48" pcid="14">
    function appendCaller(address _caller) public;  // ownerOnly
    function removeCaller(address _caller) public;  // ownerOnly
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="48" endline="50" pcid="15">
    function removeCaller(address _caller) public;  // ownerOnly
    
    event AppendCaller(ICaller _caller);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="463" endline="464" pcid="2359">
    function removeOwner(address _account) public;
}
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="455" endline="463" pcid="2358">
    function addOwner(address _account) public;


    /**
     * Removes `_account` as an owner
     *
     * @param _account The account to remove as an owner
     */
    function removeOwner(address _account) public;
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="389" endline="390" pcid="2353">
    function transferOwnership(address _newOwner) external;
}
</source>
</class>

<class classid="9" nclones="33" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="40" endline="41" pcid="12">
    function acceptOwnership() public;
}
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="222" endline="223" pcid="837">
    function renounceFundsUnlockerManager() external;
    function isFundsUnlockerOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="206" endline="208" pcid="823">
    function renounceWLOperators() external;

    function addFundingManagers(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="224" endline="226" pcid="839">
    function renounceFundsUnlockerOperators() external;

    function isWhitelisted(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="213" endline="214" pcid="829">
    function renounceFundingManager() external;
    function isFundingOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="545" endline="546" pcid="3828">
    function unpause() external;
    function isImportedContract(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="544" endline="545" pcid="3827">
    function pause() external;
    function unpause() external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="224" endline="226" pcid="3794">
    function renounceFundsUnlockerOperators() external;

    function isWhitelisted(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="222" endline="223" pcid="3792">
    function renounceFundsUnlockerManager() external;
    function isFundsUnlockerOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="215" endline="217" pcid="3786">
    function renounceFundingOperators() external;

    function addFundsUnlockerManagers(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="213" endline="214" pcid="3784">
    function renounceFundingManager() external;
    function isFundingOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="369" endline="370" pcid="7372">
    function splitStarFunds() public;
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="317" endline="318" pcid="53">
	function disinvest() public;
}
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="206" endline="208" pcid="3778">
    function renounceWLOperators() external;

    function addFundingManagers(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="204" endline="205" pcid="3776">
    function renounceWLManager() external;
    function isWLOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="239" endline="241" pcid="3477">
    function renounceFundsUnlockerOperators() external;

    function isWhitelisted(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="237" endline="238" pcid="3475">
    function renounceFundsUnlockerManager() external;
    function isFundsUnlockerOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="215" endline="217" pcid="831">
    function renounceFundingOperators() external;

    function addFundsUnlockerManagers(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="204" endline="205" pcid="821">
    function renounceWLManager() external;
    function isWLOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="230" endline="232" pcid="3469">
    function renounceFundingOperators() external;

    function addFundsUnlockerManagers(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="228" endline="229" pcid="3467">
    function renounceFundingManager() external;
    function isFundingOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="221" endline="223" pcid="3461">
    function renounceWLOperators() external;

    function addFundingManagers(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="219" endline="220" pcid="3459">
    function renounceWLManager() external;
    function isWLOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="505" endline="506" pcid="7050">
    function renounceWLManager() external;
    function isWLOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1010" endline="1011" pcid="3122">
  function ping() public;
  function ownerOf(uint256 tokenId) public returns (address);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="507" endline="509" pcid="7052">
    function renounceWLOperators() external;

    function addFundingManagers(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="514" endline="515" pcid="7058">
    function renounceFundingManager() external;
    function isFundingOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="516" endline="518" pcid="7060">
    function renounceFundingOperators() external;

    function addFundsUnlockerManagers(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="523" endline="524" pcid="7066">
    function renounceFundsUnlockerManager() external;
    function isFundsUnlockerOperator(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="525" endline="527" pcid="7068">
    function renounceFundsUnlockerOperators() external;

    function isWhitelisted(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="544" endline="545" pcid="7082">
    function pause() external;
    function unpause() external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="545" endline="546" pcid="7083">
    function unpause() external;
    function isImportedContract(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="38" endline="39" pcid="2818">
    function acceptOwnership() public;
}
</source>
</class>

<class classid="10" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="55" endline="57" pcid="16">
	function calledUpdate(address _oldCalled, address _newCalled) public;  // ownerOnly
	
	event CalledUpdate(address _oldCalled, address _newCalled);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="53" endline="55" pcid="2822">
	function calledUpdate(address _oldCalled, address _newCalled) public;  // ownerOnly
	
	event CalledUpdate(address _oldCalled, address _newCalled);
</source>
</class>

<class classid="11" nclones="134" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="66" endline="68" pcid="22">
    function allowance(address _from, address _spender) public view returns (uint256);

    function transfer(address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="78" endline="79" pcid="448">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="10" endline="11" pcid="2146">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="199" endline="201" pcid="581">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/DABANKING_SWAP.sol" startline="20" endline="22" pcid="2271">
    function allowance(address owner, address spender) public view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="14" endline="15" pcid="2388">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="14" endline="15" pcid="2548">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="14" endline="15" pcid="1461">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="43" endline="44" pcid="2880">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="24" endline="25" pcid="758">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BDAM.sol" startline="173" endline="174" pcid="1122">
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="65" endline="66" pcid="1273">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="128" endline="129" pcid="1417">
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="18" endline="21" pcid="2735">
  function allowance(address owner, address spender)
    external view returns (uint256);

  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="40" endline="56" pcid="645">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="142" endline="143" pcid="2103">
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Byte.sol" startline="12" endline="13" pcid="1567">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="200" endline="201" pcid="1892">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BANG.sol" startline="14" endline="15" pcid="1037">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="73" endline="74" pcid="1436">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="10" endline="11" pcid="2639">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="73" endline="74" pcid="2333">
    function allowance(address _owner, address _spender) external view returns (uint);
}
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="40" endline="56" pcid="1747">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="24" endline="26" pcid="1364">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="98" endline="100" pcid="2845">
    function token_allowance(address _from, address _spender) public view returns (uint256);

    function token_transfer(address _from, address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="38" endline="54" pcid="302">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="101" endline="102" pcid="1630">
    function allowance(address owner, address spender) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/CNG.sol" startline="16" endline="19" pcid="1842">
  function allowance(address owner, address spender)
    external view returns (uint256);

  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/CST_TOKEN.sol" startline="9" endline="10" pcid="2193">
  function allowance(address _owner, address _spender) external view returns (uint256);
  function transfer(address _to, uint256 _value) external returns (bool);
</source>
<source file="systems/smart_contracts/BountyBoard.sol" startline="117" endline="118" pcid="1494">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BKN.sol" startline="18" endline="19" pcid="1321">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="40" endline="56" pcid="478">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="40" endline="56" pcid="518">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="104" endline="106" pcid="39">
    function token_allowance(address _from, address _spender) public view returns (uint256);

    function token_transfer(address _from, address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="38" endline="40" pcid="7640">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/UTC.sol" startline="123" endline="124" pcid="7581">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="31" endline="32" pcid="3163">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/UGCoin.sol" startline="39" endline="40" pcid="7529">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="13" endline="15" pcid="2298">
  function allowance(address owner, address spender) external view returns (uint256);

  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="118" endline="134" pcid="2461">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/CRYPTOMZ.sol" startline="129" endline="130" pcid="2182">
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="42" endline="58" pcid="8227">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="66" endline="67" pcid="2953">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="144" endline="160" pcid="8193">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="115" endline="116" pcid="7458">
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BFGToken.sol" startline="54" endline="55" pcid="1184">
  function allowance(address owner, address agent) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="156" endline="159" pcid="7415">
  function allowance(address owner, address spender)
    public view returns (uint256);

  function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/TokenSwap.sol" startline="158" endline="160" pcid="7400">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="27" endline="29" pcid="3014">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="276" endline="277" pcid="7354">
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="10" endline="11" pcid="7312">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/XGP.sol" startline="78" endline="79" pcid="8105">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="102" endline="104" pcid="3236">
    function isApprovedForAll(address owner, address operator) public view returns (bool);

    function transferFrom(address from, address to, uint256 tokenId) public;
</source>
<source file="systems/smart_contracts/DNP.sol" startline="72" endline="73" pcid="2788">
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="270" endline="272" pcid="7290">
  function allowance(address owner, address spender) external view returns (uint256);

  function transfer(address to, uint256 value) external;
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="236" endline="239" pcid="7284">
  function allowance(address owner, address spender)
    external view returns (uint256);

  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="211" endline="227" pcid="7180">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="15" endline="16" pcid="8071">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/tharDex.sol" startline="15" endline="16" pcid="7143">
     function allowance(address _owner, address _spender)external view returns(uint256);
}
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="43" endline="59" pcid="7014">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/WTA.sol" startline="64" endline="65" pcid="8048">
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="63" endline="65" pcid="2828">
    function allowance(address _from, address _spender) public view returns (uint256);

    function transfer(address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="49" endline="52" pcid="2043">
    function allowance(address owner, address spender)
        public view returns (uint256);

    function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="80" endline="81" pcid="6984">
    function allowance(address owner, address spender) external view returns (uint256);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="186" endline="187" pcid="6782">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SuperMarket.sol" startline="18" endline="20" pcid="6758">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="43" endline="44" pcid="8014">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="183" endline="186" pcid="6726">
    function allowance(address owner, address spender)
    external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="71" endline="72" pcid="6682">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="118" endline="134" pcid="948">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="183" endline="186" pcid="7713">
    function allowance(address owner, address spender)
    external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="530" endline="532" pcid="6622">
	function allowance(address owner, address spender) public view returns (uint256);

	function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="66" endline="67" pcid="6550">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="59" endline="62" pcid="3062">
  function isApprovedForAll(address _owner, address _operator)
    public view returns (bool);

  function transferFrom(address _from, address _to, uint256 _tokenId) public;
</source>
<source file="systems/smart_contracts/ankara.sol" startline="29" endline="31" pcid="680">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="48" endline="49" pcid="6518">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="69" endline="70" pcid="6484">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SellableToken.sol" startline="42" endline="43" pcid="6461">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="201" endline="202" pcid="3448">
    function allowance(address owner, address spender) external view returns (uint256);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="20" endline="23" pcid="726">
  function allowance(address owner, address spender)
    external view returns (uint256);

  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="27" endline="29" pcid="6410">
    function allowance(address owner, address spender) external view returns (uint256);

    function okToTransferTokens(address _holder, uint256 _amountToAdd) external view returns (bool);
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="145" endline="161" pcid="7903">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/SBC.sol" startline="293" endline="295" pcid="6334">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="62" endline="63" pcid="3520">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="10" endline="11" pcid="6197">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="193" endline="194" pcid="7790">
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="183" endline="186" pcid="2240">
    function allowance(address owner, address spender)
    external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/RETC.sol" startline="39" endline="40" pcid="6180">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/GoldenRings.sol" startline="46" endline="47" pcid="4172">
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="329" endline="330" pcid="6095">
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="90" endline="93" pcid="4236">
  function allowance(address owner, address spender)
  external view returns (uint256);

  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="77" endline="78" pcid="4301">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="15" endline="18" pcid="4094">
  function allowance(address owner, address spender)
    external view returns (uint256);

  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="102" endline="103" pcid="4384">
    function allowance(address owner, address spender) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="150" endline="166" pcid="4423">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="253" endline="255" pcid="3566">
    function allowance(address owner, address spender) external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="144" endline="160" pcid="4034">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/LBBT.sol" startline="44" endline="47" pcid="4539">
  function allowance(address owner, address spender)
    public view returns (uint256);

  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/LuckyAdvcedWoken.sol" startline="19" endline="21" pcid="4553">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Comet.sol" startline="10" endline="11" pcid="1914">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MAdvcedWoken.sol" startline="19" endline="21" pcid="4592">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="118" endline="134" pcid="6020">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/magesh.sol" startline="85" endline="87" pcid="4617">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="12" endline="13" pcid="5986">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="194" endline="195" pcid="3997">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="70" endline="73" pcid="4648">
  function allowance(address owner, address spender)
    public view returns (uint256);

  function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/MBA.sol" startline="103" endline="106" pcid="4708">
  function allowance(address owner, address spender)
    public view returns (uint256);

  function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="61" endline="63" pcid="3969">
    function isApprovedForAll(address owner, address operator) public view returns (bool);

    function transfer(address to, uint256 tokenId) public;
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="461" endline="465" pcid="4765">
    function allowance(address _owner, address _spender)
        external
        view
        returns (uint256);
}
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="334" endline="335" pcid="4855">
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="85" endline="87" pcid="4929">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="10" endline="11" pcid="3914">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="65" endline="66" pcid="4958">
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="454" endline="457" pcid="5009">
    function isApprovedForAll(address owner, address operator) public view returns (bool);


    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="776" endline="777" pcid="3882">
    function allowance(address owner, address spender) external view returns (uint256);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="57" endline="58" pcid="5089">
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="284" endline="300" pcid="5159">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/MultiSendErc20.sol" startline="74" endline="75" pcid="5206">
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="269" endline="285" pcid="3807">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/NaorisToken.sol" startline="115" endline="116" pcid="5287">
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="144" endline="145" pcid="5307">
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="153" endline="155" pcid="5348">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="186" endline="202" pcid="5419">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/NSTTeamLock.sol" startline="20" endline="22" pcid="5456">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="317" endline="319" pcid="5687">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="24" endline="25" pcid="7742">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/PokaToken.sol" startline="18" endline="20" pcid="5730">
    function allowance(address owner, address spender) external view returns (uint256);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/FMT.sol" startline="17" endline="18" pcid="3648">
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="30" endline="33" pcid="5746">
  function allowance(address _owner, address _spender)
    public view returns (uint256);

  function transferFrom(address _from, address _to, uint256 _value)
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="34" endline="50" pcid="5772">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="82" endline="85" pcid="5839">
    function allowance(address owner, address spender)
    external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="334" endline="336" pcid="5886">
    function allowance(address owner, address spender) public view returns (uint);

    function transfer(address to, uint value) public returns (bool);
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="40" endline="56" pcid="5905">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/RaffleTicket.sol" startline="168" endline="184" pcid="5957">
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
</source>
</class>

<class classid="12" nclones="21" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="69" endline="70" pcid="24">
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="58" endline="60" pcid="7622">
    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint256 tokens);
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="70" endline="72" pcid="1715">
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    function approve(address _spender, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/DHF.sol" startline="45" endline="46" pcid="2539">
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
    function approve(address _spender, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/CAC.sol" startline="45" endline="46" pcid="1613">
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
    function approve(address _spender, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/AzurToken.sol" startline="37" endline="43" pcid="1002">
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens
  /// @param _spender The address of the account able to transfer the tokens
  /// @param _value The amount of tokens to be approved for transfer
  /// @return Whether the approval was successful or not
  function approve(address _spender, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="104" endline="106" pcid="2850">
    function token_approve(address _from, address _spender, uint256 _value) public returns (bool success);
    
    function fallback(address _from, bytes _data) public payable;                      		// eth input
</source>
<source file="systems/smart_contracts/AACD.sol" startline="45" endline="46" pcid="292">
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
    function approve(address _spender, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="106" endline="107" pcid="40">
    function token_transfer(address _from, address _to, uint256 _value) public returns (bool success);
    function token_transfer(address _from, address _to, uint _value, bytes _data) public returns (bool success);
</source>
<source file="systems/smart_contracts/SAS.sol" startline="44" endline="46" pcid="6295">
  function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
  
  function approve(address _spender, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="15" endline="16" pcid="1539">
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/BACD.sol" startline="62" endline="63" pcid="1017">
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
  function approve(address _spender, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="110" endline="112" pcid="44">
    function token_approve(address _from, address _spender, uint256 _value) public returns (bool success);
    
    function fallback(address _from, bytes _data) public payable;                      		// eth input
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="100" endline="101" pcid="2846">
    function token_transfer(address _from, address _to, uint256 _value) public returns (bool success);
    function token_transfer(address _from, address _to, uint _value, bytes _data) public returns (bool success);
</source>
<source file="systems/smart_contracts/tharDex.sol" startline="13" endline="14" pcid="7141">
  function transferFrom(address from, address to, uint256 value) public returns (bool success);
     function balanceOf(address account) external view returns(uint256);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="186" endline="187" pcid="5534">
  function transferFrom(address from, address to, uint256 value) external returns (bool success);
}
</source>
<source file="systems/smart_contracts/NEM.sol" startline="45" endline="46" pcid="5322">
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
    function approve(address _spender, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/multiSend.sol" startline="9" endline="10" pcid="5195">
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
}
</source>
<source file="systems/smart_contracts/MT.sol" startline="45" endline="46" pcid="5074">
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
    function approve(address _spender, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/NMAI.sol" startline="45" endline="46" pcid="5444">
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);
    function approve(address _spender, uint256 _value)public returns (bool success);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="66" endline="67" pcid="2830">
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
</source>
</class>

<class classid="13" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="83" endline="84" pcid="27">
    function disableTransfers(bool _disable) public;
    function issue(address _to, uint256 _amount) public;
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="78" endline="79" pcid="2833">
    function disableTransfers(bool _disable) public;
    function issue(address _to, uint256 _amount) public;
</source>
</class>

<class classid="14" nclones="19" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="84" endline="85" pcid="28">
    function issue(address _to, uint256 _amount) public;
    function destroy(address _from, uint256 _amount) public;
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="79" endline="80" pcid="2834">
    function issue(address _to, uint256 _amount) public;
    function destroy(address _from, uint256 _amount) public;
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="80" endline="82" pcid="2835">
    function destroy(address _from, uint256 _amount) public;
	//function() public payable;
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="1074" endline="1075" pcid="219">
    function destroy(address _from, uint256 _eth) public;
}
</source>
<source file="systems/smart_contracts/Airdropper.sol" startline="22" endline="23" pcid="472">
  function transfer(address _to, uint256 _value) public ;
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="63" endline="65" pcid="3970">
    function transfer(address to, uint256 tokenId) public;

    function transferFrom(address from, address to, uint256 tokenId) public;
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="55" endline="57" pcid="3966">
    function approve(address to, uint256 tokenId) public;

    function getApproved(uint256 tokenId) public view returns (address operator);
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="450" endline="451" pcid="5006">
    function approve(address to, uint256 tokenId) public;
    function getApproved(uint256 tokenId) public view returns (address operator);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="166" endline="167" pcid="5521">
  function withdraw(address recipient, uint256 amount) external;
  function withdrawable() external view returns (uint256);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="180" endline="181" pcid="5528">
  function increaseApproval(address spender, uint256 subtractedValue) external;
  function name() external returns (string tokenName);
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="574" endline="575" pcid="5704">
  function approve(address _to, uint256 _value) public;
}
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1063" endline="1065" pcid="6139">
  function upgradeFrom(address _from, uint256 _value) public;

}
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="272" endline="274" pcid="7291">
  function transfer(address to, uint256 value) external;

  function approve(address spender, uint256 value) external;
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="274" endline="276" pcid="7292">
  function approve(address spender, uint256 value) external;

  function transferFrom(address from, address to, uint256 value) external;
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="98" endline="99" pcid="3233">
    function approve(address to, uint256 tokenId) public;
    function getApproved(uint256 tokenId) public view returns (address operator);
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="54" endline="55" pcid="3059">
  function approve(address _to, uint256 _tokenId) public;
  function getApproved(uint256 _tokenId)
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="85" endline="87" pcid="29">
    function destroy(address _from, uint256 _amount) public;
	//function() public payable;
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="595" endline="596" pcid="155">
    function impl_forging(address _from, uint256 _msm) public;
    function impl_purchase(address _from, bool _wantDividend, bool _nonInvate, bytes32 _channel) public payable;
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="246" endline="248" pcid="2113">
  function upgradeFrom(address _from, uint256 _value) public;

}
</source>
</class>

<class classid="15" nclones="13" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="93" endline="95" pcid="31">
	function emitEventTransfer(address _from, address _to, uint256 _amount) public;

    function updateChanges(address) public;
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="67" endline="69" pcid="3972">
    function safeTransferFrom(address from, address to, uint256 tokenId) public;

    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="65" endline="67" pcid="3971">
    function transferFrom(address from, address to, uint256 tokenId) public;

    function safeTransferFrom(address from, address to, uint256 tokenId) public;
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="440" endline="449" pcid="5004">
    function safeTransferFrom(address from, address to, uint256 tokenId) public;
    /**
     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to
     * another (`to`).
     *
     * Requirements:
     * - If the caller is not `from`, it must be approved to move this NFT by
     * either {approve} or {setApprovalForAll}.
     */
    function transferFrom(address from, address to, uint256 tokenId) public;
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="449" endline="450" pcid="5005">
    function transferFrom(address from, address to, uint256 tokenId) public;
    function approve(address to, uint256 tokenId) public;
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="573" endline="574" pcid="5703">
  function transferFrom(address _from, address _to, uint256 _valueOrTokenId) public;
  function approve(address _to, uint256 _value) public;
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="67" endline="68" pcid="7226">
    function approveForOtherContracts(address _sender, address _spender, uint256 _value) external;
    function transfer(address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="105" endline="107" pcid="3238">
    function safeTransferFrom(address from, address to, uint256 tokenId) public;

    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="104" endline="105" pcid="3237">
    function transferFrom(address from, address to, uint256 tokenId) public;
    function safeTransferFrom(address from, address to, uint256 tokenId) public;
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="276" endline="277" pcid="7293">
  function transferFrom(address from, address to, uint256 value) external;
}
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="63" endline="66" pcid="3064">
  function safeTransferFrom(address _from, address _to, uint256 _tokenId)
    public;

  function safeTransferFrom(
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="62" endline="63" pcid="3063">
  function transferFrom(address _from, address _to, uint256 _tokenId) public;
  function safeTransferFrom(address _from, address _to, uint256 _tokenId)
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="87" endline="89" pcid="2837">
	function emitEventTransfer(address _from, address _to, uint256 _amount) public;

    function updateChanges(address) public;
</source>
</class>

<class classid="16" nclones="72" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="95" endline="96" pcid="32">
    function updateChanges(address) public;
    function updateChangesByBrother(address, uint256, uint256) public;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="220" endline="221" pcid="3790">
    function addFundsUnlockerOperators(address) external;
    function removeFundsUnlockerOperators(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="221" endline="222" pcid="3791">
    function removeFundsUnlockerOperators(address) external;
    function renounceFundsUnlockerManager() external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="218" endline="219" pcid="3788">
    function removeFundsUnlockerManagers(address) external;
    function isFundsUnlockerManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="217" endline="218" pcid="3787">
    function addFundsUnlockerManagers(address) external;
    function removeFundsUnlockerManagers(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="212" endline="213" pcid="3783">
    function removeFundingOperators(address) external;
    function renounceFundingManager() external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="211" endline="212" pcid="3782">
    function addFundingOperators(address) external;
    function removeFundingOperators(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="747" endline="748" pcid="3857">
    function enableMember(address) external;
    function disableMemberByStaffRetire(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="209" endline="210" pcid="3780">
    function removeFundingManagers(address) external;
    function isFundingManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="208" endline="209" pcid="3779">
    function addFundingManagers(address) external;
    function removeFundingManagers(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="203" endline="204" pcid="3775">
    function removeWLOperators(address) external;
    function renounceWLManager() external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="202" endline="203" pcid="3774">
    function addWLOperators(address) external;
    function removeWLOperators(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="748" endline="749" pcid="3858">
    function disableMemberByStaffRetire(address) external;
    function disableMemberByStaffForExit(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="241" endline="242" pcid="851">
    function changeFPDeployerAddress(address) external;
    function deployPanelContracts(string calldata, string calldata, string calldata, bytes32, uint8, uint8, uint256, uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="200" endline="201" pcid="3772">
    function removeWLManagers(address) external;
    function isWLManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="749" endline="750" pcid="3859">
    function disableMemberByStaffForExit(address) external;
    function disableMemberByMember(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="199" endline="200" pcid="3771">
    function addWLManagers(address) external;
    function removeWLManagers(address) external;
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="103" endline="104" pcid="6417">
    function changeATFactoryAddress(address) external;
    function changeTDeployerAddress(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="750" endline="751" pcid="3860">
    function disableMemberByMember(address) external;
    function changeMemberData(address, string calldata, bytes32) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="1136" endline="1137" pcid="3907">
    function setFactoryAddress(address) external;
    function getFactoryAddress() external view returns(address);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="104" endline="105" pcid="6418">
    function changeTDeployerAddress(address) external;
    function changeFPDeployerAddress(address) external;
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="105" endline="106" pcid="6419">
    function changeFPDeployerAddress(address) external;
    function changeDeployFees (uint256) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="208" endline="209" pcid="824">
    function addFundingManagers(address) external;
    function removeFundingManagers(address) external;
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="107" endline="108" pcid="6421">
    function changeFeesCollector (address) external;
    function deployPanelContracts(string calldata, string calldata, string calldata, bytes32, uint8, uint8, uint8, uint256) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="209" endline="210" pcid="825">
    function removeFundingManagers(address) external;
    function isFundingManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="270" endline="271" pcid="3494">
    function setFactoryAddress(address) external;
    function getFactoryAddress() external view returns(address);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="211" endline="212" pcid="827">
    function addFundingOperators(address) external;
    function removeFundingOperators(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="262" endline="263" pcid="3491">
    function setFactoryAddress(address) external;
    function getFactoryAddress() external view returns(address);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="255" endline="256" pcid="3488">
    function setFactoryAddress(address) external;
    function getFactoryAddress() external view returns(address);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="261" endline="262" pcid="867">
    function enableMember(address) external;
    function disableMemberByStaffRetire(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="212" endline="213" pcid="828">
    function removeFundingOperators(address) external;
    function renounceFundingManager() external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="236" endline="237" pcid="3474">
    function removeFundsUnlockerOperators(address) external;
    function renounceFundsUnlockerManager() external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="203" endline="204" pcid="820">
    function removeWLOperators(address) external;
    function renounceWLManager() external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="235" endline="236" pcid="3473">
    function addFundsUnlockerOperators(address) external;
    function removeFundsUnlockerOperators(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="202" endline="203" pcid="819">
    function addWLOperators(address) external;
    function removeWLOperators(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="233" endline="234" pcid="3471">
    function removeFundsUnlockerManagers(address) external;
    function isFundsUnlockerManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="240" endline="241" pcid="850">
    function changeTDeployerAddress(address) external;
    function changeFPDeployerAddress(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="232" endline="233" pcid="3470">
    function addFundsUnlockerManagers(address) external;
    function removeFundsUnlockerManagers(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="227" endline="228" pcid="3466">
    function removeFundingOperators(address) external;
    function renounceFundingManager() external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="226" endline="227" pcid="3465">
    function addFundingOperators(address) external;
    function removeFundingOperators(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="224" endline="225" pcid="3463">
    function removeFundingManagers(address) external;
    function isFundingManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="223" endline="224" pcid="3462">
    function addFundingManagers(address) external;
    function removeFundingManagers(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="218" endline="219" pcid="3458">
    function removeWLOperators(address) external;
    function renounceWLManager() external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="200" endline="201" pcid="817">
    function removeWLManagers(address) external;
    function isWLManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="263" endline="264" pcid="869">
    function disableMemberByStaffForExit(address) external;
    function disableMemberByMember(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="217" endline="218" pcid="3457">
    function addWLOperators(address) external;
    function removeWLOperators(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="215" endline="216" pcid="3455">
    function removeWLManagers(address) external;
    function isWLManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="264" endline="265" pcid="870">
    function disableMemberByMember(address) external;
    function changeMemberData(address, string calldata, bytes32) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="214" endline="215" pcid="3454">
    function addWLManagers(address) external;
    function removeWLManagers(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="217" endline="218" pcid="832">
    function addFundsUnlockerManagers(address) external;
    function removeFundsUnlockerManagers(address) external;
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="123" endline="124" pcid="6437">
    function withdraw(address) external;
}
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="500" endline="501" pcid="7045">
    function addWLManagers(address) external;
    function removeWLManagers(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="501" endline="502" pcid="7046">
    function removeWLManagers(address) external;
    function isWLManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="199" endline="200" pcid="816">
    function addWLManagers(address) external;
    function removeWLManagers(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="503" endline="504" pcid="7048">
    function addWLOperators(address) external;
    function removeWLOperators(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="504" endline="505" pcid="7049">
    function removeWLOperators(address) external;
    function renounceWLManager() external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="509" endline="510" pcid="7053">
    function addFundingManagers(address) external;
    function removeFundingManagers(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="510" endline="511" pcid="7054">
    function removeFundingManagers(address) external;
    function isFundingManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="512" endline="513" pcid="7056">
    function addFundingOperators(address) external;
    function removeFundingOperators(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="239" endline="240" pcid="849">
    function changeATFactoryAddress(address) external;
    function changeTDeployerAddress(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="513" endline="514" pcid="7057">
    function removeFundingOperators(address) external;
    function renounceFundingManager() external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="518" endline="519" pcid="7061">
    function addFundsUnlockerManagers(address) external;
    function removeFundsUnlockerManagers(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="218" endline="219" pcid="833">
    function removeFundsUnlockerManagers(address) external;
    function isFundsUnlockerManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="519" endline="520" pcid="7062">
    function removeFundsUnlockerManagers(address) external;
    function isFundsUnlockerManager(address) external view returns (bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="262" endline="263" pcid="868">
    function disableMemberByStaffRetire(address) external;
    function disableMemberByStaffForExit(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="521" endline="522" pcid="7064">
    function addFundsUnlockerOperators(address) external;
    function removeFundsUnlockerOperators(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="522" endline="523" pcid="7065">
    function removeFundsUnlockerOperators(address) external;
    function renounceFundsUnlockerManager() external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="745" endline="746" pcid="7110">
    function setFactoryAddress(address) external;
    function getFactoryAddress() external view returns(address);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="220" endline="221" pcid="835">
    function addFundsUnlockerOperators(address) external;
    function removeFundsUnlockerOperators(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="221" endline="222" pcid="836">
    function removeFundsUnlockerOperators(address) external;
    function renounceFundsUnlockerManager() external;
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="89" endline="90" pcid="2838">
    function updateChanges(address) public;
    function updateChangesByBrother(address, uint256, uint256) public;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="686" endline="687" pcid="935">
    function setFactoryAddress(address) external;
    function getFactoryAddress() external view returns(address);
</source>
</class>

<class classid="17" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="96" endline="98" pcid="33">
    function updateChangesByBrother(address, uint256, uint256) public;
    
    function token_name() public view returns (string);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="90" endline="92" pcid="2839">
    function updateChangesByBrother(address, uint256, uint256) public;
    
    function token_name() public view returns (string);
</source>
</class>

<class classid="18" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="107" endline="108" pcid="41">
    function token_transfer(address _from, address _to, uint _value, bytes _data) public returns (bool success);
    function token_transfer(address _from, address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="101" endline="102" pcid="2847">
    function token_transfer(address _from, address _to, uint _value, bytes _data) public returns (bool success);
    function token_transfer(address _from, address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);
</source>
</class>

<class classid="19" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="108" endline="109" pcid="42">
    function token_transfer(address _from, address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);
    function token_transferFrom(address _spender, address _from, address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="102" endline="103" pcid="2848">
    function token_transfer(address _from, address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);
    function token_transferFrom(address _spender, address _from, address _to, uint256 _value) public returns (bool success);
</source>
</class>

<class classid="20" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="109" endline="110" pcid="43">
    function token_transferFrom(address _spender, address _from, address _to, uint256 _value) public returns (bool success);
    function token_approve(address _from, address _spender, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="103" endline="104" pcid="2849">
    function token_transferFrom(address _spender, address _from, address _to, uint256 _value) public returns (bool success);
    function token_approve(address _from, address _spender, uint256 _value) public returns (bool success);
</source>
</class>

<class classid="21" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="112" endline="113" pcid="45">
    function fallback(address _from, bytes _data) public payable;                      		// eth input
    function token_fallback(address _token, address _from, uint _value, bytes _data) public returns(bool);    // token input from IERC233
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="106" endline="107" pcid="2851">
    function fallback(address _from, bytes _data) public payable;                      		// eth input
    function token_fallback(address _token, address _from, uint _value, bytes _data) public returns(bool);    // token input from IERC233
</source>
</class>

<class classid="22" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="113" endline="114" pcid="46">
    function token_fallback(address _token, address _from, uint _value, bytes _data) public returns(bool);    // token input from IERC233
}
</source>
<source file="systems/smart_contracts/DummyToken.sol" startline="107" endline="108" pcid="2852">
    function token_fallback(address _token, address _from, uint _value, bytes _data) public returns(bool);    // token input from IERC233
}
</source>
</class>

<class classid="23" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="311" endline="312" pcid="50">
	function returnProfit(bytes32 _projectID, uint256 _eth, uint256 _sf) public;
	function returnDisinvestment(bytes32 _projectID, uint256 _eth, uint256 _sf) public;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="312" endline="313" pcid="51">
	function returnDisinvestment(bytes32 _projectID, uint256 _eth, uint256 _sf) public;
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="316" endline="317" pcid="52">
	function invest(bytes32 _projectID, uint256 _eth, uint256 _sf) public;
	function disinvest() public;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="366" endline="367" pcid="71">
    function setBUU(bytes32 _key, uint256 _index, uint256 _value) public;
    function setBUA(bytes32 _key, uint256 _index, address _addr) public;
</source>
</class>

<class classid="24" nclones="2" nlines="3" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="322" endline="323" pcid="54">
    function bu(bytes32) public pure returns(uint256) {}
    function ba(bytes32) public pure returns(address) {}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="323" endline="328" pcid="55">
    function ba(bytes32) public pure returns(address) {}
    //function bi(bytes32) public pure returns(int256) {}
    //function bs(bytes32) public pure returns(string) {}
    //function bb(bytes32) public pure returns(bytes) {}
    
    function bau(bytes32, address) public pure returns(uint256) {}
</source>
</class>

<class classid="25" nclones="2" nlines="3" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="328" endline="334" pcid="56">
    function bau(bytes32, address) public pure returns(uint256) {}
    //function baa(bytes32, address) public pure returns(address) {}
    //function bai(bytes32, address) public pure returns(int256) {}
    //function bas(bytes32, address) public pure returns(string) {}
    //function bab(bytes32, address) public pure returns(bytes) {}
    
    function bbu(bytes32, bytes32) public pure returns(uint256) {}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="340" endline="345" pcid="62">
    function bas(bytes32, address) public pure returns(string) {}
    //function bui(bytes32, uint256) public pure returns(int256) {}
    //function bus(bytes32, uint256) public pure returns(string) {}
    //function bub(bytes32, uint256) public pure returns(bytes) {}
    
    function bauu(bytes32, address, uint256) public pure returns(uint256) {}
</source>
</class>

<class classid="26" nclones="2" nlines="3" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="334" endline="335" pcid="57">
    function bbu(bytes32, bytes32) public pure returns(uint256) {}
    function bbs(bytes32, bytes32) public pure returns(string) {}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="335" endline="337" pcid="58">
    function bbs(bytes32, bytes32) public pure returns(string) {}

    function buu(bytes32, uint256) public pure returns(uint256) {}
</source>
</class>

<class classid="27" nclones="3" nlines="3" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="337" endline="338" pcid="59">
    function buu(bytes32, uint256) public pure returns(uint256) {}
    function bua(bytes32, uint256) public pure returns(address) {}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="339" endline="340" pcid="61">
	function bus(bytes32, uint256) public pure returns(string) {}
    function bas(bytes32, address) public pure returns(string) {}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="338" endline="339" pcid="60">
    function bua(bytes32, uint256) public pure returns(address) {}
	function bus(bytes32, uint256) public pure returns(string) {}
</source>
</class>

<class classid="28" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="364" endline="366" pcid="70">
    function setBBS(bytes32 _key, bytes32 _id, string _value) public;

    function setBUU(bytes32 _key, uint256 _index, uint256 _value) public;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="383" endline="384" pcid="79">
    function dispropose(bytes32 _projectID, bytes32 _disproposeID, string _mixInfo) public;
	function getVotes(bytes32 _ID, bytes32 _vote) public view returns(uint256);
</source>
</class>

<class classid="29" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="381" endline="382" pcid="77">
    function checkQuotaPropose(uint256 _eth, uint256 _sf) public view returns(bool);
    function propose(bytes32 _projectID, bytes32 _proposeID, IProject _project, uint256 _eth, uint256 _sf, string _mixInfo) public;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="571" endline="573" pcid="144">
    function ln(uint256 _numerator, uint256 _denominator) public pure returns (uint256);
    
}
</source>
</class>

<class classid="30" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="384" endline="385" pcid="80">
	function getVotes(bytes32 _ID, bytes32 _vote) public view returns(uint256);
    function vote(bytes32 _ID, bytes32 _vote) public;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="593" endline="594" pcid="153">
    function getVotes(bytes32 _ID, bytes32 _vote) public view returns(uint256);
	function impl_vote(address _holder, bytes32 _ID, bytes32 _vote) public;
</source>
</class>

<class classid="31" nclones="14" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="387" endline="388" pcid="82">
	function forging(uint256 _msm) public;
    function purchase(bool _wantDividend, bool _nonInvate, bytes32 _channel, bytes32 _recommendation) public payable;
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="68" endline="69" pcid="4013">
     function mint(uint256 value) external;
     function free(uint256 value) external;
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="57" endline="58" pcid="4010">
    function mint(uint256 value) external;
    function burn(uint256 value) external;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="534" endline="536" pcid="122">
    function project2Mineral(uint256 _amount) public;
	
    function withdrawShares(uint256 _amount) public returns(bool atonce);
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="58" endline="59" pcid="4011">
    function burn(uint256 value) external;
    function balanceOf() external view returns (uint256 balance);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="1070" endline="1071" pcid="218">
	function dividend(uint256 _amount) public;
}
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="69" endline="70" pcid="4014">
     function free(uint256 value) external;
     function freeUpTo(uint256 value) external returns (uint256 freed);
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="56" endline="57" pcid="5750">
    function withdraw(uint256 wad) external;
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="522" endline="523" pcid="112">
	function saveToColdWallet(uint256 _amount) public;
    function restoreFromColdWallet() public payable;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="530" endline="531" pcid="118">
    function order2Shares(uint256 _amount) public;
    function mineral2Shares(uint256 _amount) public;
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="203" endline="204" pcid="1895">
    function burn(uint256 _value) public ;
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="533" endline="534" pcid="121">
    function project2Shares(uint256 _amount)public;
    function project2Mineral(uint256 _amount) public;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="531" endline="532" pcid="119">
    function mineral2Shares(uint256 _amount) public;
    function shares2Project(uint256 _amount)public;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="532" endline="533" pcid="120">
    function shares2Project(uint256 _amount)public;
    function project2Shares(uint256 _amount)public;
</source>
</class>

<class classid="32" nclones="7" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="389" endline="390" pcid="84">
    function cancelOrder(uint256 _mso) public returns(uint256 eth);
    function lock4Dividend(uint256 _msd2_ms) public returns(uint256 msd);
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="70" endline="71" pcid="4015">
     function freeUpTo(uint256 value) external returns (uint256 freed);
     function balanceOf(address owner) external view returns (uint256 balance);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="398" endline="399" pcid="91">
    function cancelRedeem(uint256 _ms2r_msr) public returns(uint256 ms);
    function redeem(uint256 msr) public returns(uint256 eth);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="397" endline="398" pcid="90">
    function apply4Redeem(uint256 _ms) public returns(uint256 ms2r);
    function cancelRedeem(uint256 _ms2r_msr) public returns(uint256 ms);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="391" endline="393" pcid="86">
    function unlock4Circulate(uint256 _msd) public returns(uint256 msd2);

    function transferMS(address _to, uint256 _ms) public returns (bool success);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="390" endline="391" pcid="85">
    function lock4Dividend(uint256 _msd2_ms) public returns(uint256 msd);
    function unlock4Circulate(uint256 _msd) public returns(uint256 msd2);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="399" endline="401" pcid="92">
    function redeem(uint256 msr) public returns(uint256 eth);
    
}
</source>
</class>

<class classid="33" nclones="90" nlines="4" similarity="75">
<source file="systems/smart_contracts/$martFund.sol" startline="447" endline="454" pcid="96">
	function safeDiv(uint256 _x, uint256 _y)internal pure returns (uint256){
	    // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return _x / _y;
	}
	
	function ceilDiv(uint256 _x, uint256 _y)internal pure returns (uint256){
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="542" endline="546" pcid="2619">
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute
        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
    }
}
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="174" endline="184" pcid="3074">
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }

  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/WTA.sol" startline="50" endline="54" pcid="8043">
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="105" endline="109" pcid="2101">
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a >= b ? a : b;
  }

  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="538" endline="542" pcid="2618">
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    function average(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="534" endline="538" pcid="2617">
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    function min(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="33" endline="43" pcid="6675">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /*
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="109" endline="113" pcid="2102">
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a < b ? a : b;
  }

}
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="28" endline="38" pcid="6543">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/XGP.sol" startline="40" endline="50" pcid="8098">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/MBA.sol" startline="30" endline="40" pcid="4699">
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }

  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="26" endline="30" pcid="4642">
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return a / b;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="31" endline="41" pcid="6477">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="27" endline="37" pcid="1266">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="35" endline="45" pcid="1429">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="110" endline="114" pcid="6081">
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a < b ? a : b;
  }

}
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="106" endline="110" pcid="6080">
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a >= b ? a : b;
  }

  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="216" endline="231" pcid="5914">
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="181" endline="196" pcid="5912">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="127" endline="140" pcid="5909">
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/BRZE.sol" startline="36" endline="39" pcid="1522">
  function max256(uint256 a, uint256 b) internal pure returns (uint256) {
    return a >= b ? a : b;
  }
  function min256(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/BRZE.sol" startline="39" endline="43" pcid="1523">
  function min256(uint256 a, uint256 b) internal pure returns (uint256) {
    return a < b ? a : b;
  }

}
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="84" endline="94" pcid="5752">
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    // assert(_b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = _a / _b;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
    return _a / _b;
  }

  /**
  * @dev Integer division of two numbers, rounding up and truncating the quotient
  */
  function divCeil(uint256 _a, uint256 _b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/LBBT.sol" startline="19" endline="23" pcid="4533">
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return a / b;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="102" endline="112" pcid="5513">
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    // assert(_b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = _a / _b;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
    return _a / _b;
  }

  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="52" endline="56" pcid="5486">
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a < b ? a : b;
  }

  function assert(bool assertion) internal {
</source>
<source file="systems/smart_contracts/DNP.sol" startline="43" endline="50" pcid="2785">
    function div(uint256 a, uint256 b) internal pure returns (uint256) 
    {
        return a  / b;
    }
    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) 
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="40" endline="44" pcid="1709">
    function max256(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    function min256(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="44" endline="47" pcid="1710">
    function min256(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }
}
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="48" endline="52" pcid="5485">
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a >= b ? a : b;
  }

  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="135" endline="150" pcid="5414">
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="100" endline="115" pcid="5412">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="199" endline="212" pcid="4989">
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="46" endline="59" pcid="5409">
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="89" endline="97" pcid="5335">
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="71" endline="79" pcid="5333">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="38" endline="46" pcid="5330">
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/LuckyStrikeTokens.sol" startline="35" endline="45" pcid="4569">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="28" endline="38" pcid="2946">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/CoinDDC.sol" startline="196" endline="201" pcid="1874">
    function div(uint256 a, uint256 b) internal pure returns (uint256) 
    {
        return a / b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) 
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="16" endline="19" pcid="2873">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="39" endline="49" pcid="4294">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="51" endline="55" pcid="4835">
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a < b ? a : b;
  }

}
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="47" endline="51" pcid="4834">
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a >= b ? a : b;
  }

  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="538" endline="542" pcid="2710">
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute
        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
    }
}
</source>
<source file="systems/smart_contracts/customIcoToken.sol" startline="19" endline="23" pcid="2209">
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return a / b;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="28" endline="38" pcid="7221">
    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
        // assert(_b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = _a / _b;
        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
        return _a / _b;
    }

    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="454" endline="457" pcid="97">
	function ceilDiv(uint256 _x, uint256 _y)internal pure returns (uint256){
		return (_x + _y - 1) / _y;
	}
}
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="24" endline="34" pcid="3513">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="159" endline="169" pcid="7347">
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }

  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="34" endline="44" pcid="7404">
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }

  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="87" endline="95" pcid="7777">
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="530" endline="534" pcid="2708">
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    function min(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="534" endline="538" pcid="2709">
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    function average(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="27" endline="37" pcid="4951">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="288" endline="303" pcid="4994">
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="36" endline="44" pcid="7772">
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="69" endline="77" pcid="7775">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="40" endline="50" pcid="441">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/CouncilVesting.sol" startline="42" endline="46" pcid="2023">
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a >= b ? a : b;
  }

  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="16" endline="19" pcid="8007">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/WTA.sol" startline="15" endline="19" pcid="8038">
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="253" endline="268" pcid="4992">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/CouncilVesting.sol" startline="46" endline="49" pcid="2024">
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
    return a < b ? a : b;
  }
}
</source>
<source file="systems/smart_contracts/WTA.sol" startline="37" endline="41" pcid="8041">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="76" endline="80" pcid="2047">
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="98" endline="102" pcid="6078">
  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a >= b ? a : b;
  }

  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="39" endline="43" pcid="4832">
  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a >= b ? a : b;
  }

  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="97" endline="101" pcid="2099">
  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a >= b ? a : b;
  }

  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="40" endline="44" pcid="5483">
  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a >= b ? a : b;
  }

  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
</source>
<source file="systems/smart_contracts/CouncilVesting.sol" startline="34" endline="38" pcid="2021">
  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a >= b ? a : b;
  }

  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="32" endline="36" pcid="1707">
    function max64(uint64 a, uint64 b) internal pure returns (uint64) {
        return a >= b ? a : b;
    }

    function min64(uint64 a, uint64 b) internal pure returns (uint64) {
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="44" endline="48" pcid="5484">
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a < b ? a : b;
  }

  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="36" endline="40" pcid="1708">
    function min64(uint64 a, uint64 b) internal pure returns (uint64) {
        return a < b ? a : b;
    }

    function max256(uint256 a, uint256 b) internal pure returns (uint256) {
</source>
<source file="systems/smart_contracts/CouncilVesting.sol" startline="38" endline="42" pcid="2022">
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a < b ? a : b;
  }

  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="102" endline="106" pcid="6079">
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a < b ? a : b;
  }

  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="43" endline="47" pcid="4833">
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a < b ? a : b;
  }

  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="515" endline="522" pcid="4824">
    function min(uint a, uint b) pure internal returns (uint) {
        return a < b ? a : b;
    }

    /// @notice The fallback function: If the contract's controller has not been
    ///  set to 0, then the `proxyPayment` method is called which relays the
    ///  ether and creates tokens as described in the token controller contract
    function () external payable {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="101" endline="105" pcid="2100">
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
    return a < b ? a : b;
  }

  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="852" endline="855" pcid="3405">
    function min(uint a, uint b) private pure returns (uint) {
        return a < b ? a : b;
    }
}
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="283" endline="299" pcid="6837">
    function divideDecimalRound(uint x, uint y)
        internal
        pure
        returns (uint)
    {
        return _divideDecimalRound(x, y, UNIT);
    }

    /**
     * @return The result of safely dividing x and y. The return value is as a rounded
     * high precision decimal.
     *
     * @dev y is divided after the product of x and the high precision unit
     * is evaluated, so the product of x and the high precision unit must
     * be less than 2**256. The result is rounded to the nearest increment.
     */
    function divideDecimalRoundPrecise(uint x, uint y)
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="299" endline="310" pcid="6838">
    function divideDecimalRoundPrecise(uint x, uint y)
        internal
        pure
        returns (uint)
    {
        return _divideDecimalRound(x, y, PRECISE_UNIT);
    }

    /**
     * @dev Convert a standard decimal representation to a high precision one.
     */
    function decimalToPreciseDecimal(uint i)
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="207" endline="227" pcid="6833">
    function multiplyDecimalRoundPrecise(uint x, uint y)
        internal
        pure
        returns (uint)
    {
        return _multiplyDecimalRound(x, y, PRECISE_UNIT);
    }

    /**
     * @return The result of safely multiplying x and y, interpreting the operands
     * as fixed-point decimals of a standard unit.
     *
     * @dev The operands should be in the standard unit factor which will be
     * divided out after the product of x and y is evaluated, so that product must be
     * less than 2**256.
     *
     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.
     * Rounding is useful when you need to retain fidelity for small decimal numbers
     * (eg. small fractions or percentages).
     */
    function multiplyDecimalRound(uint x, uint y)
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="244" endline="261" pcid="6835">
    function divideDecimal(uint x, uint y)
        internal
        pure
        returns (uint)
    {
        /* Reintroduce the UNIT factor that will be divided out by y. */
        return x.mul(UNIT).div(y);
    }

    /**
     * @return The result of safely dividing x and y. The return value is as a rounded
     * decimal in the precision unit specified in the parameter.
     *
     * @dev y is divided after the product of x and the specified precision unit
     * is evaluated, so the product of x and the specified precision unit must
     * be less than 2**256. The result is rounded to the nearest increment.
     */
    function _divideDecimalRound(uint x, uint y, uint precisionUnit)
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="227" endline="244" pcid="6834">
    function multiplyDecimalRound(uint x, uint y)
        internal
        pure
        returns (uint)
    {
        return _multiplyDecimalRound(x, y, UNIT);
    }

    /**
     * @return The result of safely dividing x and y. The return value is a high
     * precision decimal.
     * 
     * @dev y is divided after the product of x and the standard precision unit
     * is evaluated, so the product of x and UNIT must be less than 2**256. As
     * this is an integer division, the result is always rounded down.
     * This helps save on gas. Rounding is more expensive on gas.
     */
    function divideDecimal(uint x, uint y)
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="159" endline="180" pcid="6831">
    function multiplyDecimal(uint x, uint y)
        internal
        pure
        returns (uint)
    {
        /* Divide by UNIT to remove the extra factor introduced by the product. */
        return x.mul(y) / UNIT;
    }

    /**
     * @return The result of safely multiplying x and y, interpreting the operands
     * as fixed-point decimals of the specified precision unit.
     *
     * @dev The operands should be in the form of a the specified unit factor which will be
     * divided out after the product of x and y is evaluated, so that product must be
     * less than 2**256.
     *
     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.
     * Rounding is useful when you need to retain fidelity for small decimal numbers
     * (eg. small fractions or percentages).
     */
    function _multiplyDecimalRound(uint x, uint y, uint precisionUnit)
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1101" endline="1118" pcid="3127">
  function transferLand(
    uint256 estateId,
    uint256 landId,
    address destinatary
  )
    external
    canTransfer(estateId)
  {
    return _transferLand(estateId, landId, destinatary);
  }

  /**
   * @notice Transfer many tokens owned by an Estate to a new owner
   * @param estateId Current owner of the token
   * @param landIds LANDs to be transfered
   * @param destinatary New owner
   */
  function transferManyLands(
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1587" endline="1603" pcid="6876">
    function updateRates(bytes4[] currencyKeys, uint[] newRates, uint timeSent)
        external
        onlyOracle
        returns(bool)
    {
        return internalUpdateRates(currencyKeys, newRates, timeSent);
    }

    /**
     * @notice Internal function which sets the rates stored in this contract
     * @param currencyKeys The currency keys you wish to update the rates for (in order)
     * @param newRates The rates for each currency (in order)
     * @param timeSent The timestamp of when the update was sent, specified in seconds since epoch (e.g. the same as the now keyword in solidity).contract
     *                 This is useful because transactions can take a while to confirm, so this way we know how old the oracle's datapoint was exactly even
     *                 if it takes a long time for the transaction to confirm.
     */
    function internalUpdateRates(bytes4[] currencyKeys, uint[] newRates, uint timeSent)
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="863" endline="871" pcid="6637">
	function purchaseCallbackOnAccept(
		uint256 groupNumber, address[] memory addresses, uint256[] memory weiAmounts)
	public onlyManyOwnersOrOracle(keccak256(msg.data)) returns(bool success) {
		return accept(groupNumber, addresses, weiAmounts);
	}

	// Base function for accepts.
	// Calling functions should be multisig.
	function accept(
</source>
</class>

<class classid="34" nclones="7" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="523" endline="525" pcid="113">
    function restoreFromColdWallet() public payable;

    function depositShares() public payable;
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="368" endline="369" pcid="7371">
    function splitFunds() public payable;
    function splitStarFunds() public;
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="55" endline="56" pcid="5749">
    function deposit() external payable;
    function withdraw(uint256 wad) external;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="528" endline="530" pcid="117">
    function depositProject() public payable;
    
    function order2Shares(uint256 _amount) public;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="525" endline="526" pcid="114">
    function depositShares() public payable;
    function depositOrder() public payable;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="526" endline="527" pcid="115">
    function depositOrder() public payable;
    function depositMineral() public payable;
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="527" endline="528" pcid="116">
    function depositMineral() public payable;
    function depositProject() public payable;
</source>
</class>

<class classid="35" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="536" endline="537" pcid="123">
    function withdrawShares(uint256 _amount) public returns(bool atonce);
    function withdrawSharesTo(address _to, uint256 _amount) public returns(bool atonce);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="540" endline="541" pcid="127">
    function withdrawMineral(uint256 _amount) public returns(bool atonce);
    function withdrawMineralTo(address _to, uint256 _amount) public returns(bool atonce);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="542" endline="543" pcid="129">
    function withdrawProject(uint256 _amount)public returns(bool atonce);
    function withdrawProjectTo(address _to, uint256 _amount)public returns(bool atonce);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="538" endline="539" pcid="125">
    function withdrawOrder(uint256 _amount) public returns(bool atonce);
    function withdrawOrderTo(address _to, uint256 _amount) public returns(bool atonce);
</source>
</class>

<class classid="36" nclones="3" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="559" endline="561" pcid="137">
    function calcEma(uint256 _emaPre, uint256 _value, uint32 _timeSpan, uint256 _period) public view returns(uint256);
    //function calcFactorReward(uint256 _dailyYield) public view returns(uint256);
	function calcFactorMining(uint256 _roi) public view returns(uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="567" endline="569" pcid="141">
    function calculateRedeemReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _sellAmount) public constant returns (uint256);
	
    function power(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) public view returns (uint256, uint8);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="566" endline="567" pcid="140">
    function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) public constant returns (uint256);
    function calculateRedeemReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _sellAmount) public constant returns (uint256);
</source>
</class>

<class classid="37" nclones="5" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="561" endline="563" pcid="138">
	function calcFactorMining(uint256 _roi) public view returns(uint256);
    
	function calcOrderTo$fAmount(uint256) public view returns(uint256);
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="91" endline="92" pcid="3068">
  function tokenByIndex(uint256 _index) public view returns (uint256);
}
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="102" endline="103" pcid="3071">
  function tokenURI(uint256 _tokenId) public view returns (string);
}
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="677" endline="688" pcid="5711">
  function readData(uint256 tokenId) external view returns (bytes32);

  /**
   * @dev Updates the data of a specified token. Writes `newData` into storage
   * of `tokenId`.
   *
   * @param tokenId The token to write data to.
   * @param newData The data to be written to the token.
   *
   * Emits a `DataUpdated` event.
   */
  function writeData(uint256 tokenId, bytes32 newData) external;
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="924" endline="925" pcid="5042">
    function tokenByIndex(uint256 index) public view returns (uint256);
}
</source>
</class>

<class classid="38" nclones="6" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="563" endline="566" pcid="139">
	function calcOrderTo$fAmount(uint256) public view returns(uint256);
	//function calc$martFundAmount(uint256 _amount, uint256 _factorRestrain) public view returns(uint256);

    function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) public constant returns (uint256);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="122" endline="123" pcid="6436">
    function getFPAddressByIndex(uint256) external view returns (address);
    function withdraw(address) external;
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="119" endline="120" pcid="6433">
    function getDeployerAddressByIndex(uint256) external view returns (address);
    function getATAddressByIndex(uint256) external view returns (address);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="120" endline="121" pcid="6434">
    function getATAddressByIndex(uint256) external view returns (address);
    function getTAddressByIndex(uint256) external view returns (address);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="121" endline="122" pcid="6435">
    function getTAddressByIndex(uint256) external view returns (address);
    function getFPAddressByIndex(uint256) external view returns (address);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="252" endline="253" pcid="862">
    function getFPAddressByIndex(uint256) external view returns (address);
    function getFactoryContext() external view returns (address, address, uint);
</source>
</class>

<class classid="39" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="569" endline="570" pcid="142">
    function power(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) public view returns (uint256, uint8);
    function power2(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) public view returns (uint256, uint8);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="570" endline="571" pcid="143">
    function power2(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) public view returns (uint256, uint8);
    function ln(uint256 _numerator, uint256 _denominator) public pure returns (uint256);
</source>
</class>

<class classid="40" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="587" endline="588" pcid="148">
    function dequeueOrder(uint256 gaslimit, bool force) public returns(uint256 dealt);
    function dequeueIngot(uint256 gaslimit, bool force) public returns(uint256 dealt);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="590" endline="591" pcid="151">
    function dequeueDouble(uint256 gaslimit, bool force) public returns(uint256 dealt);
    function dequeue(bytes32 _when) public returns(uint256 dealt);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="589" endline="590" pcid="150">
    function dequeueAlternately(uint256 gaslimit, bool force) public returns(uint256 dealt);
    function dequeueDouble(uint256 gaslimit, bool force) public returns(uint256 dealt);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="588" endline="589" pcid="149">
    function dequeueIngot(uint256 gaslimit, bool force) public returns(uint256 dealt);
    function dequeueAlternately(uint256 gaslimit, bool force) public returns(uint256 dealt);
</source>
</class>

<class classid="41" nclones="6" nlines="2" similarity="100">
<source file="systems/smart_contracts/$martFund.sol" startline="597" endline="598" pcid="157">
    function impl_cancelOrder(address _from, uint256 _msm) public returns(uint256 eth);
    function impl_lock4Dividend(address _from, uint256 _msd2_ms) public returns(uint256 msd);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="599" endline="601" pcid="159">
    function impl_unlock4Circulate(address _from, uint256 _msd) public returns(uint256 msd2);

    function impl_quotaApply4Redeem() view public returns(uint256);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="603" endline="604" pcid="162">
    function impl_cancelRedeem(address _from, uint256 _ms2r_msr) public returns(uint256 ms);
    function impl_redeem(address _from, uint256 msr) public returns(uint256 eth);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="604" endline="605" pcid="163">
    function impl_redeem(address _from, uint256 msr) public returns(uint256 eth);
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="598" endline="599" pcid="158">
    function impl_lock4Dividend(address _from, uint256 _msd2_ms) public returns(uint256 msd);
    function impl_unlock4Circulate(address _from, uint256 _msd) public returns(uint256 msd2);
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="602" endline="603" pcid="161">
    function impl_apply4Redeem(address _from, uint256 _ms) public returns(uint256 ms2r);
    function impl_cancelRedeem(address _from, uint256 _ms2r_msr) public returns(uint256 ms);
</source>
</class>

<class classid="42" nclones="10" nlines="4" similarity="75">
<source file="systems/smart_contracts/$martFund.sol" startline="639" endline="642" pcid="168">
    function setBAU(bytes32 _key, address _addr, uint256 _value) internal {
        data.setBAU(_key, _addr, _value);    
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="675" endline="678" pcid="174">
    function setBUU(bytes32 _key, uint256 _index, uint256 _value) internal {
        data.setBUU(_key, _index, _value);    
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="687" endline="690" pcid="176">
	function setBUA(bytes32 _key, uint256 _index, address _addr) internal {
        data.setBUA(_key, _index, _addr);        
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="699" endline="702" pcid="178">
	function setBUS(bytes32 _key, uint256 _index, string _str) internal {
        data.setBUS(_key, _index, _str);        
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="651" endline="654" pcid="170">
    function setBBU(bytes32 _key, bytes32 _id, uint256 _value) internal {
        data.setBBU(_key, _id, _value);    
    }
}
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="337" endline="340" pcid="5505">
  function transferFrom(address _from, address _to, uint _value) whenNotPaused {
    super.transferFrom(_from, _to, _value);
  }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="663" endline="666" pcid="172">
    function setBBS(bytes32 _key, bytes32 _id, string _value) internal {
        data.setBBS(_key, _id, _value);    
    }
}
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1194" endline="1198" pcid="6865">
    function emitTransfer(address from, address to, uint value) internal {
        proxy._emit(abi.encode(value), 3, TRANSFER_SIG, bytes32(from), bytes32(to), 0);
    }

    event Approval(address indexed owner, address indexed spender, uint value);
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="1200" endline="1204" pcid="6866">
    function emitApproval(address owner, address spender, uint value) internal {
        proxy._emit(abi.encode(value), 3, APPROVAL_SIG, bytes32(owner), bytes32(spender), 0);
    }

    event TokenStateUpdated(address newTokenState);
</source>
<source file="systems/smart_contracts/Controller.sol" startline="110" endline="113" pcid="2014">
    function logSweep(address from, address token, uint amount) public {
        emit LogSweep(from, token, amount);
    }
}
</source>
</class>

<class classid="43" nclones="22" nlines="4" similarity="75">
<source file="systems/smart_contracts/$martFund.sol" startline="705" endline="708" pcid="179">
	function getBAUU(bytes32 _key, address _addr, uint256 _index) internal view returns(uint256) {
        return data.bauu(_key, _addr, _index);        
    }
}
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="654" endline="658" pcid="4454">
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transferFrom(from, to, value);
    }

    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="465" endline="470" pcid="2124">
  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {
    // Call StandardToken.transferForm()
    return super.transferFrom(_from, _to, _value);
  }

}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="717" endline="720" pcid="181">
    function getBBAU(bytes32 _key, bytes32 _id, address _holder) internal view returns(uint256) {
        return data.bbau(_key, _id, _holder);
    }
}
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="631" endline="635" pcid="338">
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transferFrom(from, to, value);
    }

    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="318" endline="323" pcid="7766">
    function transferFrom(address _from, address _to, uint _value) validDestination(_to) returns (bool) 
    {
        return super.transferFrom(_from, _to, _value);
    }

    event Burn(address indexed _burner, uint _value);
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="272" endline="276" pcid="7760">
  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transferFrom(_from, _to, _value);
  }

  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="445" endline="449" pcid="7733">
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transferFrom(from, to, value);
    }

    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="532" endline="536" pcid="7201">
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transferFrom(from, to, value);
    }

    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="272" endline="276" pcid="776">
  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transferFrom(_from, _to, _value);
  }

  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="318" endline="323" pcid="782">
    function transferFrom(address _from, address _to, uint _value) validDestination(_to) returns (bool) 
    {
        return super.transferFrom(_from, _to, _value);
    }

    event Burn(address indexed _burner, uint _value);
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="498" endline="502" pcid="3585">
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transferFrom(from, to, value);
    }

    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2948" endline="2960" pcid="6939">
    function effectiveValue(bytes4 sourceCurrencyKey, uint sourceAmount, bytes4 destinationCurrencyKey)
        public
        view
        returns (uint)
    {
        return exchangeRates.effectiveValue(sourceCurrencyKey, sourceAmount, destinationCurrencyKey);
    }

    /**
     * @notice Total amount of synths issued by the system, priced in currencyKey
     * @param currencyKey The currency to value the synths in
     */
    function totalIssuedSynths(bytes4 currencyKey)
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="576" endline="580" pcid="6818">
    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {
        return super.transferFrom(_from, _to, _value);
    }

    event Burn(address indexed _burner, uint _value);
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="272" endline="276" pcid="6791">
  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transferFrom(_from, _to, _value);
  }

  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="445" endline="449" pcid="6746">
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transferFrom(from, to, value);
    }

    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/ScipayToken.sol" startline="28" endline="32" pcid="6377">
    function transferFrom(address _from, address _to, uint _amount) public returns(bool) {
        return super.transferFrom(_from, _to, _amount);
    }

    function mint(address _for, uint _amount) public onlyMintablePermission {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="516" endline="520" pcid="6352">
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transferFrom(from, to, value);
    }
    
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="1282" endline="1287" pcid="6150">
  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {
    // Call StandardToken.transferForm()
    return super.transferFrom(_from, _to, _value);
  }

}
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="476" endline="480" pcid="1396">
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transferFrom(from, to, value);
    }

    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="445" endline="449" pcid="2260">
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
        return super.transferFrom(from, to, value);
    }

    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
</source>
<source file="systems/smart_contracts/CDS.sol" startline="345" endline="357" pcid="1672">
  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  )
    public
    whenNotPaused
    returns (bool)
  {
    return super.transferFrom(_from, _to, _value);
  }

  function approve(
</source>
</class>

<class classid="44" nclones="2" nlines="4" similarity="75">
<source file="systems/smart_contracts/$martFund.sol" startline="711" endline="714" pcid="180">
	function setBAUU(bytes32 _key, address _addr, uint256 _index, uint256 _value) internal {
        data.setBAUU(_key, _addr, _index, _value);    
    }
}
</source>
<source file="systems/smart_contracts/$martFund.sol" startline="723" endline="726" pcid="182">
    function setBBAU(bytes32 _key, bytes32 _id, address _holder, uint256 _value) internal {
        data.setBBAU(_key, _id, _holder, _value);    
    }
}
</source>
</class>

<class classid="45" nclones="42" nlines="2" similarity="100">
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="62" endline="63" pcid="226">
    function balanceOf(address tokenOwner) public view returns(uint balance);
    function allowance(address tokenOwner, address spender) public view returns(uint remaining);
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="43" endline="44" pcid="1300">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="51" endline="52" pcid="1200">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="43" endline="44" pcid="1246">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="45" endline="46" pcid="399">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="48" endline="49" pcid="423">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="43" endline="44" pcid="1222">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="108" endline="110" pcid="258">
    function balanceOf(address tokenOwner) public constant returns (uint balance);

    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/BEX.sol" startline="9" endline="10" pcid="1160">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/DGC.sol" startline="50" endline="51" pcid="2516">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/CGT.sol" startline="50" endline="51" pcid="1686">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="10" endline="11" pcid="4476">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="51" endline="52" pcid="7834">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="51" endline="52" pcid="4515">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="48" endline="49" pcid="4199">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/GNB.sol" startline="33" endline="34" pcid="4122">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/againstTokenRegister.sol" startline="15" endline="16" pcid="370">
    function balanceOf(address tokenOwner) constant external returns (uint balance);
    function allowance(address _owner, address _spender) constant external returns (uint remaining); 
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="761" endline="762" pcid="4464">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="51" endline="52" pcid="707">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="33" endline="34" pcid="2423">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="51" endline="52" pcid="4783">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="37" endline="38" pcid="3946">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/JDC.sol" startline="31" endline="32" pcid="4335">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="51" endline="52" pcid="8132">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="47" endline="48" pcid="4357">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="9" endline="10" pcid="5212">
  function balanceOf(address tokenOwner) public view returns (uint balance);
  function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="29" endline="30" pcid="5548">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="50" endline="51" pcid="5610">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="51" endline="52" pcid="5639">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="34" endline="35" pcid="5805">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="46" endline="47" pcid="1954">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="36" endline="37" pcid="7878">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="50" endline="51" pcid="3601">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="54" endline="55" pcid="6248">
	function balanceOf(address tokenOwner) public view returns (uint balance);
	function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="50" endline="51" pcid="6272">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="43" endline="44" pcid="3411">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="46" endline="47" pcid="1976">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="36" endline="37" pcid="6578">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="31" endline="32" pcid="7429">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="40" endline="41" pcid="7547">
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/VENT.sol" startline="57" endline="58" pcid="7681">
        function balanceOf(address tokenOwner) public view returns (uint balance);
        function allowance(address tokenOwner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="36" endline="37" pcid="7856">
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
</source>
</class>

<class classid="46" nclones="44" nlines="2" similarity="100">
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="63" endline="64" pcid="227">
    function allowance(address tokenOwner, address spender) public view returns(uint remaining);
    function transfer(address to, uint tokens) public returns(bool success);
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="52" endline="53" pcid="1201">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="47" endline="48" pcid="1977">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="46" endline="47" pcid="400">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="52" endline="53" pcid="708">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/DGC.sol" startline="51" endline="52" pcid="2517">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/CGT.sol" startline="51" endline="52" pcid="1687">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/againstTokenRegister.sol" startline="16" endline="17" pcid="371">
    function allowance(address _owner, address _spender) constant external returns (uint remaining); 
}
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="44" endline="45" pcid="1301">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/JDC.sol" startline="32" endline="33" pcid="4336">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="762" endline="763" pcid="4465">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="11" endline="12" pcid="4477">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="52" endline="53" pcid="4516">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BEX.sol" startline="10" endline="11" pcid="1161">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="52" endline="53" pcid="4784">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="110" endline="112" pcid="259">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);

    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="38" endline="39" pcid="3947">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="10" endline="11" pcid="5213">
  function allowance(address tokenOwner, address spender) public view returns (uint remaining);
  function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="30" endline="31" pcid="5549">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="51" endline="52" pcid="5611">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="44" endline="45" pcid="1223">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="52" endline="53" pcid="5640">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/GNB.sol" startline="34" endline="35" pcid="4123">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="35" endline="36" pcid="5806">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="49" endline="50" pcid="4200">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="51" endline="52" pcid="3602">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="55" endline="56" pcid="6249">
	function allowance(address tokenOwner, address spender) public view returns (uint remaining);
	function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="51" endline="52" pcid="6273">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="44" endline="45" pcid="3412">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="49" endline="50" pcid="424">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="48" endline="49" pcid="4358">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="37" endline="38" pcid="6579">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="32" endline="33" pcid="7430">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="41" endline="42" pcid="7548">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/VENT.sol" startline="58" endline="59" pcid="7682">
        function allowance(address tokenOwner, address spender) public view returns (uint remaining);
        function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="34" endline="35" pcid="2424">
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="52" endline="53" pcid="7835">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="37" endline="38" pcid="7857">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="47" endline="48" pcid="1955">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="37" endline="38" pcid="7879">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="52" endline="53" pcid="8133">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="36" endline="37" pcid="8155">
    function allowance(address owner, address spender) public view returns (uint remaining);
    function transfer(address to, uint value) public returns (bool success);
</source>
<source file="systems/smart_contracts/EmpowCreateEosAccount.sol" startline="13" endline="14" pcid="2931">
    function allowance(address _owner, address _spender) external view returns (uint remaining);
    function decimals() external view returns(uint digits);
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="44" endline="45" pcid="1247">
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
</source>
</class>

<class classid="47" nclones="90" nlines="2" similarity="100">
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="64" endline="65" pcid="228">
    function transfer(address to, uint tokens) public returns(bool success);
    function approve(address spender, uint tokens) public returns(bool success);
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="53" endline="54" pcid="4785">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="46" endline="47" pcid="1303">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="54" endline="55" pcid="710">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="54" endline="55" pcid="4786">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="54" endline="55" pcid="4518">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="45" endline="46" pcid="1302">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="65" endline="66" pcid="229">
    function approve(address spender, uint tokens) public returns(bool success);
    function transferFrom(address from, address to, uint tokens) public returns(bool success);
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="53" endline="54" pcid="709">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/GoaToken.sol" startline="60" endline="61" pcid="4149">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="53" endline="54" pcid="4517">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/GoaToken.sol" startline="61" endline="62" pcid="4150">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="40" endline="41" pcid="3949">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="57" endline="58" pcid="6251">
	function approve(address spender, uint tokens) public returns (bool success);
	function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="49" endline="50" pcid="1979">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="35" endline="36" pcid="2425">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="39" endline="40" pcid="3948">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="50" endline="51" pcid="4201">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="11" endline="12" pcid="5214">
  function transfer(address to, uint tokens) public returns (bool success);
  function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/EmpowCreateEosAccount.sol" startline="12" endline="13" pcid="2930">
    function approve(address _spender, uint _value) external returns (bool success);
    function allowance(address _owner, address _spender) external view returns (uint remaining);
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="52" endline="53" pcid="6274">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="13" endline="14" pcid="4479">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="50" endline="51" pcid="425">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="48" endline="49" pcid="1956">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="48" endline="49" pcid="1978">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="53" endline="54" pcid="1202">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="54" endline="55" pcid="1203">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="38" endline="39" pcid="8157">
    function approve(address spender, uint value) public returns (bool success);
    function transferFrom(address from, address to, uint value) public returns (bool success);
</source>
<source file="systems/smart_contracts/BatchSendTokens.sol" startline="57" endline="58" pcid="1082">
    function transfer(address to, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="12" endline="13" pcid="4478">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="37" endline="38" pcid="8156">
    function transfer(address to, uint value) public returns (bool success);
    function approve(address spender, uint value) public returns (bool success);
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="51" endline="52" pcid="426">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="54" endline="55" pcid="8135">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="12" endline="13" pcid="5215">
  function approve(address spender, uint tokens) public returns (bool success);
  function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="46" endline="47" pcid="1249">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="764" endline="765" pcid="4467">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="48" endline="49" pcid="402">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="31" endline="32" pcid="5550">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="46" endline="47" pcid="1225">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/GNB.sol" startline="36" endline="37" pcid="4125">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="114" endline="116" pcid="261">
    function approve(address spender, uint tokens) public returns (bool success);

    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="45" endline="46" pcid="1224">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="53" endline="54" pcid="6275">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="763" endline="764" pcid="4466">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="32" endline="33" pcid="5551">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="56" endline="57" pcid="6250">
	function transfer(address to, uint tokens) public returns (bool success);
	function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/GNB.sol" startline="35" endline="36" pcid="4124">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="46" endline="47" pcid="3414">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="45" endline="46" pcid="3413">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="112" endline="114" pcid="260">
    function transfer(address to, uint tokens) public returns (bool success);

    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="52" endline="53" pcid="3603">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="49" endline="50" pcid="1957">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="38" endline="39" pcid="6580">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/CGT.sol" startline="53" endline="54" pcid="1689">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="51" endline="52" pcid="4202">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/CGT.sol" startline="52" endline="53" pcid="1688">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="47" endline="48" pcid="401">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="39" endline="40" pcid="6581">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BEX.sol" startline="12" endline="13" pcid="1163">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="52" endline="53" pcid="5612">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BEX.sol" startline="11" endline="12" pcid="1162">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="45" endline="46" pcid="1248">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/JDC.sol" startline="33" endline="34" pcid="4337">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="53" endline="54" pcid="5613">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="50" endline="51" pcid="4360">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="53" endline="54" pcid="8134">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="49" endline="50" pcid="4359">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/DGC.sol" startline="53" endline="54" pcid="2519">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="39" endline="40" pcid="7881">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="36" endline="37" pcid="2426">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="38" endline="39" pcid="7880">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="33" endline="34" pcid="7431">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="39" endline="40" pcid="7859">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="53" endline="54" pcid="5641">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="38" endline="39" pcid="7858">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/JDC.sol" startline="34" endline="35" pcid="4338">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="36" endline="37" pcid="5807">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="54" endline="55" pcid="7837">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="53" endline="54" pcid="7836">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/VENT.sol" startline="60" endline="61" pcid="7684">
        function approve(address spender, uint tokens) public returns (bool success);
        function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/EmpowCreateEosAccount.sol" startline="10" endline="11" pcid="2928">
    function transfer(address _to, uint _value) external returns (bool success);
    function transferFrom(address _from, address _to, uint _value) external returns (bool success);
</source>
<source file="systems/smart_contracts/VENT.sol" startline="59" endline="60" pcid="7683">
        function transfer(address to, uint tokens) public returns (bool success);
        function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="410" endline="411" pcid="7667">
    function transfer(address _to, uint _amount) external returns (bool success);
}
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="37" endline="38" pcid="5808">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="54" endline="55" pcid="5642">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="43" endline="44" pcid="7550">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="53" endline="54" pcid="3604">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/DGC.sol" startline="52" endline="53" pcid="2518">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="42" endline="43" pcid="7549">
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="34" endline="35" pcid="7432">
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
</source>
</class>

<class classid="48" nclones="45" nlines="2" similarity="100">
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="66" endline="67" pcid="230">
    function transferFrom(address from, address to, uint tokens) public returns(bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="47" endline="49" pcid="3415">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="40" endline="42" pcid="6582">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="50" endline="52" pcid="1958">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="54" endline="56" pcid="6276">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="35" endline="37" pcid="7433">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/DGC.sol" startline="54" endline="56" pcid="2520">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="44" endline="46" pcid="7551">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="58" endline="60" pcid="6252">
	function transferFrom(address from, address to, uint tokens) public returns (bool success);

	event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="52" endline="54" pcid="427">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="49" endline="51" pcid="403">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="50" endline="52" pcid="1980">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/VENT.sol" startline="61" endline="63" pcid="7685">
        function transferFrom(address from, address to, uint tokens) public returns (bool success);

        event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="55" endline="57" pcid="7838">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="40" endline="42" pcid="7860">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/BEX.sol" startline="13" endline="15" pcid="1164">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="40" endline="42" pcid="7882">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="37" endline="39" pcid="2427">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/BatchSendTokens.sol" startline="58" endline="59" pcid="1083">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
}
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="55" endline="57" pcid="711">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="55" endline="57" pcid="8136">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="47" endline="49" pcid="1304">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="39" endline="41" pcid="8158">
    function transferFrom(address from, address to, uint value) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/EmpowCreateEosAccount.sol" startline="11" endline="12" pcid="2929">
    function transferFrom(address _from, address _to, uint _value) external returns (bool success);
    function approve(address _spender, uint _value) external returns (bool success);
</source>
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="116" endline="119" pcid="262">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);


    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="47" endline="49" pcid="1226">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/GoaToken.sol" startline="62" endline="64" pcid="4151">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="47" endline="49" pcid="1250">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/Multisig.sol" startline="13" endline="15" pcid="5216">
  function transferFrom(address from, address to, uint tokens) public returns (bool success);

  event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="54" endline="56" pcid="3605">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/CGT.sol" startline="54" endline="56" pcid="1690">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/GNB.sol" startline="37" endline="38" pcid="4126">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    function checkRate(uint unlockIndex) public constant returns (uint rate_);
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="38" endline="40" pcid="5809">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="52" endline="54" pcid="4203">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/JDC.sol" startline="35" endline="37" pcid="4339">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="55" endline="57" pcid="5643">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="51" endline="53" pcid="4361">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="765" endline="767" pcid="4468">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="41" endline="43" pcid="3950">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="54" endline="56" pcid="5614">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/KingToken.sol" startline="14" endline="16" pcid="4480">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="55" endline="57" pcid="4519">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="55" endline="57" pcid="1204">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="33" endline="35" pcid="5552">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="55" endline="57" pcid="4787">
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
</class>

<class classid="49" nclones="14" nlines="2" similarity="100">
<source file="systems/smart_contracts/_0xSatoshi.sol" startline="80" endline="82" pcid="231">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;

}
</source>
<source file="systems/smart_contracts/DemoBigPoint4.sol" startline="46" endline="47" pcid="2428">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/DGC.sol" startline="67" endline="68" pcid="2521">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/AHLE.sol" startline="62" endline="63" pcid="404">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/FixedSupplyToken.sol" startline="67" endline="68" pcid="3606">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/CGT.sol" startline="67" endline="68" pcid="1691">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/SAMPLE.sol" startline="71" endline="72" pcid="6253">
	function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/PRIT.sol" startline="51" endline="52" pcid="5810">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/SapientiaCharlesToken.sol" startline="67" endline="68" pcid="6277">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/UltraBlockCoin.sol" startline="52" endline="53" pcid="7552">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/Wolfs.sol" startline="11" endline="12" pcid="8033">
    function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;
	function onTokenTransfer(address from, uint256 amount, bytes memory data) public returns (bool success);
</source>
<source file="systems/smart_contracts/Mlgc.sol" startline="11" endline="12" pcid="4915">
    function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;
	function onTokenTransfer(address from, uint256 amount, bytes memory data) public returns (bool success);
</source>
<source file="systems/smart_contracts/GoaToken.sol" startline="73" endline="74" pcid="4152">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/AICRYPTO.sol" startline="65" endline="66" pcid="428">
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}
</source>
</class>

<class classid="50" nclones="40" nlines="2" similarity="100">
<source file="systems/smart_contracts/_DrSebiToken.sol" startline="139" endline="141" pcid="263">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;

}
</source>
<source file="systems/smart_contracts/JUNDCOIN.sol" startline="64" endline="65" pcid="4362">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/BIBCOINID.sol" startline="68" endline="69" pcid="1205">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/RanchChain.sol" startline="7" endline="7" pcid="5975">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
</source>
<source file="systems/smart_contracts/JDC.sol" startline="44" endline="45" pcid="4340">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/Rabbit.sol" startline="6" endline="6" pcid="5939">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
</source>
<source file="systems/smart_contracts/Perlin.sol" startline="68" endline="69" pcid="5644">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/PAYCASH.sol" startline="67" endline="68" pcid="5615">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/OSManagerToken.sol" startline="40" endline="41" pcid="5553">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/Exzie.sol" startline="55" endline="56" pcid="3416">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/SolaToken.sol" startline="53" endline="54" pcid="6583">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/Melodic.sol" startline="68" endline="69" pcid="4788">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/MyAdvancedToken.sol" startline="24" endline="24" pcid="5261">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="113" endline="114" pcid="4388">
    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; 
}
</source>
<source file="systems/smart_contracts/BitDigit.sol" startline="55" endline="56" pcid="1251">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/FUNNYTOKEN.sol" startline="48" endline="49" pcid="3951">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/ThpToken.sol" startline="28" endline="28" pcid="7157">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }
</source>
<source file="systems/smart_contracts/CLCTokenERC20.sol" startline="7" endline="7" pcid="1736">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }
</source>
<source file="systems/smart_contracts/DDPC.sol" startline="6" endline="6" pcid="2375">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
</source>
<source file="systems/smart_contracts/ContractCoffeeToken.sol" startline="63" endline="64" pcid="1981">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/TokenERC20.sol" startline="7" endline="7" pcid="7302">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }
</source>
<source file="systems/smart_contracts/Contracts.sol" startline="7" endline="7" pcid="1993">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="76" endline="82" pcid="4805">
    function receiveApproval(
        address from,
        uint256 _amount,
        address _token,
        bytes _data
    ) public;
}
</source>
<source file="systems/smart_contracts/TournamentGameToken.sol" startline="48" endline="49" pcid="7434">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/GNB.sol" startline="57" endline="58" pcid="4128">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/Bitrix.sol" startline="55" endline="56" pcid="1305">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/UTRAToken.sol" startline="7" endline="7" pcid="7598">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }
</source>
<source file="systems/smart_contracts/GRAM.sol" startline="65" endline="66" pcid="4204">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/BitcoinDigital.sol" startline="55" endline="56" pcid="1227">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="71" endline="72" pcid="7623">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/VOTENOmodumtokenswapdotcom.sol" startline="68" endline="69" pcid="7839">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/ICBB.sol" startline="28" endline="28" pcid="4264">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata_extraData) external; }
</source>
<source file="systems/smart_contracts/LanceToken.sol" startline="68" endline="69" pcid="4520">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/WanCoinSupplyToken.sol" startline="53" endline="54" pcid="7861">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/WanCoinToken.sol" startline="53" endline="54" pcid="7883">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/XTRLPAY.sol" startline="68" endline="69" pcid="8137">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/AnxToken.sol" startline="67" endline="68" pcid="712">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/ContractCargoberToken.sol" startline="63" endline="64" pcid="1959">
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="112" endline="113" pcid="1634">
    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; 
}
</source>
<source file="systems/smart_contracts/byzbit.sol" startline="11" endline="11" pcid="1592">
interface tokenRecepient { function recieveApproval (address _from, uint256 _value, address _token, bytes _extradata) external;	}
</source>
</class>

<class classid="51" nclones="12" nlines="2" similarity="100">
<source file="systems/smart_contracts/AACD.sol" startline="47" endline="49" pcid="294">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="74" endline="76" pcid="1717">
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/MT.sol" startline="47" endline="49" pcid="5076">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/NEM.sol" startline="47" endline="49" pcid="5324">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/NMAI.sol" startline="47" endline="49" pcid="5446">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/AzurToken.sol" startline="48" endline="50" pcid="1004">
  function allowance(address _owner, address _spender) public view returns (uint256 remaining);

  event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="17" endline="18" pcid="1541">
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/CAC.sol" startline="47" endline="49" pcid="1615">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/SAS.sol" startline="47" endline="48" pcid="6297">
  function allowance(address _owner, address _spender)public view returns (uint256 remaining);
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/BACD.sol" startline="64" endline="65" pcid="1019">
  function allowance(address _owner, address _spender) public view returns (uint256 remaining);
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="55" endline="56" pcid="7619">
    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);
    function transfer(address to, uint256 tokens) public returns (bool success);
</source>
<source file="systems/smart_contracts/DHF.sol" startline="47" endline="49" pcid="2541">
    function allowance(address _owner, address _spender)public view returns (uint256 remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
</class>

<class classid="52" nclones="265" nlines="2" similarity="100">
<source file="systems/smart_contracts/ABCToken.sol" startline="29" endline="38" pcid="301">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="130" endline="131" pcid="1419">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="15" endline="17" pcid="2299">
  function transfer(address to, uint256 value) external returns (bool);

  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="11" endline="12" pcid="2147">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="11" endline="12" pcid="2640">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="15" endline="16" pcid="2389">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="189" endline="191" pcid="576">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="15" endline="16" pcid="757">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="12" endline="13" pcid="2641">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="17" endline="19" pcid="2300">
  function approve(address spender, uint256 value) external returns (bool);

  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BDAM.sol" startline="97" endline="98" pcid="1115">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="31" endline="40" pcid="517">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="73" endline="74" pcid="447">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="25" endline="28" pcid="728">
  function approve(address spender, uint256 value)
    external returns (bool);

  function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="191" endline="193" pcid="577">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="31" endline="40" pcid="1746">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Byte.sol" startline="13" endline="14" pcid="1568">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="26" endline="27" pcid="760">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="134" endline="145" pcid="2462">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="16" endline="17" pcid="2390">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="60" endline="61" pcid="1272">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="56" endline="67" pcid="519">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/BDAM.sol" startline="175" endline="176" pcid="1124">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/BANG.sol" startline="16" endline="17" pcid="1039">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BountyBoard.sol" startline="116" endline="117" pcid="1493">
  function transfer(address to, uint256 value) public returns (bool);
  function allowance(address owner, address spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="15" endline="16" pcid="1462">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="144" endline="145" pcid="2105">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="15" endline="16" pcid="1407">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Byte.sol" startline="14" endline="15" pcid="1569">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/CRYPTOMZ.sol" startline="86" endline="87" pcid="2179">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="68" endline="69" pcid="1435">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="56" endline="58" pcid="1712">
    function transfer(address to, uint256 value) public returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="23" endline="25" pcid="727">
  function transfer(address to, uint256 value) external returns (bool);

  function approve(address spender, uint256 value)
</source>
<source file="systems/smart_contracts/CRYPTOMZ.sol" startline="131" endline="132" pcid="2184">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="104" endline="106" pcid="1633">
    function approve(address spender, uint256 value) public returns (bool);

    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="12" endline="13" pcid="2148">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="62" endline="63" pcid="1433">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="56" endline="67" pcid="1748">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/BKN.sol" startline="17" endline="18" pcid="1320">
    function transfer(address to, uint256 value) public returns (bool);
    function allowance(address owner, address spender) public constant returns (uint256);
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="67" endline="68" pcid="445">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/ankara.sol" startline="19" endline="21" pcid="675">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BountyBoard.sol" startline="119" endline="121" pcid="1496">
  function approve(address spender, uint256 value) public returns (bool);

  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="44" endline="45" pcid="2042">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Comet.sol" startline="12" endline="13" pcid="1916">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Comet.sol" startline="11" endline="12" pcid="1915">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="56" endline="67" pcid="479">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/BFGToken.sol" startline="56" endline="58" pcid="1186">
  function approve(address agent, uint256 value) public returns (bool);

}
</source>
<source file="systems/smart_contracts/ankara.sol" startline="21" endline="23" pcid="676">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="202" endline="203" pcid="1894">
    function approve(address spender, uint256 value) public returns (bool);
    function burn(uint256 _value) public ;
</source>
<source file="systems/smart_contracts/GoldenRings.sol" startline="45" endline="46" pcid="4171">
    function transfer(address to, uint256 value) public returns (bool);
    function allowance(address owner, address spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/GoldenRings.sol" startline="48" endline="50" pcid="4174">
    function approve(address spender, uint256 value) public returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="93" endline="95" pcid="4237">
  function transfer(address to, uint256 value) external returns (bool);

  function approve(address spender, uint256 value)
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="95" endline="98" pcid="4238">
  function approve(address spender, uint256 value)
  external returns (bool);

  function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="66" endline="67" pcid="4298">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="72" endline="73" pcid="4300">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="23" endline="26" pcid="2737">
  function approve(address spender, uint256 value)
    external returns (bool);

  function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="79" endline="80" pcid="4303">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/ITVR.sol" startline="18" endline="19" pcid="4324">
  function transfer(address _to, uint256 _value) public returns (bool);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="20" endline="23" pcid="4096">
  function approve(address spender, uint256 value)
    external returns (bool);

  function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="18" endline="20" pcid="4095">
  function transfer(address to, uint256 value) external returns (bool);

  function approve(address spender, uint256 value)
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="103" endline="104" pcid="4385">
    function transfer(address to, uint256 value) public returns (bool);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="105" endline="107" pcid="4387">
    function approve(address spender, uint256 value) public returns (bool);

    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="141" endline="150" pcid="4422">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="166" endline="177" pcid="4424">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/LBBT.sol" startline="42" endline="44" pcid="4538">
  function transfer(address to, uint256 value) public returns (bool);
  
  function allowance(address owner, address spender)
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="160" endline="171" pcid="4035">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="135" endline="144" pcid="4033">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/LBBT.sol" startline="47" endline="49" pcid="4540">
  function approve(address spender, uint256 value) public returns (bool);
  
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/LuckyAdvcedWoken.sol" startline="9" endline="11" pcid="4548">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="16" endline="18" pcid="1360">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/LuckyAdvcedWoken.sol" startline="11" endline="13" pcid="4549">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MAdvcedWoken.sol" startline="9" endline="11" pcid="4587">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MAdvcedWoken.sol" startline="11" endline="13" pcid="4588">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/magesh.sol" startline="75" endline="77" pcid="4612">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/magesh.sol" startline="77" endline="79" pcid="4613">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="75" endline="76" pcid="1438">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="196" endline="197" pcid="3999">
  function approve(address spender, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="193" endline="194" pcid="3996">
  function transfer(address to, uint256 value) public returns (bool);
  function allowance(address owner, address spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="10" endline="11" pcid="4640">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="76" endline="77" pcid="4650">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(
</source>
<source file="systems/smart_contracts/MBA.sol" startline="58" endline="59" pcid="4704">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/BANG.sol" startline="15" endline="16" pcid="1038">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MBA.sol" startline="109" endline="110" pcid="4710">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="439" endline="443" pcid="4760">
    function transfer(address _to, uint256 _value)
        external
        returns (bool);

    function transferFrom(address _from, address _to, uint256 _value)
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="447" endline="451" pcid="4762">
    function approve(address _spender, uint256 _value)
        external
        returns (bool);

    function totalSupply()
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="76" endline="78" pcid="3976">
    function transfer(address to, uint256 value) public returns (bool);

    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="67" endline="68" pcid="4837">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="336" endline="337" pcid="4857">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="75" endline="77" pcid="4924">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="77" endline="79" pcid="4925">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="54" endline="55" pcid="4955">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/DABANKING_SWAP.sol" startline="14" endline="16" pcid="2268">
    function approve(address spender, uint256 value) public returns (bool);

    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="14" endline="16" pcid="1359">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="60" endline="61" pcid="4957">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="12" endline="13" pcid="3916">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="80" endline="81" pcid="450">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="11" endline="12" pcid="3915">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="67" endline="68" pcid="4960">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="774" endline="775" pcid="3880">
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="773" endline="774" pcid="3879">
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="58" endline="59" pcid="5090">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="59" endline="60" pcid="5091">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="275" endline="284" pcid="5158">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="31" endline="40" pcid="644">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="300" endline="311" pcid="5160">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/MultiSendErc20.sol" startline="70" endline="71" pcid="5205">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/MultiSendErc20.sol" startline="76" endline="77" pcid="5208">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="285" endline="296" pcid="3808">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="260" endline="269" pcid="3806">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MultiSign.sol" startline="23" endline="24" pcid="5235">
  function transfer(address to, uint256 value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/NaorisToken.sol" startline="62" endline="63" pcid="5283">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/NaorisToken.sol" startline="117" endline="118" pcid="5289">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="15" endline="16" pcid="5297">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="146" endline="147" pcid="5309">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="150" endline="151" pcid="5345">
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="152" endline="153" pcid="5347">
    function approve(address spender, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="177" endline="186" pcid="5418">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="195" endline="196" pcid="1891">
    function transfer(address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="202" endline="213" pcid="5420">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/NSTTeamLock.sol" startline="12" endline="14" pcid="5451">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="16" endline="17" pcid="1463">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/NSTTeamLock.sol" startline="14" endline="16" pcid="5452">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="15" endline="16" pcid="2549">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/PDataToSHFund.sol" startline="18" endline="19" pcid="5628">
  function transfer(address _to, uint256 _value) public returns (bool);
  function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="307" endline="309" pcid="5682">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="309" endline="311" pcid="5683">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/PokaToken.sol" startline="8" endline="10" pcid="5725">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/PokaToken.sol" startline="10" endline="12" pcid="5726">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/FMT.sol" startline="19" endline="20" pcid="3650">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/FMT.sol" startline="12" endline="13" pcid="3647">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="109" endline="118" pcid="2460">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="21" endline="22" pcid="5745">
  function transfer(address _to, uint256 _value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="36" endline="37" pcid="5748">
  function approve(address _spender, uint256 _value) public returns (bool);
  event Approval(
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="25" endline="34" pcid="5771">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="50" endline="61" pcid="5773">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="85" endline="87" pcid="5840">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value)
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="87" endline="90" pcid="5841">
    function approve(address spender, uint256 value)
    external returns (bool);

    function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/ABCToken.sol" startline="54" endline="65" pcid="303">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="31" endline="40" pcid="5904">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="56" endline="67" pcid="5906">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/RaffleTicket.sol" startline="159" endline="168" pcid="5956">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/RaffleTicket.sol" startline="184" endline="195" pcid="5958">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="17" endline="18" pcid="2092">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="13" endline="14" pcid="5987">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="14" endline="15" pcid="5988">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="109" endline="118" pcid="6019">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="134" endline="145" pcid="6021">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="17" endline="18" pcid="6069">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="257" endline="259" pcid="3568">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="255" endline="257" pcid="3567">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="331" endline="332" pcid="6097">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="102" endline="103" pcid="1631">
    function transfer(address to, uint256 value) public returns (bool);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/RETC.sol" startline="34" endline="35" pcid="6179">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/CNG.sol" startline="21" endline="24" pcid="1844">
  function approve(address spender, uint256 value)
    external returns (bool);

  function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/RETC.sol" startline="41" endline="42" pcid="6182">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="11" endline="12" pcid="6198">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="12" endline="13" pcid="6199">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="64" endline="65" pcid="3522">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="57" endline="58" pcid="3519">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="51" endline="52" pcid="3517">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/SBC.sol" startline="283" endline="285" pcid="6329">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/SBC.sol" startline="285" endline="287" pcid="6330">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="17" endline="19" pcid="6405">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="19" endline="21" pcid="6406">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="199" endline="200" pcid="3446">
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="198" endline="199" pcid="3445">
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/CNG.sol" startline="19" endline="21" pcid="1843">
  function transfer(address to, uint256 value) external returns (bool);

  function approve(address spender, uint256 value)
</source>
<source file="systems/smart_contracts/SellableToken.sol" startline="37" endline="38" pcid="6460">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/SellableToken.sol" startline="44" endline="45" pcid="6463">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="58" endline="59" pcid="6481">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="64" endline="65" pcid="6483">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="71" endline="72" pcid="6486">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="38" endline="39" pcid="6517">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="50" endline="51" pcid="6520">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="55" endline="56" pcid="6547">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="61" endline="62" pcid="6549">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="68" endline="69" pcid="6552">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="423" endline="424" pcid="6615">
	function transfer(address to, uint256 value) public returns (bool);
	event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="534" endline="535" pcid="6624">
	function approve(address spender, uint256 value) public returns (bool);
	event Approval(
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="60" endline="61" pcid="6679">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/BFGToken.sol" startline="45" endline="46" pcid="1183">
  function transfer(address to, uint256 value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="66" endline="67" pcid="6681">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="73" endline="74" pcid="6684">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="186" endline="188" pcid="6727">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value)
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="188" endline="191" pcid="6728">
    function approve(address spender, uint256 value)
    external returns (bool);

    function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/SuperMarket.sol" startline="8" endline="10" pcid="6753">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/SuperMarket.sol" startline="10" endline="12" pcid="6754">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/DABANKING_SWAP.sol" startline="12" endline="14" pcid="2267">
    function transfer(address to, uint256 value) public returns (bool);

    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="109" endline="110" pcid="6778">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="56" endline="67" pcid="646">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="188" endline="189" pcid="6784">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="77" endline="78" pcid="6981">
    function transfer(address to, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="79" endline="80" pcid="6983">
    function approve(address spender, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="34" endline="43" pcid="7013">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="59" endline="70" pcid="7015">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="55" endline="56" pcid="2045">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="202" endline="211" pcid="7179">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="227" endline="238" pcid="7181">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="68" endline="69" pcid="7227">
    function transfer(address _to, uint256 _value) public returns (bool);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="239" endline="241" pcid="7285">
  function transfer(address to, uint256 value) external returns (bool);

  function approve(address spender, uint256 value)
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="241" endline="244" pcid="7286">
  function approve(address spender, uint256 value)
    external returns (bool);

  function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/CST_TOKEN.sol" startline="12" endline="13" pcid="2196">
  function approve(address _spender, uint256 _value) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="11" endline="12" pcid="7313">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="12" endline="13" pcid="7314">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="278" endline="279" pcid="7356">
    function approve(address spender, uint256 value) public returns (bool);
    function totalSupply() public view returns (uint256);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="281" endline="283" pcid="7359">
    function transfer(address to, uint256 value) public returns (bool);

    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="287" endline="288" pcid="7360">
    function mint(address _to, uint256 _amount) public returns (bool);
    function owner() public view returns (address);
</source>
<source file="systems/smart_contracts/TokenSwap.sol" startline="148" endline="150" pcid="7395">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/TokenSwap.sol" startline="150" endline="152" pcid="7396">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="69" endline="70" pcid="7409">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="162" endline="163" pcid="7417">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="62" endline="63" pcid="7454">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="117" endline="118" pcid="7460">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/UGCoin.sol" startline="34" endline="35" pcid="7528">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/UGCoin.sol" startline="41" endline="42" pcid="7531">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="33" endline="34" pcid="3165">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="32" endline="33" pcid="3164">
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/UTC.sol" startline="65" endline="66" pcid="7577">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/UTC.sol" startline="125" endline="126" pcid="7583">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="28" endline="30" pcid="7635">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="30" endline="32" pcid="7636">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/BKN.sol" startline="20" endline="21" pcid="1323">
    function approve(address spender, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="31" endline="40" pcid="477">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="186" endline="188" pcid="7714">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value)
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="188" endline="191" pcid="7715">
    function approve(address spender, uint256 value)
    external returns (bool);

    function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="15" endline="16" pcid="7741">
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="26" endline="27" pcid="7744">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="192" endline="193" pcid="7789">
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="109" endline="118" pcid="947">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="194" endline="195" pcid="7791">
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="215" endline="216" pcid="7795">
    function transfer(address recipient, uint256 amount) external returns (bool);
    function mintWithAllocation(address account, uint256 amount, address allocationContract) external returns (bool);
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="136" endline="145" pcid="7902">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="161" endline="172" pcid="7904">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="32" endline="33" pcid="8011">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="38" endline="39" pcid="8013">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="45" endline="46" pcid="8016">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/WTA.sol" startline="63" endline="64" pcid="8047">
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/CST_TOKEN.sol" startline="10" endline="11" pcid="2194">
  function transfer(address _to, uint256 _value) external returns (bool);
  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="54" endline="55" pcid="1270">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/WTA.sol" startline="65" endline="66" pcid="8049">
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="14" endline="15" pcid="8070">
  function transfer(address to, uint256 value) public returns (bool);
  function allowance(address owner, address spender) public view returns (uint256);
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="17" endline="18" pcid="8073">
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/XGP.sol" startline="67" endline="68" pcid="8102">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/XGP.sol" startline="73" endline="74" pcid="8104">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/XGP.sol" startline="80" endline="81" pcid="8107">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="19" endline="21" pcid="3010">
    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="17" endline="19" pcid="3009">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="135" endline="144" pcid="8192">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="160" endline="171" pcid="8194">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="33" endline="42" pcid="8226">
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="58" endline="69" pcid="8228">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="68" endline="69" pcid="2955">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="61" endline="62" pcid="2952">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="55" endline="56" pcid="2950">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="188" endline="191" pcid="2242">
    function approve(address spender, uint256 value)
    external returns (bool);

    function transferFrom(address from, address to, uint256 value)
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="45" endline="46" pcid="2882">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="38" endline="39" pcid="2879">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="32" endline="33" pcid="2877">
    function transfer(address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="186" endline="188" pcid="2241">
    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value)
</source>
<source file="systems/smart_contracts/DNP.sol" startline="74" endline="75" pcid="2790">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/DNP.sol" startline="19" endline="20" pcid="2783">
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="16" endline="17" pcid="2550">
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="134" endline="145" pcid="949">
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="67" endline="68" pcid="1275">
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="21" endline="23" pcid="2736">
  function transfer(address to, uint256 value) external returns (bool);

  function approve(address spender, uint256 value)
</source>
</class>

<class classid="53" nclones="123" nlines="2" similarity="100">
<source file="systems/smart_contracts/ABCToken.sol" startline="65" endline="73" pcid="304">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/GoldenRings.sol" startline="47" endline="48" pcid="4173">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/HupayX.sol" startline="98" endline="101" pcid="4239">
  function transferFrom(address from, address to, uint256 value)
  external returns (bool);

  event Transfer(
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="78" endline="79" pcid="4302">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/GFNX.sol" startline="23" endline="26" pcid="4097">
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);

  event Transfer(
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="104" endline="105" pcid="4386">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/KGCMortage.sol" startline="177" endline="185" pcid="4425">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/GAToken.sol" startline="171" endline="179" pcid="4036">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/LuckyAdvcedWoken.sol" startline="13" endline="15" pcid="4550">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/MAdvcedWoken.sol" startline="13" endline="15" pcid="4589">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/magesh.sol" startline="79" endline="81" pcid="4614">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/GameGold.sol" startline="195" endline="196" pcid="3998">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MainToken.sol" startline="73" endline="76" pcid="4649">
  function transferFrom(address from, address to, uint256 value)
    public returns (bool);

  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MBA.sol" startline="106" endline="109" pcid="4709">
  function transferFrom(address from, address to, uint256 value)
    public returns (bool);

  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="443" endline="447" pcid="4761">
    function transferFrom(address _from, address _to, uint256 _value)
        external
        returns (bool);

    function approve(address _spender, uint256 _value)
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="78" endline="80" pcid="3977">
    function transferFrom(address from, address to, uint256 value) public returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="335" endline="336" pcid="4856">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/MockOracle.sol" startline="79" endline="81" pcid="4926">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/Fuelcoin.sol" startline="13" endline="15" pcid="3917">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="66" endline="67" pcid="4959">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="775" endline="776" pcid="3881">
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/MULTIFOMO.sol" startline="60" endline="62" pcid="5092">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="311" endline="319" pcid="5161">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/MultiSendErc20.sol" startline="75" endline="76" pcid="5207">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="296" endline="304" pcid="3809">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/NaorisToken.sol" startline="116" endline="117" pcid="5288">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/NBToken.sol" startline="145" endline="146" pcid="5308">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="151" endline="152" pcid="5346">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
</source>
<source file="systems/smart_contracts/NibiruGovernanceToken.sol" startline="213" endline="221" pcid="5421">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/NSTTeamLock.sol" startline="16" endline="18" pcid="5453">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="311" endline="313" pcid="5684">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/PokaToken.sol" startline="12" endline="14" pcid="5727">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/FMT.sol" startline="18" endline="19" pcid="3649">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/PositionTokenV2.sol" startline="33" endline="36" pcid="5747">
  function transferFrom(address _from, address _to, uint256 _value)
    public returns (bool);

  function approve(address _spender, uint256 _value) public returns (bool);
</source>
<source file="systems/smart_contracts/PPLL.sol" startline="61" endline="69" pcid="5774">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="90" endline="93" pcid="5842">
    function transferFrom(address from, address to, uint256 value)
    external returns (bool);

    event Transfer(
</source>
<source file="systems/smart_contracts/QTChain.sol" startline="67" endline="75" pcid="5907">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/RaffleTicket.sol" startline="195" endline="203" pcid="5959">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/RDTv1.sol" startline="15" endline="17" pcid="5989">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/ReferralTracker.sol" startline="145" endline="153" pcid="6022">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Faireum.sol" startline="259" endline="261" pcid="3569">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="330" endline="331" pcid="6096">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/RETC.sol" startline="40" endline="41" pcid="6181">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ROCKEX.sol" startline="13" endline="15" pcid="6200">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="63" endline="64" pcid="3521">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SBC.sol" startline="287" endline="289" pcid="6331">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="21" endline="23" pcid="6407">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="200" endline="201" pcid="3447">
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
</source>
<source file="systems/smart_contracts/SellableToken.sol" startline="43" endline="44" pcid="6462">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="70" endline="71" pcid="6485">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SistContract.sol" startline="49" endline="50" pcid="6519">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="67" endline="68" pcid="6551">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/SparksterTokenSwap.sol" startline="532" endline="534" pcid="6623">
	function transferFrom(address from, address to, uint256 value) public returns (bool);

	function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="72" endline="73" pcid="6683">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/STPCToken.sol" startline="191" endline="194" pcid="6729">
    function transferFrom(address from, address to, uint256 value)
    external returns (bool);

    event Transfer(
</source>
<source file="systems/smart_contracts/SuperMarket.sol" startline="12" endline="14" pcid="6755">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/SuperPointsToken.sol" startline="187" endline="188" pcid="6783">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="78" endline="79" pcid="6982">
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="70" endline="78" pcid="7016">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/TigerCash.sol" startline="238" endline="246" pcid="7182">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/TimeLockedTokenStorage.sol" startline="69" endline="70" pcid="7228">
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
}
</source>
<source file="systems/smart_contracts/Byte.sol" startline="15" endline="17" pcid="1570">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="244" endline="247" pcid="7287">
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);

  event Transfer(
</source>
<source file="systems/smart_contracts/Tokeniso.sol" startline="13" endline="15" pcid="7315">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/TokenSale.sol" startline="277" endline="278" pcid="7355">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BOMBv3.sol" startline="17" endline="19" pcid="1464">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/TokenSwap.sol" startline="152" endline="154" pcid="7397">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/TorexToken.sol" startline="159" endline="162" pcid="7416">
  function transferFrom(address from, address to, uint256 value)
    public returns (bool);

  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="116" endline="117" pcid="7459">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/UGCoin.sol" startline="40" endline="41" pcid="7530">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ESTATERO.sol" startline="34" endline="36" pcid="3166">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/UTC.sol" startline="124" endline="125" pcid="7582">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/VantaToken.sol" startline="32" endline="34" pcid="7637">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/VictorToken.sol" startline="191" endline="194" pcid="7716">
    function transferFrom(address from, address to, uint256 value)
    external returns (bool);

    event Transfer(
</source>
<source file="systems/smart_contracts/VisionBitcoinCash.sol" startline="25" endline="26" pcid="7743">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="195" endline="197" pcid="7792">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="172" endline="180" pcid="7905">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/WizardCashCoin.sol" startline="44" endline="45" pcid="8015">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/WTA.sol" startline="66" endline="67" pcid="8050">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/XCToken.sol" startline="16" endline="17" pcid="8072">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/XGP.sol" startline="79" endline="80" pcid="8106">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ERC20TOKEN.sol" startline="21" endline="23" pcid="3011">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/YottaBytes.sol" startline="171" endline="179" pcid="8195">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/ZPayToken.sol" startline="69" endline="77" pcid="8229">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="67" endline="68" pcid="2954">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/CustomToken.sol" startline="191" endline="194" pcid="2243">
    function transferFrom(address from, address to, uint256 value)
    external returns (bool);

    event Transfer(
</source>
<source file="systems/smart_contracts/EducationLibra.sol" startline="44" endline="45" pcid="2881">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DNP.sol" startline="73" endline="74" pcid="2789">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BountyBoard.sol" startline="118" endline="119" pcid="1495">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="193" endline="195" pcid="578">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/Comet.sol" startline="13" endline="15" pcid="1917">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/CrowdsaleTokenExt.sol" startline="143" endline="144" pcid="2104">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BKN.sol" startline="19" endline="20" pcid="1322">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="17" endline="19" pcid="2551">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/ankara.sol" startline="23" endline="25" pcid="677">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/CRUSH.sol" startline="13" endline="15" pcid="2149">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="67" endline="75" pcid="520">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/BDAM.sol" startline="174" endline="175" pcid="1123">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="103" endline="104" pcid="1632">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BlockPoolToken.sol" startline="129" endline="130" pcid="1418">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/AronCoin.sol" startline="25" endline="26" pcid="759">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="67" endline="75" pcid="1749">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/CST_TOKEN.sol" startline="11" endline="12" pcid="2195">
  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);
  function approve(address _spender, uint256 _value) external returns (bool);
</source>
<source file="systems/smart_contracts/DAITOKEN.sol" startline="19" endline="21" pcid="2301">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="74" endline="75" pcid="1437">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="66" endline="67" pcid="1274">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DABANKING_SWAP.sol" startline="16" endline="18" pcid="2269">
    function transferFrom(address from, address to, uint256 value) public returns (bool);

    function balanceOf(address who) public view returns (uint256);
</source>
<source file="systems/smart_contracts/CRYPTOMZ.sol" startline="130" endline="131" pcid="2183">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="13" endline="15" pcid="2642">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AoraCoin.sol" startline="28" endline="31" pcid="729">
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);

  event Transfer(
</source>
<source file="systems/smart_contracts/BFGToken.sol" startline="55" endline="56" pcid="1185">
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address agent, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Deflacoin.sol" startline="17" endline="19" pcid="2391">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/DepositRegistry.sol" startline="145" endline="153" pcid="2463">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/Crowdsale.sol" startline="52" endline="55" pcid="2044">
    function transferFrom(address from, address to, uint256 value)
        public returns (bool);

    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/BANG.sol" startline="17" endline="19" pcid="1040">
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="201" endline="202" pcid="1893">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/Aigopay.sol" startline="79" endline="80" pcid="449">
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
</source>
<source file="systems/smart_contracts/AMAToken.sol" startline="67" endline="75" pcid="647">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/CNG.sol" startline="24" endline="27" pcid="1845">
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);

  event Transfer(
</source>
<source file="systems/smart_contracts/BlockbidLiquidity.sol" startline="18" endline="20" pcid="1361">
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function totalSupply() external view returns (uint256);
</source>
<source file="systems/smart_contracts/Authorization.sol" startline="145" endline="153" pcid="950">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="67" endline="75" pcid="480">
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/DigitalBitsToken.sol" startline="26" endline="29" pcid="2738">
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);

  event Transfer(
</source>
</class>

<class classid="54" nclones="5" nlines="2" similarity="100">
<source file="systems/smart_contracts/againstTokenRegister.sol" startline="10" endline="11" pcid="365">
    function name() external returns (string);
	function symbol() external returns (string);
</source>
<source file="systems/smart_contracts/againstTokenRegister.sol" startline="12" endline="13" pcid="367">
	function decimals() external returns (uint8);
    function transfer(address receiver, uint amount) external;
</source>
<source file="systems/smart_contracts/againstTokenRegister.sol" startline="11" endline="12" pcid="366">
	function symbol() external returns (string);
	function decimals() external returns (uint8);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="111" endline="121" pcid="2336">
    function unlock() external returns (bool);


    /**
     * Issues `_value` new tokens to `_to`
     *
     * @param _to The address to which the tokens will be issued
     * @param _value The amount of new tokens to issue
     * @return Whether the tokens where sucessfully issued or not
     */
    function issue(address _to, uint _value) external returns (bool);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="103" endline="111" pcid="2335">
    function lock() external returns (bool);


    /**
     * Unlocks the token so that the transfering of value is enabled 
     *
     * @return Whether the unlocking was successful or not
     */
    function unlock() external returns (bool);
</source>
</class>

<class classid="55" nclones="5" nlines="2" similarity="100">
<source file="systems/smart_contracts/againstTokenRegister.sol" startline="13" endline="14" pcid="368">
    function transfer(address receiver, uint amount) external;
	function transferFrom(address from, address to, uint value) external;
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="944" endline="945" pcid="6131">
  function assignTokens(address receiver, uint tokenAmount) private;
}
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="949" endline="950" pcid="4891">
  function assignTokens(address receiver, uint tokenAmount) private;
}
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2682" endline="2683" pcid="6932">
    function appendVestingEntry(address account, uint quantity) public;
}
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="154" endline="155" pcid="2339">
    function notifyTokensReceived(address _from, uint _value) external;
}
</source>
</class>

<class classid="56" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/againstTokenRegister.sol" startline="14" endline="15" pcid="369">
	function transferFrom(address from, address to, uint value) external;
    function balanceOf(address tokenOwner) constant external returns (uint balance);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="191" endline="192" pcid="2341">
    function onTokensReceived(address _token, address _from, uint _value) internal;
}
</source>
</class>

<class classid="57" nclones="2" nlines="4" similarity="75">
<source file="systems/smart_contracts/againstTokenRegister.sol" startline="141" endline="153" pcid="380">
    function getOrders(address _base, address _pair, uint _orderIndex) public view returns (uint _orderId,
                                                                                            address _owner,
                                                                                            uint _rate,
                                                                                            uint _amount,
                                                                                            bool _sell) {
       return (tokens[_base].markets[_pair].orders[_orderIndex].orderId,
               tokens[_base].markets[_pair].orders[_orderIndex].orderOwner,
               tokens[_base].markets[_pair].orders[_orderIndex].rate,
               tokens[_base].markets[_pair].orders[_orderIndex].amount,
               tokens[_base].markets[_pair].orders[_orderIndex].sell);
    }

    function getDones(address _base, address _pair, uint _doneIndex) public view returns (uint _orderId,
</source>
<source file="systems/smart_contracts/againstTokenRegister.sol" startline="153" endline="165" pcid="381">
    function getDones(address _base, address _pair, uint _doneIndex) public view returns (uint _orderId,
                                                                                          address _fillOwner,
                                                                                          uint _fillAmount,
                                                                                          uint _fillDate,
                                                                                          uint _rate) {
       return (tokens[_base].markets[_pair].dones[_doneIndex].orderId,
               tokens[_base].markets[_pair].dones[_doneIndex].fillOwner,
               tokens[_base].markets[_pair].dones[_doneIndex].fillAmount,
               tokens[_base].markets[_pair].dones[_doneIndex].fillDate,
               tokens[_base].markets[_pair].dones[_doneIndex].rate);
    }	

	function changeOwner(address _newOwner) public {
</source>
</class>

<class classid="58" nclones="11" nlines="4" similarity="100">
<source file="systems/smart_contracts/Aigopay.sol" startline="176" endline="180" pcid="457">
    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/XGP.sol" startline="176" endline="180" pcid="8114">
    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/EnergiPlus.sol" startline="173" endline="177" pcid="2961">
    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
        for (uint i = 0; i < _addresses.length; i++) Distribute(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/Fair7Token.sol" startline="169" endline="173" pcid="3528">
    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
        for (uint i = 0; i < _addresses.length; i++) Distribute(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/ILLUSION.sol" startline="184" endline="188" pcid="4309">
    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
        for (uint i = 0; i < _addresses.length; i++) Distribute(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/MonereumNetwork.sol" startline="158" endline="162" pcid="4966">
    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/BoleToken.sol" startline="180" endline="184" pcid="1444">
    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
        for (uint i = 0; i < _addresses.length; i++) Distribute(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/bitforedex.sol" startline="164" endline="168" pcid="1282">
    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/ShekzCoin.sol" startline="177" endline="181" pcid="6492">
    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
        for (uint i = 0; i < _addresses.length; i++) Distribute(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/SmokeCoinV_2.sol" startline="173" endline="177" pcid="6558">
    function DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external {        
        for (uint i = 0; i < _addresses.length; i++) Distribute(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
<source file="systems/smart_contracts/Stakeo.sol" startline="193" endline="197" pcid="6693">
    function transferTokenToMultiple(address[] _addresses, uint _amount) public onlyOwner {        
        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
    }

    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
</source>
</class>

<class classid="59" nclones="16" nlines="4" similarity="75">
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="238" endline="242" pcid="487">
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/MBA.sol" startline="175" endline="179" pcid="4714">
  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
    require(token.transfer(to, value));
  }

  function safeTransferFrom(
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="545" endline="549" pcid="7925">
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="218" endline="221" pcid="1898">
  function safeApprove(ERC20 token, address spender, uint256 value) internal {
    assert(token.approve(spender, value));
  }
}
</source>
<source file="systems/smart_contracts/SBC.sol" startline="80" endline="84" pcid="6308">
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        require(token.transfer(to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="210" endline="214" pcid="1896">
  function safeTransfer(ERC20 token, address to, uint256 value) internal {
    assert(token.transfer(to, value));
  }

  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="596" endline="600" pcid="1779">
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="93" endline="97" pcid="2561">
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="89" endline="93" pcid="2652">
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/MBA.sol" startline="190" endline="193" pcid="4716">
  function safeApprove(ERC20 token, address spender, uint256 value) internal {
    require(token.approve(spender, value));
  }
}
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="237" endline="241" pcid="527">
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="164" endline="168" pcid="4740">
    function safeTransfer(IERC20Token token, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20Token token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="289" endline="293" pcid="7294">
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        require(token.transfer(to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="215" endline="219" pcid="582">
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        require(token.transfer(to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="215" endline="218" pcid="7468">
    function safeApprove(ERC20 token, address spender, uint256 value) internal {
        assert(token.approve(spender, value));
    }
}
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="207" endline="211" pcid="7466">
    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
        assert(token.transfer(to, value));
    }

    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
</source>
</class>

<class classid="60" nclones="13" nlines="4" similarity="75">
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="242" endline="246" pcid="488">
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/DICCrowdsale.sol" startline="93" endline="97" pcid="2653">
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="219" endline="223" pcid="583">
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        require(token.transferFrom(from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="241" endline="245" pcid="528">
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/CMRPDCrowdsale.sol" startline="600" endline="604" pcid="1780">
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/CoinDumper.sol" startline="214" endline="218" pcid="1897">
  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
    assert(token.transferFrom(from, to, value));
  }

  function safeApprove(ERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="211" endline="215" pcid="7467">
    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
        assert(token.transferFrom(from, to, value));
    }

    function safeApprove(ERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="168" endline="172" pcid="4741">
    function safeTransferFrom(IERC20Token token, address from, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20Token token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/MBA.sol" startline="179" endline="190" pcid="4715">
  function safeTransferFrom(
    ERC20 token,
    address from,
    address to,
    uint256 value
  )
    internal
  {
    require(token.transferFrom(from, to, value));
  }

  function safeApprove(ERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/SBC.sol" startline="84" endline="88" pcid="6309">
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        require(token.transferFrom(from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/TokenBank.sol" startline="293" endline="297" pcid="7295">
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        require(token.transferFrom(from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/WantMarketplacesUtilityTokenCrowdsale.sol" startline="549" endline="553" pcid="7926">
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
</source>
<source file="systems/smart_contracts/DiamondChain.sol" startline="97" endline="101" pcid="2562">
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
</source>
</class>

<class classid="61" nclones="2" nlines="4" similarity="100">
<source file="systems/smart_contracts/AkropolisTimeLock.sol" startline="645" endline="654" pcid="507">
    function transferBeneficiaryShip(address[] memory newBeneficiaries) public {
        transferBeneficiaryShipWithHowMany(newBeneficiaries, newBeneficiaries.length);
    }

    /**
    * @dev Allows beneficiaries to change beneficiaryShip
    * @param newBeneficiaries defines array of addresses of new beneficiaries
    * @param newHowManyBeneficiariesDecide defines how many beneficiaries can decide
    */
    function transferBeneficiaryShipWithHowMany(address[] memory newBeneficiaries, uint256 newHowManyBeneficiariesDecide) public onlyManyBeneficiaries {
</source>
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="830" endline="839" pcid="559">
    function transferBeneficiaryShip(address[] memory newBeneficiaries) public {
        transferBeneficiaryShipWithHowMany(newBeneficiaries, newBeneficiaries.length);
    }

    /**
    * @dev Allows beneficiaries to change beneficiaryShip
    * @param newBeneficiaries defines array of addresses of new beneficiaries
    * @param newHowManyBeneficiariesDecide defines how many beneficiaries can decide
    */
    function transferBeneficiaryShipWithHowMany(address[] memory newBeneficiaries, uint256 newHowManyBeneficiariesDecide) public onlyManyBeneficiaries {
</source>
</class>

<class classid="62" nclones="2" nlines="4" similarity="75">
<source file="systems/smart_contracts/AkropolisTokenVesting.sol" startline="521" endline="529" pcid="547">
    function _releasableAmount(IERC20 token) private view returns (uint256) {
        return _vestedAmount(token).sub(_released[address(token)]);
    }

    /**
     * @dev Calculates the amount that has already vested.
     * @param token ERC20 token which is being vested
     */
    function _vestedAmount(IERC20 token) private view returns (uint256) {
</source>
<source file="systems/smart_contracts/TRT_Token.sol" startline="332" endline="340" pcid="7471">
    function releasableAmount(ERC20Basic token) public view returns (uint256) {
        return vestedAmount(token).sub(released[token]);
    }

    /**
     * @dev Calculates the amount that has already vested.
     * @param token ERC20 token which is being vested
     */
    function vestedAmount(ERC20Basic token) public view returns (uint256) {
</source>
</class>

<class classid="63" nclones="6" nlines="2" similarity="100">
<source file="systems/smart_contracts/ALBToken.sol" startline="567" endline="569" pcid="610">
    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata data) external;
    
}
</source>
<source file="systems/smart_contracts/BRZE.sol" startline="66" endline="67" pcid="1525">
  function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; 
}
</source>
<source file="systems/smart_contracts/GEF.sol" startline="8" endline="9" pcid="4059">
    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; 
}
</source>
<source file="systems/smart_contracts/GBE.sol" startline="8" endline="9" pcid="4053">
    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; 
}
</source>
<source file="systems/smart_contracts/TAIHUITOKEN.sol" startline="9" endline="9" pcid="6967">
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
</source>
<source file="systems/smart_contracts/ETGTOKEN.sol" startline="8" endline="9" pcid="3190">
    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; 
}
</source>
</class>

<class classid="64" nclones="2" nlines="4" similarity="75">
<source file="systems/smart_contracts/ALBToken.sol" startline="702" endline="706" pcid="619">
    function metaTransferHash(uint _nonce, address _to, uint _value, uint _reward) public view returns (bytes32) {
        return keccak256(abi.encodePacked(address(this), "metaTransfer", _nonce, _to, _value, _reward)); 
    }

    function metaApproveAndCallHash(uint _nonce, address _spender, uint _value, bytes memory _data, uint _reward) 
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="715" endline="719" pcid="622">
    function metaApproveHash(uint _nonce, address _spender, uint _value, uint _reward) public view returns (bytes32) {
        return keccak256(abi.encodePacked(address(this), "metaApprove", _nonce, _spender, _value, _reward)); 
    }

    function metaIncreaseAllowanceHash(uint _nonce, address _spender, uint256 _addedValue, uint _reward) public view returns (bytes32) {
</source>
</class>

<class classid="65" nclones="2" nlines="4" similarity="75">
<source file="systems/smart_contracts/ALBToken.sol" startline="719" endline="723" pcid="623">
    function metaIncreaseAllowanceHash(uint _nonce, address _spender, uint256 _addedValue, uint _reward) public view returns (bytes32) {
        return keccak256(abi.encodePacked(address(this), "metaIncreaseAllowance", _nonce, _spender, _addedValue, _reward));
    }

    function metaDecreaseAllowanceHash(uint _nonce, address _spender, uint256 _subtractedValue, uint _reward) public view returns (bytes32) {
</source>
<source file="systems/smart_contracts/ALBToken.sol" startline="723" endline="727" pcid="624">
    function metaDecreaseAllowanceHash(uint _nonce, address _spender, uint256 _subtractedValue, uint _reward) public view returns (bytes32) {
        return keccak256(abi.encodePacked(address(this), "metaDecreaseAllowance", _nonce, _spender, _subtractedValue, _reward));
    }
    
}
</source>
</class>

<class classid="66" nclones="2" nlines="4" similarity="75">
<source file="systems/smart_contracts/ALBToken.sol" startline="797" endline="801" pcid="630">
    function freezeTo(address _to, uint _amount, uint64 _until) public {
        _freezeTo(msg.sender, _to, _amount, _until);
    }

    function _freezeTo(address _from, address _to, uint _amount, uint64 _until) internal {
</source>
<source file="systems/smart_contracts/Discover.sol" startline="88" endline="101" pcid="2762">
    function createDApp(bytes32 _id, uint _amount, bytes32 _metadata) external {
        _createDApp(
            msg.sender,
            _id,
            _amount,
            _metadata);
    }

    /**
     * @dev Sends SNT directly to the contract, not the developer. This gets added to the DApp's balance, no curve required.
     * @param _id bytes32 unique identifier.
     * @param _amount of tokens to stake on DApp's ranking. Used for upvoting + staking more.
     */
    function upvote(bytes32 _id, uint _amount) external {
</source>
</class>

<class classid="67" nclones="6" nlines="4" similarity="75">
<source file="systems/smart_contracts/AT.sol" startline="146" endline="148" pcid="800">
	function() payable {
    }
}
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="167" endline="181" pcid="6438">
  function() external {
    revert("ETH not accepted!");
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Deposits, Withdrawals, Balances
  ////////////////////////////////////////////////////////////////////////////////


  /**
  * This function handles deposits of Ether into the contract.
  * Emits a Deposit event.
  * Note: With the payable modifier, this function accepts Ether.
  */
  function deposit() public payable {
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="505" endline="519" pcid="6099">
  function() payable {
    throw;
  }

  /**
   * Make an investment.
   *
   * Crowdsale must be running for one to invest.
   * We must have not pressed the emergency brake.
   *
   * @param receiver The Ethereum address who receives the tokens
   * @param customerId (optional) UUID v4 to track the successful payments on the server side
   *
   */
  function investInternal(address receiver, uint128 customerId) stopInEmergency private {
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="109" endline="115" pcid="3370">
    function() external {
        throw;
    }

    //mapping (address => mapping (address => uint256)) public tokens; // mapping of token addresses to mapping of balances  // tokens[token][user]
    //mapping (address => mapping (address => uint256)) public reserve; // mapping of token addresses to mapping of reserved balances  // reserve[token][user]
    mapping (address => mapping (address => uint256)) public balances; // mapping of token addresses to mapping of balances and reserve (bitwise compressed) // balances[token][user]
</source>
<source file="systems/smart_contracts/MultiSigWallet.sol" startline="99" endline="112" pcid="5241">
    function()
        payable
    {
        if (msg.value > 0)
            Deposit(msg.sender, msg.value);
    }

    /*
     * Public functions
     */
    /// @dev Contract constructor sets initial owners and required number of confirmations.
    /// @param _owners List of initial owners.
    /// @param _required Number of required confirmations.
    function MultiSigWallet(address[] _owners, uint _required)
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="510" endline="524" pcid="4859">
  function() payable {
    throw;
  }

  /**
   * Make an investment.
   *
   * Crowdsale must be running for one to invest.
   * We must have not pressed the emergency brake.
   *
   * @param receiver The Ethereum address who receives the tokens
   * @param customerId (optional) UUID v4 to track the successful payments on the server side
   *
   */
  function investInternal(address receiver, uint128 customerId) stopInEmergency private {
</source>
</class>

<class classid="68" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="193" endline="194" pcid="811">
    function setFFPAddresses(address, address) external;
    function setMinterAddress(address) external returns(address);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="494" endline="495" pcid="7040">
    function setFFPAddresses(address, address) external;
    function setMinterAddress(address) external returns(address);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="208" endline="209" pcid="3449">
    function setFFPAddresses(address, address) external;
    function setMinterAddress(address) external returns(address);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="193" endline="194" pcid="3766">
    function setFFPAddresses(address, address) external;
    function setMinterAddress(address) external returns(address);
</source>
</class>

<class classid="69" nclones="8" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="194" endline="195" pcid="812">
    function setMinterAddress(address) external returns(address);
    function getMinterAddress() external view returns(address);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="498" endline="500" pcid="7044">
    function setWalletOnTopAddress(address) external returns(address);

    function addWLManagers(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="495" endline="496" pcid="7041">
    function setMinterAddress(address) external returns(address);
    function getMinterAddress() external view returns(address);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="209" endline="210" pcid="3450">
    function setMinterAddress(address) external returns(address);
    function getMinterAddress() external view returns(address);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="212" endline="214" pcid="3453">
    function setWalletOnTopAddress(address) external returns(address);

    function addWLManagers(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="194" endline="195" pcid="3767">
    function setMinterAddress(address) external returns(address);
    function getMinterAddress() external view returns(address);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="197" endline="199" pcid="3770">
    function setWalletOnTopAddress(address) external returns(address);

    function addWLManagers(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="197" endline="199" pcid="815">
    function setWalletOnTopAddress(address) external returns(address);

    function addWLManagers(address) external;
</source>
</class>

<class classid="70" nclones="46" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="201" endline="202" pcid="818">
    function isWLManager(address) external view returns (bool);
    function addWLOperators(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="205" endline="206" pcid="822">
    function isWLOperator(address) external view returns (bool);
    function renounceWLOperators() external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="547" endline="548" pcid="7085">
    function getImportedContractRate(address) external view returns (uint256);
    function setImportedContract(address, uint256) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="546" endline="547" pcid="7084">
    function isImportedContract(address) external view returns (bool);
    function getImportedContractRate(address) external view returns (uint256);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="529" endline="530" pcid="7071">
    function getMaxWLAmount(address) external view returns(uint256);
    function getWLLength() external view returns(uint256);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="527" endline="528" pcid="7069">
    function isWhitelisted(address) external view returns(bool);
    function getWLThresholdBalance() external view returns (uint256);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="243" endline="244" pcid="853">
    function isFactoryDeployer(address) external view returns(bool);
    function isFactoryATGenerated(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="244" endline="245" pcid="854">
    function isFactoryATGenerated(address) external view returns(bool);
    function isFactoryTGenerated(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="524" endline="525" pcid="7067">
    function isFundsUnlockerOperator(address) external view returns (bool);
    function renounceFundsUnlockerOperators() external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="246" endline="247" pcid="856">
    function isFactoryFPGenerated(address) external view returns(bool);
    function getTotalDeployer() external view returns(uint256);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="520" endline="521" pcid="7063">
    function isFundsUnlockerManager(address) external view returns (bool);
    function addFundsUnlockerOperators(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="515" endline="516" pcid="7059">
    function isFundingOperator(address) external view returns (bool);
    function renounceFundingOperators() external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="228" endline="229" pcid="842">
    function getMaxWLAmount(address) external view returns(uint256);
    function getWLLength() external view returns(uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="745" endline="746" pcid="3855">
    function isMemberInserted(address) external view returns(bool);
    function addMemberToSet(address, uint8, string calldata, bytes32) external returns (bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="511" endline="512" pcid="7055">
    function isFundingManager(address) external view returns (bool);
    function addFundingOperators(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="547" endline="548" pcid="3830">
    function getImportedContractRate(address) external view returns (uint256);
    function setImportedContract(address, uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="546" endline="547" pcid="3829">
    function isImportedContract(address) external view returns (bool);
    function getImportedContractRate(address) external view returns (uint256);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="245" endline="246" pcid="855">
    function isFactoryTGenerated(address) external view returns(bool);
    function isFactoryFPGenerated(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="226" endline="227" pcid="840">
    function isWhitelisted(address) external view returns(bool);
    function getWLThresholdBalance() external view returns (uint256);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="223" endline="224" pcid="838">
    function isFundsUnlockerOperator(address) external view returns (bool);
    function renounceFundsUnlockerOperators() external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="506" endline="507" pcid="7051">
    function isWLOperator(address) external view returns (bool);
    function renounceWLOperators() external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="502" endline="503" pcid="7047">
    function isWLManager(address) external view returns (bool);
    function addWLOperators(address) external;
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="113" endline="114" pcid="6427">
    function isFactoryFPGenerated(address) external view returns(bool);
    function getTotalDeployer() external view returns(uint256);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="112" endline="113" pcid="6426">
    function isFactoryTGenerated(address) external view returns(bool);
    function isFactoryFPGenerated(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="111" endline="112" pcid="6425">
    function isFactoryATGenerated(address) external view returns(bool);
    function isFactoryTGenerated(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="110" endline="111" pcid="6424">
    function isFactoryDeployer(address) external view returns(bool);
    function isFactoryATGenerated(address) external view returns(bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="228" endline="229" pcid="3797">
    function getMaxWLAmount(address) external view returns(uint256);
    function getWLLength() external view returns(uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="226" endline="227" pcid="3795">
    function isWhitelisted(address) external view returns(bool);
    function getWLThresholdBalance() external view returns (uint256);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="216" endline="217" pcid="3456">
    function isWLManager(address) external view returns (bool);
    function addWLOperators(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="223" endline="224" pcid="3793">
    function isFundsUnlockerOperator(address) external view returns (bool);
    function renounceFundsUnlockerOperators() external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="219" endline="220" pcid="834">
    function isFundsUnlockerManager(address) external view returns (bool);
    function addFundsUnlockerOperators(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="220" endline="221" pcid="3460">
    function isWLOperator(address) external view returns (bool);
    function renounceWLOperators() external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="225" endline="226" pcid="3464">
    function isFundingManager(address) external view returns (bool);
    function addFundingOperators(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="229" endline="230" pcid="3468">
    function isFundingOperator(address) external view returns (bool);
    function renounceFundingOperators() external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="219" endline="220" pcid="3789">
    function isFundsUnlockerManager(address) external view returns (bool);
    function addFundsUnlockerOperators(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="214" endline="215" pcid="3785">
    function isFundingOperator(address) external view returns (bool);
    function renounceFundingOperators() external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="234" endline="235" pcid="3472">
    function isFundsUnlockerManager(address) external view returns (bool);
    function addFundsUnlockerOperators(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="210" endline="211" pcid="3781">
    function isFundingManager(address) external view returns (bool);
    function addFundingOperators(address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="238" endline="239" pcid="3476">
    function isFundsUnlockerOperator(address) external view returns (bool);
    function renounceFundsUnlockerOperators() external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="259" endline="260" pcid="865">
    function isMemberInserted(address) external view returns(bool);
    function addMemberToSet(address, uint8, string calldata, bytes32) external returns (bool);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="210" endline="211" pcid="826">
    function isFundingManager(address) external view returns (bool);
    function addFundingOperators(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="205" endline="206" pcid="3777">
    function isWLOperator(address) external view returns (bool);
    function renounceWLOperators() external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="241" endline="242" pcid="3478">
    function isWhitelisted(address) external view returns(bool);
    function getWLThresholdBalance() external view returns (uint256);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="243" endline="244" pcid="3480">
    function getMaxWLAmount(address) external view returns(uint256);
    function getWLLength() external view returns(uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="201" endline="202" pcid="3773">
    function isWLManager(address) external view returns (bool);
    function addWLOperators(address) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="214" endline="215" pcid="830">
    function isFundingOperator(address) external view returns (bool);
    function renounceFundingOperators() external;
</source>
</class>

<class classid="71" nclones="11" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="230" endline="231" pcid="844">
    function setNewThreshold(uint256) external;
    function changeMaxWLAmount(address, uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="760" endline="761" pcid="3870">
    function holderSendSeeds(uint256) external;
    function unlockFunds(address, uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="753" endline="754" pcid="3863">
    function changeTokenExchangeOnTopRate(uint256) external;
    function getOwnerData() external view returns (string memory, bytes32);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="752" endline="753" pcid="3862">
    function changeTokenExchangeRate(uint256) external;
    function changeTokenExchangeOnTopRate(uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="230" endline="231" pcid="3799">
    function setNewThreshold(uint256) external;
    function changeMaxWLAmount(address, uint256) external;
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="106" endline="107" pcid="6420">
    function changeDeployFees (uint256) external;
    function changeFeesCollector (address) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="245" endline="246" pcid="3482">
    function setNewThreshold(uint256) external;
    function changeMaxWLAmount(address, uint256) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="531" endline="532" pcid="7073">
    function setNewThreshold(uint256) external;
    function changeMaxWLAmount(address, uint256) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="266" endline="267" pcid="872">
    function changeTokenExchangeRate(uint256) external;
    function changeTokenExchangeOnTopRate(uint256) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="267" endline="268" pcid="873">
    function changeTokenExchangeOnTopRate(uint256) external;
    function getOwnerData() external view returns (string memory, bytes32);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="274" endline="275" pcid="880">
    function holderSendSeeds(uint256) external;
    function unlockFunds(address, uint256) external;
</source>
</class>

<class classid="72" nclones="20" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="231" endline="232" pcid="845">
    function changeMaxWLAmount(address, uint256) external;
    function addToWhitelist(address, uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="763" endline="764" pcid="3873">
    function importOtherTokens(address, uint256) external;
}
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="762" endline="763" pcid="3872">
    function burnTokensForMember(address, uint256) external;
    function importOtherTokens(address, uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="761" endline="762" pcid="3871">
    function unlockFunds(address, uint256) external;
    function burnTokensForMember(address, uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="548" endline="549" pcid="3831">
    function setImportedContract(address, uint256) external;
    function checkTransferAllowed (address, address, uint256) external view returns (byte);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="234" endline="235" pcid="3803">
    function removeFromWhitelist(address, uint256) external;
}
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="232" endline="233" pcid="3801">
    function addToWhitelist(address, uint256) external;
    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="231" endline="232" pcid="3800">
    function changeMaxWLAmount(address, uint256) external;
    function addToWhitelist(address, uint256) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="249" endline="250" pcid="3486">
    function removeFromWhitelist(address, uint256) external;
}
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="275" endline="276" pcid="881">
    function unlockFunds(address, uint256) external;
    function burnTokensForMember(address, uint256) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="247" endline="248" pcid="3484">
    function addToWhitelist(address, uint256) external;
    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="246" endline="247" pcid="3483">
    function changeMaxWLAmount(address, uint256) external;
    function addToWhitelist(address, uint256) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="532" endline="533" pcid="7074">
    function changeMaxWLAmount(address, uint256) external;
    function addToWhitelist(address, uint256) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="533" endline="534" pcid="7075">
    function addToWhitelist(address, uint256) external;
    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="535" endline="536" pcid="7077">
    function removeFromWhitelist(address, uint256) external;
}
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="548" endline="549" pcid="7086">
    function setImportedContract(address, uint256) external;
    function checkTransferAllowed (address, address, uint256) external view returns (byte);
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="234" endline="235" pcid="848">
    function removeFromWhitelist(address, uint256) external;
}
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="277" endline="278" pcid="883">
    function importOtherTokens(address, uint256) external;
}
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="276" endline="277" pcid="882">
    function burnTokensForMember(address, uint256) external;
    function importOtherTokens(address, uint256) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="232" endline="233" pcid="846">
    function addToWhitelist(address, uint256) external;
    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);
</source>
</class>

<class classid="73" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="233" endline="234" pcid="847">
    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);
    function removeFromWhitelist(address, uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="233" endline="234" pcid="3802">
    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);
    function removeFromWhitelist(address, uint256) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="248" endline="249" pcid="3485">
    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);
    function removeFromWhitelist(address, uint256) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="534" endline="535" pcid="7076">
    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);
    function removeFromWhitelist(address, uint256) external;
</source>
</class>

<class classid="74" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="251" endline="252" pcid="861">
    function getContractsByIndex(uint256) external view returns (address, address, address, address);
    function getFPAddressByIndex(uint256) external view returns (address);
</source>
<source file="systems/smart_contracts/SeedDex.sol" startline="118" endline="119" pcid="6432">
    function getContractsByIndex(uint256) external view returns (address, address, address, address);
    function getDeployerAddressByIndex(uint256) external view returns (address);
</source>
</class>

<class classid="75" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="260" endline="261" pcid="866">
    function addMemberToSet(address, uint8, string calldata, bytes32) external returns (bool);
    function enableMember(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="746" endline="747" pcid="3856">
    function addMemberToSet(address, uint8, string calldata, bytes32) external returns (bool);
    function enableMember(address) external;
</source>
</class>

<class classid="76" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="265" endline="266" pcid="871">
    function changeMemberData(address, string calldata, bytes32) external;
    function changeTokenExchangeRate(uint256) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="751" endline="752" pcid="3861">
    function changeMemberData(address, string calldata, bytes32) external;
    function changeTokenExchangeRate(uint256) external;
</source>
</class>

<class classid="77" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="268" endline="269" pcid="874">
    function getOwnerData() external view returns (string memory, bytes32);
    function setOwnerData(string calldata, bytes32) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="754" endline="755" pcid="3864">
    function getOwnerData() external view returns (string memory, bytes32);
    function setOwnerData(string calldata, bytes32) external;
</source>
</class>

<class classid="78" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="269" endline="270" pcid="875">
    function setOwnerData(string calldata, bytes32) external;
    function getMembersNumber() external view returns (uint);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="755" endline="756" pcid="3865">
    function setOwnerData(string calldata, bytes32) external;
    function getMembersNumber() external view returns (uint);
</source>
</class>

<class classid="79" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="271" endline="272" pcid="877">
    function getMemberAddressByIndex(uint8) external view returns (address);
    function getMemberDataByAddress(address _memberWallet) external view returns (bool, uint8, string memory, bytes32, uint256, uint, uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="757" endline="758" pcid="3867">
    function getMemberAddressByIndex(uint8) external view returns (address);
    function getMemberDataByAddress(address _memberWallet) external view returns (bool, uint8, string memory, bytes32, uint256, uint, uint256);
</source>
</class>

<class classid="80" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="272" endline="273" pcid="878">
    function getMemberDataByAddress(address _memberWallet) external view returns (bool, uint8, string memory, bytes32, uint256, uint, uint256);
    function setNewSeedMaxSupply(uint256) external returns (uint256);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="758" endline="759" pcid="3868">
    function getMemberDataByAddress(address _memberWallet) external view returns (bool, uint8, string memory, bytes32, uint256, uint, uint256);
    function setNewSeedMaxSupply(uint256) external returns (uint256);
</source>
</class>

<class classid="81" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/ATDeployer.sol" startline="273" endline="274" pcid="879">
    function setNewSeedMaxSupply(uint256) external returns (uint256);
    function holderSendSeeds(uint256) external;
</source>
<source file="systems/smart_contracts/Factory.sol" startline="254" endline="255" pcid="3487">
    function newAdminTools(uint256) external returns(address);
    function setFactoryAddress(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="759" endline="760" pcid="3869">
    function setNewSeedMaxSupply(uint256) external returns (uint256);
    function holderSendSeeds(uint256) external;
</source>
<source file="systems/smart_contracts/ATDeployer.sol" startline="685" endline="686" pcid="934">
    function newAdminTools(uint256) external returns(address);
    function setFactoryAddress(address) external;
</source>
</class>

<class classid="82" nclones="12" nlines="2" similarity="100">
<source file="systems/smart_contracts/AzurToken.sol" startline="24" endline="30" pcid="1000">
  function balanceOf(address _owner) public view returns (uint256 balance);

  /// @notice send `_value` token to `_to` from `msg.sender`
  /// @param _to The address of the recipient
  /// @param _value The amount of token to be transferred
  /// @return Whether the transfer was successful or not
  function transfer(address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="51" endline="53" pcid="3964">
    function balanceOf(address owner) public view returns (uint256 balance);

    function ownerOf(uint256 tokenId) public view returns (address owner);
</source>
<source file="systems/smart_contracts/Cholyz.sol" startline="66" endline="68" pcid="1713">
    function balanceOf(address _owner) public constant returns (uint256 balance);

    function transfer(address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/YOGEEToken.sol" startline="35" endline="36" pcid="8154">
    function balanceOf(address owner) public view returns (uint256 balance);
    function allowance(address owner, address spender) public view returns (uint remaining);
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="71" endline="72" pcid="4016">
     function balanceOf(address owner) external view returns (uint256 balance);
     function transfer(address to, uint256 value) external returns (bool success);
</source>
<source file="systems/smart_contracts/GLOLocker.sol" startline="8" endline="9" pcid="4112">
    function balanceOf(address _owner) public view returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="421" endline="426" pcid="5002">
    function balanceOf(address owner) public view returns (uint256 balance);

    /**
     * @dev Returns the owner of the NFT specified by `tokenId`.
     */
    function ownerOf(uint256 tokenId) public view returns (address owner);
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="13" endline="14" pcid="1537">
    function balanceOf(address _owner) public constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/BACD.sol" startline="60" endline="61" pcid="1015">
  function balanceOf(address _owner) public view returns (uint256 balance);
  function transfer(address _to, uint256 _value) public returns (bool success);
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="95" endline="96" pcid="3231">
    function balanceOf(address owner) public view returns (uint256 balance);
    function ownerOf(uint256 tokenId) public view returns (address owner);
</source>
<source file="systems/smart_contracts/VACCToken.sol" startline="54" endline="55" pcid="7618">
    function balanceOf(address tokenOwner) public constant returns (uint256 balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="50" endline="51" pcid="3056">
  function balanceOf(address _owner) public view returns (uint256 _balance);
  function ownerOf(uint256 _tokenId) public view returns (address _owner);
</source>
</class>

<class classid="83" nclones="3" nlines="2" similarity="100">
<source file="systems/smart_contracts/BACD.sol" startline="59" endline="60" pcid="1014">
  function totalSupply() public view returns (uint256 supply);
  function balanceOf(address _owner) public view returns (uint256 balance);
</source>
<source file="systems/smart_contracts/BTGS.sol" startline="12" endline="13" pcid="1536">
    function totalSupply() public constant returns (uint256 _totalSupply);
    function balanceOf(address _owner) public constant returns (uint256 balance);
</source>
<source file="systems/smart_contracts/GasStorage.sol" startline="59" endline="60" pcid="4012">
    function balanceOf() external view returns (uint256 balance);
} 
</source>
</class>

<class classid="84" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/BasicKYC.sol" startline="16" endline="17" pcid="1064">
  function getAttribute(address addr, uint8 attribute) external view returns (bool);
}
</source>
<source file="systems/smart_contracts/RestrictedTransferAgent.sol" startline="14" endline="15" pcid="6170">
  function getAttribute(address addr, uint8 attribute) external view returns (bool);
}
</source>
</class>

<class classid="85" nclones="2" nlines="4" similarity="100">
<source file="systems/smart_contracts/BasicKYC.sol" startline="36" endline="45" pcid="1065">
  function add(Role storage role, address addr)
    internal
  {
    role.bearer[addr] = true;
  }

  /**
   * @dev remove an address' access to this role
   */
  function remove(Role storage role, address addr)
</source>
<source file="systems/smart_contracts/BasicKYC.sol" startline="45" endline="55" pcid="1066">
  function remove(Role storage role, address addr)
    internal
  {
    role.bearer[addr] = false;
  }

  /**
   * @dev check if an address has this role
   * // reverts
   */
  function check(Role storage role, address addr)
</source>
</class>

<class classid="86" nclones="2" nlines="4" similarity="75">
<source file="systems/smart_contracts/BasicKYC.sol" startline="269" endline="283" pcid="1078">
  function getAttribute(address user, uint8 attribute) external view returns (bool) {
    return (attributes[user] & 2**attribute) > 0;
  }

  /**
   * @dev Set attributes an address. User can set their own attributes by using a
   *      signed message from server side.
   * @param signer Address of the server side signing key
   * @param newAttributes 256 bit integer for all the attributes for an address
   * @param nonce Value to prevent re-use of the server side signed data
   * @param v V of the server's key which was used to sign this transfer
   * @param r R of the server's key which was used to sign this transfer
   * @param s S of the server's key which was used to sign this transfer
   */
  function setMyAttributes(address signer, uint256 newAttributes, uint128 nonce, uint8 v, bytes32 r, bytes32 s) external {
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="97" endline="100" pcid="3978">
    function getTokenIdByIndex(address _game, uint8 _index) public view returns (uint256){
        return awardDatas[msg.sender].items[_game].tokenIds[_index];
    }
    function getGameBalance(address _game) public view returns (uint256){
</source>
</class>

<class classid="87" nclones="16" nlines="2" similarity="100">
<source file="systems/smart_contracts/BermToken.sol" startline="12" endline="13" pcid="1132">
    function migrate(address addr, uint256 berm) returns (bool success);
}
</source>
<source file="systems/smart_contracts/WFCToken.sol" startline="8" endline="9" pcid="7951">
    function migrate(address addr, uint256 nas) returns (bool success);
}
</source>
<source file="systems/smart_contracts/TeaToken.sol" startline="8" endline="9" pcid="7115">
    function transfer(address to, uint256 value) returns (bool success);
    function transferFrom(address from, address to, uint256 value) returns (bool success);
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="17" endline="18" pcid="3358">
    function transfer(address _to, uint256 _value) returns (bool success);
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="19" endline="20" pcid="3360">
    function approve(address _spender, uint256 _value) returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
</source>
<source file="systems/smart_contracts/BermToken.sol" startline="49" endline="50" pcid="1139">
    function approve(address _spender, uint256 _value) returns (bool success);
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/MpctLockupTeam.sol" startline="57" endline="59" pcid="5060">
    function transfer(address _to, uint256 _value) returns (bool success);
    // Get the account balance of another account with address _owner
    function balanceOf(address _owner) constant returns (uint256 balance);
</source>
<source file="systems/smart_contracts/GENEToken.sol" startline="8" endline="9" pcid="4065">
    function migrate(address addr, uint256 nas) returns (bool success);
}
</source>
<source file="systems/smart_contracts/BermToken.sol" startline="47" endline="48" pcid="1137">
    function transfer(address _to, uint256 _value) returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
</source>
<source file="systems/smart_contracts/GENEToken.sol" startline="37" endline="38" pcid="4070">
    function transfer(address _to, uint256 _value) returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
</source>
<source file="systems/smart_contracts/GENEToken.sol" startline="39" endline="40" pcid="4072">
    function approve(address _spender, uint256 _value) returns (bool success);
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/WFCToken.sol" startline="45" endline="46" pcid="7958">
    function approve(address _spender, uint256 _value) returns (bool success);
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/TeaToken.sol" startline="10" endline="12" pcid="7117">
    function approve(address spender, uint256 value) returns (bool success);

    function totalSupply() constant returns (uint256 totalSupply) {}
</source>
<source file="systems/smart_contracts/ZhongChaChainToken.sol" startline="8" endline="9" pcid="8212">
    function transfer(address to, uint256 value) returns (bool success);
    function transferFrom(address from, address to, uint256 value) returns (bool success);
</source>
<source file="systems/smart_contracts/ZhongChaChainToken.sol" startline="10" endline="12" pcid="8214">
    function approve(address spender, uint256 value) returns (bool success);

    function totalSupply() constant returns (uint256 totalSupply) {}
</source>
<source file="systems/smart_contracts/WFCToken.sol" startline="43" endline="44" pcid="7956">
    function transfer(address _to, uint256 _value) returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
</source>
</class>

<class classid="88" nclones="7" nlines="2" similarity="100">
<source file="systems/smart_contracts/BermToken.sol" startline="46" endline="47" pcid="1136">
    function balanceOf(address _owner) constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) returns (bool success);
</source>
<source file="systems/smart_contracts/GENEToken.sol" startline="36" endline="37" pcid="4069">
    function balanceOf(address _owner) constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) returns (bool success);
</source>
<source file="systems/smart_contracts/MpctLockupTeam.sol" startline="59" endline="60" pcid="5061">
    function balanceOf(address _owner) constant returns (uint256 balance);
}
</source>
<source file="systems/smart_contracts/ZhongChaChainToken.sol" startline="13" endline="14" pcid="8216">
    function balanceOf(address owner) constant returns (uint256 balance);
    function allowance(address owner, address spender) constant returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="177" endline="178" pcid="5525">
  function balanceOf(address owner) external returns (uint256 balance);
  function decimals() external returns (uint8 decimalPlaces);
</source>
<source file="systems/smart_contracts/TeaToken.sol" startline="13" endline="14" pcid="7119">
    function balanceOf(address owner) constant returns (uint256 balance);
    function allowance(address owner, address spender) constant returns (uint256 remaining);
</source>
<source file="systems/smart_contracts/WFCToken.sol" startline="42" endline="43" pcid="7955">
    function balanceOf(address _owner) constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) returns (bool success);
</source>
</class>

<class classid="89" nclones="6" nlines="2" similarity="100">
<source file="systems/smart_contracts/BermToken.sol" startline="48" endline="49" pcid="1138">
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
    function approve(address _spender, uint256 _value) returns (bool success);
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="20" endline="21" pcid="3361">
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
}
</source>
<source file="systems/smart_contracts/WFCToken.sol" startline="44" endline="45" pcid="7957">
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
    function approve(address _spender, uint256 _value) returns (bool success);
</source>
<source file="systems/smart_contracts/ZhongChaChainToken.sol" startline="9" endline="10" pcid="8213">
    function transferFrom(address from, address to, uint256 value) returns (bool success);
    function approve(address spender, uint256 value) returns (bool success);
</source>
<source file="systems/smart_contracts/TeaToken.sol" startline="9" endline="10" pcid="7116">
    function transferFrom(address from, address to, uint256 value) returns (bool success);
    function approve(address spender, uint256 value) returns (bool success);
</source>
<source file="systems/smart_contracts/GENEToken.sol" startline="38" endline="39" pcid="4071">
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
    function approve(address _spender, uint256 _value) returns (bool success);
</source>
</class>

<class classid="90" nclones="5" nlines="2" similarity="100">
<source file="systems/smart_contracts/BermToken.sol" startline="50" endline="51" pcid="1140">
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/GENEToken.sol" startline="40" endline="41" pcid="4073">
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/TeaToken.sol" startline="14" endline="16" pcid="7120">
    function allowance(address owner, address spender) constant returns (uint256 remaining);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
<source file="systems/smart_contracts/WFCToken.sol" startline="46" endline="47" pcid="7959">
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
</source>
<source file="systems/smart_contracts/ZhongChaChainToken.sol" startline="14" endline="16" pcid="8217">
    function allowance(address owner, address spender) constant returns (uint256 remaining);

    event Transfer(address indexed from, address indexed to, uint256 value);
</source>
</class>

<class classid="91" nclones="3" nlines="4" similarity="100">
<source file="systems/smart_contracts/BermToken.sol" startline="130" endline="135" pcid="1146">
    function formatDecimals(uint256 _value) internal returns (uint256 ) {
        return _value * 10 ** decimals;
    }

    // constructor
    function BermToken(
</source>
<source file="systems/smart_contracts/WFCToken.sol" startline="126" endline="131" pcid="7965">
    function formatDecimals(uint256 _value) internal returns (uint256 ) {
        return _value * 10 ** decimals;
    }
 
    // constructor
    function WFCToken (
</source>
<source file="systems/smart_contracts/GENEToken.sol" startline="120" endline="125" pcid="4079">
    function formatDecimals(uint256 _value) internal returns (uint256 ) {
        return _value * 10 ** decimals;
    }
 
    // constructor
    function GENEToken(
</source>
</class>

<class classid="92" nclones="3" nlines="3" similarity="100">
<source file="systems/smart_contracts/BTToken.sol" startline="14" endline="18" pcid="1552">
    function totalSupply() constant returns (uint supply) {}

    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) constant returns (uint balance) {}
</source>
<source file="systems/smart_contracts/P21.sol" startline="10" endline="14" pcid="5579">
    function totalSupply() constant returns (uint supply) {}

    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) constant returns (uint balance) {}
</source>
<source file="systems/smart_contracts/TECToken.sol" startline="10" endline="14" pcid="7127">
    function totalSupply() constant returns (uint supply) {}

    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) constant returns (uint balance) {}
</source>
</class>

<class classid="93" nclones="6" nlines="3" similarity="100">
<source file="systems/smart_contracts/BTToken.sol" startline="24" endline="31" pcid="1554">
    function transfer(address _to, uint _value) returns (bool success) {}

    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}
</source>
<source file="systems/smart_contracts/TECToken.sol" startline="33" endline="38" pcid="7131">
    function approve(address _spender, uint _value) returns (bool success) {}

    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) constant returns (uint remaining) {}
</source>
<source file="systems/smart_contracts/BTToken.sol" startline="37" endline="42" pcid="1556">
    function approve(address _spender, uint _value) returns (bool success) {}

    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) constant returns (uint remaining) {}
</source>
<source file="systems/smart_contracts/P21.sol" startline="33" endline="38" pcid="5583">
    function approve(address _spender, uint _value) returns (bool success) {}

    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) constant returns (uint remaining) {}
</source>
<source file="systems/smart_contracts/TECToken.sol" startline="20" endline="27" pcid="7129">
    function transfer(address _to, uint _value) returns (bool success) {}

    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}
</source>
<source file="systems/smart_contracts/P21.sol" startline="20" endline="27" pcid="5581">
    function transfer(address _to, uint _value) returns (bool success) {}

    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}
</source>
</class>

<class classid="94" nclones="3" nlines="3" similarity="100">
<source file="systems/smart_contracts/BTToken.sol" startline="31" endline="37" pcid="1555">
    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}

    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of wei to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint _value) returns (bool success) {}
</source>
<source file="systems/smart_contracts/P21.sol" startline="27" endline="33" pcid="5582">
    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}

    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of wei to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint _value) returns (bool success) {}
</source>
<source file="systems/smart_contracts/TECToken.sol" startline="27" endline="33" pcid="7130">
    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}

    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of wei to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint _value) returns (bool success) {}
</source>
</class>

<class classid="95" nclones="2" nlines="4" similarity="100">
<source file="systems/smart_contracts/CASTWEETTOKEN.sol" startline="241" endline="245" pcid="1645">
    function showLockState(address _holder) public view returns (bool, uint256, uint256) {
        return (locks[_holder], lockupInfo[_holder].lockupBalance, lockupInfo[_holder].releaseTime);
    }

    function distribute(address _to, uint256 _value) public onlyOwner returns (bool) {
</source>
<source file="systems/smart_contracts/KAKITOKEN.sol" startline="242" endline="246" pcid="4399">
    function showLockState(address _holder) public view returns (bool, uint256, uint256) {
        return (locks[_holder], lockupInfo[_holder].lockupBalance, lockupInfo[_holder].releaseTime);
    }

    function distribute(address _to, uint256 _value) public onlyOwner returns (bool) {
</source>
</class>

<class classid="96" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/Controller.sol" startline="15" endline="16" pcid="2004">
    function sweeperOf(address _token) external returns (address);
}
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="71" endline="72" pcid="5488">
  function balanceOf(address who) constant returns (uint);
  function transfer(address to, uint value);
</source>
</class>

<class classid="97" nclones="7" nlines="2" similarity="100">
<source file="systems/smart_contracts/Controller.sol" startline="118" endline="120" pcid="2015">
    function sweep(address token, uint amount) external returns (bool);

    Controller controller;
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="63" endline="73" pcid="2332">
    function approve(address _spender, uint _value) external returns (bool);


    /** 
     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`
     * 
     * @param _owner The address of the account owning tokens
     * @param _spender The address of the account able to transfer the tokens
     * @return Amount of remaining tokens allowed to spent
     */
    function allowance(address _owner, address _spender) external view returns (uint);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="42" endline="53" pcid="2330">
    function transfer(address _to, uint _value) external returns (bool);


    /** 
     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
     * 
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value The amount of token to be transferred
     * @return Whether the transfer was successful or not
     */
    function transferFrom(address _from, address _to, uint _value) external returns (bool);
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="336" endline="338" pcid="5887">
    function transfer(address to, uint value) public returns (bool);

    function approve(address spender, uint value) public returns (bool);
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="338" endline="340" pcid="5888">
    function approve(address spender, uint value) public returns (bool);

    function transferFrom(address from, address to, uint value) public returns (bool);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="121" endline="131" pcid="2337">
    function issue(address _to, uint _value) external returns (bool);


    /**
     * Burns `_value` tokens of `_from`
     *
     * @param _from The address that owns the tokens to be burned
     * @param _value The amount of tokens to be burned
     * @return Whether the tokens where sucessfully burned or not 
     */
    function burn(address _from, uint _value) external returns (bool);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="131" endline="132" pcid="2338">
    function burn(address _from, uint _value) external returns (bool);
}
</source>
</class>

<class classid="98" nclones="3" nlines="3" similarity="100">
<source file="systems/smart_contracts/CouncilVesting.sol" startline="63" endline="64" pcid="2025">
    function totalSupply() constant returns (uint256 totalSupply) {}
    function balanceOf(address _owner) constant returns (uint256 balance) {}
</source>
<source file="systems/smart_contracts/ZhongChaChainToken.sol" startline="12" endline="13" pcid="8215">
    function totalSupply() constant returns (uint256 totalSupply) {}
    function balanceOf(address owner) constant returns (uint256 balance);
</source>
<source file="systems/smart_contracts/TeaToken.sol" startline="12" endline="13" pcid="7118">
    function totalSupply() constant returns (uint256 totalSupply) {}
    function balanceOf(address owner) constant returns (uint256 balance);
</source>
</class>

<class classid="99" nclones="2" nlines="3" similarity="100">
<source file="systems/smart_contracts/CouncilVesting.sol" startline="69" endline="70" pcid="2028">
    function transfer(address _to, uint256 _value) returns (bool success) {}
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
</source>
<source file="systems/smart_contracts/CouncilVesting.sol" startline="71" endline="72" pcid="2030">
    function approve(address _spender, uint256 _value) returns (bool success) {}
}
</source>
</class>

<class classid="100" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="53" endline="63" pcid="2331">
    function transferFrom(address _from, address _to, uint _value) external returns (bool);


    /** 
     * `msg.sender` approves `_spender` to spend `_value` tokens
     * 
     * @param _spender The address of the account able to transfer the tokens
     * @param _value The amount of tokens to be approved for transfer
     * @return Whether the approval was successful or not
     */
    function approve(address _spender, uint _value) external returns (bool);
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="30" endline="31" pcid="4802">
    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);
}
</source>
<source file="systems/smart_contracts/ProxyERC20.sol" startline="340" endline="343" pcid="5889">
    function transferFrom(address from, address to, uint value) public returns (bool);

    // ERC20 Optional
    function name() public view returns (string);
</source>
<source file="systems/smart_contracts/MiniMeTokenFactory.sol" startline="22" endline="30" pcid="4801">
    function onTransfer(address _from, address _to, uint _amount) external returns(bool);

    /// @notice Notifies the controller about an approval allowing the
    ///  controller to react if desired
    /// @param _owner The address that calls `approve()`
    /// @param _spender The spender in the `approve()` call
    /// @param _amount The amount in the `approve()` call
    /// @return False if the controller does not authorize the approval
    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);
</source>
</class>

<class classid="101" nclones="9" nlines="2" similarity="100">
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="274" endline="282" pcid="2346">
    function getObserverAtIndex(uint _index) external view returns (address);


    /**
     * Register `_observer` as an observer
     * 
     * @param _observer The account to add as an observer
     */
    function registerObserver(address _observer) external;
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2321" endline="2322" pcid="6906">
    function amountReceivedFromExchange(uint value) external view returns (uint);
    function amountReceivedFromTransfer(uint value) external view returns (uint);
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2322" endline="2323" pcid="6907">
    function amountReceivedFromTransfer(uint value) external view returns (uint);
    function feePaid(bytes4 currencyKey, uint amount) external;
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2326" endline="2327" pcid="6911">
    function transferFeeIncurred(uint value) public view returns (uint);
}
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="14" endline="16" pcid="2902">
    function getHour(uint timestamp) external pure returns (uint8);

    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) external pure returns (uint);
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="12" endline="14" pcid="2901">
    function getDay(uint timestamp) external pure returns (uint8);

    function getHour(uint timestamp) external pure returns (uint8);
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="10" endline="12" pcid="2900">
    function getMonth(uint timestamp) external pure returns (uint8);

    function getDay(uint timestamp) external pure returns (uint8);
</source>
<source file="systems/smart_contracts/EJackpot.sol" startline="8" endline="10" pcid="2899">
    function getYear(uint timestamp) external pure returns (uint16);

    function getMonth(uint timestamp) external pure returns (uint8);
</source>
<source file="systems/smart_contracts/DcorpDissolvementProposal.sol" startline="447" endline="455" pcid="2357">
    function getOwnerAt(uint _index) public view returns (address);


     /**
     * Adds `_account` as a new owner
     *
     * @param _account The account to add as an owner
     */
    function addOwner(address _account) public;
</source>
</class>

<class classid="102" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/DefaultService.sol" startline="9" endline="11" pcid="2384">
    function check(address _token,address _spender,address _from,address _to,uint256 _amount) public view returns (uint8);

}
</source>
<source file="systems/smart_contracts/PropertyToken.sol" startline="205" endline="207" pcid="5849">
    function check(address _token,address _spender,address _from,address _to,uint256 _amount) public view returns (uint8);

}
</source>
</class>

<class classid="103" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/EstateRegistry.sol" startline="21" endline="25" pcid="3055">
  function supportsInterface(bytes4 _interfaceId)
    external
    view
    returns (bool);
}
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="106" endline="107" pcid="4985">
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
</source>
<source file="systems/smart_contracts/PoaOperator.sol" startline="527" endline="528" pcid="5700">
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="18" endline="19" pcid="3227">
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
</source>
</class>

<class classid="104" nclones="9" nlines="2" similarity="100">
<source file="systems/smart_contracts/EstateRegistry.sol" startline="51" endline="52" pcid="3057">
  function ownerOf(uint256 _tokenId) public view returns (address _owner);
  function exists(uint256 _tokenId) public view returns (bool _exists);
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="55" endline="58" pcid="3060">
  function getApproved(uint256 _tokenId)
    public view returns (address _operator);

  function setApprovalForAll(address _operator, bool _approved) public;
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="958" endline="962" pcid="3117">
  function ownerOf(uint256 _tokenId) public view returns (address _owner); // from ERC721

  // Events

  event CreateEstate(
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="96" endline="98" pcid="3232">
    function ownerOf(uint256 tokenId) public view returns (address owner);

    function approve(address to, uint256 tokenId) public;
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="99" endline="101" pcid="3234">
    function getApproved(uint256 tokenId) public view returns (address operator);

    function setApprovalForAll(address operator, bool _approved) public;
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="451" endline="453" pcid="5007">
    function getApproved(uint256 tokenId) public view returns (address operator);

    function setApprovalForAll(address operator, bool _approved) public;
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="426" endline="440" pcid="5003">
    function ownerOf(uint256 tokenId) public view returns (address owner);

    /**
     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to
     * another (`to`).
     *
     *
     *
     * Requirements:
     * - `from`, `to` cannot be zero.
     * - `tokenId` must be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this
     * NFT by either {approve} or {setApprovalForAll}.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) public;
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="57" endline="59" pcid="3967">
    function getApproved(uint256 tokenId) public view returns (address operator);

    function setApprovalForAll(address operator, bool _approved) public;
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="53" endline="55" pcid="3965">
    function ownerOf(uint256 tokenId) public view returns (address owner);

    function approve(address to, uint256 tokenId) public;
</source>
</class>

<class classid="105" nclones="5" nlines="2" similarity="100">
<source file="systems/smart_contracts/EstateRegistry.sol" startline="58" endline="59" pcid="3061">
  function setApprovalForAll(address _operator, bool _approved) public;
  function isApprovedForAll(address _owner, address _operator)
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="101" endline="102" pcid="3235">
    function setApprovalForAll(address operator, bool _approved) public;
    function isApprovedForAll(address owner, address operator) public view returns (bool);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="165" endline="166" pcid="5520">
  function setFulfillmentPermission(address node, bool allowed) external;
  function withdraw(address recipient, uint256 amount) external;
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="453" endline="454" pcid="5008">
    function setApprovalForAll(address operator, bool _approved) public;
    function isApprovedForAll(address owner, address operator) public view returns (bool);
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="59" endline="61" pcid="3968">
    function setApprovalForAll(address operator, bool _approved) public;

    function isApprovedForAll(address owner, address operator) public view returns (bool);
</source>
</class>

<class classid="106" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/EstateRegistry.sol" startline="83" endline="91" pcid="3067">
  function tokenOfOwnerByIndex(
    address _owner,
    uint256 _index
  )
    public
    view
    returns (uint256 _tokenId);

  function tokenByIndex(uint256 _index) public view returns (uint256);
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="922" endline="924" pcid="5041">
    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);

    function tokenByIndex(uint256 index) public view returns (uint256);
</source>
</class>

<class classid="107" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/EstateRegistry.sol" startline="100" endline="101" pcid="3069">
  function name() external view returns (string _name);
  function symbol() external view returns (string _symbol);
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="101" endline="102" pcid="3070">
  function symbol() external view returns (string _symbol);
  function tokenURI(uint256 _tokenId) public view returns (string);
</source>
</class>

<class classid="108" nclones="5" nlines="4" similarity="75">
<source file="systems/smart_contracts/EstateRegistry.sol" startline="456" endline="480" pcid="3089">
  function safeTransferFrom(
    address _from,
    address _to,
    uint256 _tokenId
  )
    public
    canTransfer(_tokenId)
  {
    // solium-disable-next-line arg-overflow
    safeTransferFrom(_from, _to, _tokenId, "");
  }

  /**
   * @dev Safely transfers the ownership of a given token ID to another address
   * If the target address is a contract, it must implement `onERC721Received`,
   * which is called upon a safe transfer, and return the magic value
   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,
   * the transfer is reverted.
   * Requires the msg sender to be the owner, approved, or operator
   * @param _from current owner of the token
   * @param _to address to receive the ownership of the given token ID
   * @param _tokenId uint256 ID of the token to be transferred
   * @param _data bytes data to send along with a safe transfer check
   */
  function safeTransferFrom(
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1366" endline="1384" pcid="3145">
  function safeTransferManyFrom(address from, address to, uint256[] estateIds) public {
    safeTransferManyFrom(
      from,
      to,
      estateIds,
      ""
    );
  }

  /**
   * @dev Safely transfers the ownership of multiple Estate IDs to another address
   * @dev Delegates to safeTransferFrom for each transfer
   * @dev Requires the msg sender to be the owner, approved, or operator
   * @param from current owner of the token
   * @param to address to receive the ownership of the given token ID
   * @param estateIds uint256 array of IDs to be transferred
   * @param data bytes data to send along with a safe transfer check
  */
  function safeTransferManyFrom(
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="611" endline="627" pcid="5018">
    function safeTransferFrom(address from, address to, uint256 tokenId) public {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev Safely transfers the ownership of a given token ID to another address
     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},
     * which is called upon a safe transfer, and return the magic value
     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,
     * the transfer is reverted.
     * Requires the msg.sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes data to send along with a safe transfer check
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="756" endline="772" pcid="3289">
    function safeTransferFrom(address from, address to, uint256 tokenId) public {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev Safely transfers the ownership of a given token ID to another address
     * If the target address is a contract, it must implement `onERC721Received`,
     * which is called upon a safe transfer, and return the magic value
     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,
     * the transfer is reverted.
     * Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes data to send along with a safe transfer check
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
</source>
<source file="systems/smart_contracts/Exchange.sol" startline="314" endline="320" pcid="3388">
    function addBalance(address token, address user, uint256 amount) private
    {
        updateBalance(token, user, safeAdd(balanceOf(token, user), amount));
    }

    // Decreases user balance
    function subBalance(address token, address user, uint256 amount) private
</source>
</class>

<class classid="109" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1011" endline="1012" pcid="3123">
  function ownerOf(uint256 tokenId) public returns (address);
  function safeTransferFrom(address, address, uint256) public;
</source>
<source file="systems/smart_contracts/EstateRegistry.sol" startline="1013" endline="1014" pcid="3125">
  function updateOperator(uint256 landId) public returns (address);
}
</source>
</class>

<class classid="110" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/etherstar.sol" startline="82" endline="84" pcid="3230">
    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)
    public returns (bytes4);
}
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="405" endline="407" pcid="5001">
    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)
    public returns (bytes4);
}
</source>
</class>

<class classid="111" nclones="3" nlines="2" similarity="100">
<source file="systems/smart_contracts/etherstar.sol" startline="107" endline="108" pcid="3239">
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="457" endline="458" pcid="5010">
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
}
</source>
<source file="systems/smart_contracts/Gacha.sol" startline="69" endline="70" pcid="3973">
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
}
</source>
</class>

<class classid="112" nclones="18" nlines="2" similarity="100">
<source file="systems/smart_contracts/etherstar.sol" startline="115" endline="116" pcid="3240">
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="805" endline="806" pcid="5031">
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
</source>
<source file="systems/smart_contracts/etherstar.sol" startline="116" endline="117" pcid="3241">
    function symbol() external view returns (string memory);
    function tokenURI(uint256 tokenId) external view returns (string memory);
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="806" endline="807" pcid="5032">
    function symbol() external view returns (string memory);
    function tokenURI(uint256 tokenId) external view returns (string memory);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="769" endline="770" pcid="3875">
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="541" endline="542" pcid="7079">
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="768" endline="769" pcid="3874">
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="540" endline="541" pcid="7078">
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="541" endline="542" pcid="3824">
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="540" endline="541" pcid="3823">
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="73" endline="74" pcid="6977">
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint256);
</source>
<source file="systems/smart_contracts/TDCToken.sol" startline="72" endline="73" pcid="6976">
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="193" endline="194" pcid="3440">
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
</source>
<source file="systems/smart_contracts/Factory.sol" startline="194" endline="195" pcid="3441">
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="145" endline="146" pcid="5341">
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
</source>
<source file="systems/smart_contracts/NewVoken.sol" startline="144" endline="145" pcid="5340">
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="187" endline="188" pcid="7785">
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="186" endline="187" pcid="7784">
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
</source>
</class>

<class classid="113" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/etherstar.sol" startline="117" endline="118" pcid="3242">
    function tokenURI(uint256 tokenId) external view returns (string memory);
}
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="807" endline="808" pcid="5033">
    function tokenURI(uint256 tokenId) external view returns (string memory);
}
</source>
</class>

<class classid="114" nclones="3" nlines="4" similarity="75">
<source file="systems/smart_contracts/Ethertime.sol" startline="662" endline="664" pcid="3336">
    function finalizeEmptyLottery(Lottery storage lottery) private {
    }
    function finalizeOnePlayerLottery(Lottery storage lottery) private {
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="339" endline="342" pcid="4998">
    function decrement(Counter storage counter) internal {
        counter._value = counter._value.sub(1);
    }
}
</source>
<source file="systems/smart_contracts/Moshlink.sol" startline="335" endline="339" pcid="4997">
    function increment(Counter storage counter) internal {
        counter._value += 1;
    }

    function decrement(Counter storage counter) internal {
</source>
</class>

<class classid="115" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/Factory.sol" startline="261" endline="262" pcid="3490">
    function newToken(address, string calldata, string calldata, address) external returns(address);
    function setFactoryAddress(address) external;
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="744" endline="745" pcid="7109">
    function newToken(address, string calldata, string calldata, address) external returns(address);
    function setFactoryAddress(address) external;
</source>
</class>

<class classid="116" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/Factory.sol" startline="268" endline="270" pcid="3493">
    function newFundingPanel(address, string calldata, bytes32, uint256, uint256,
                            address, uint256, address, address, uint) external returns(address);
    function setFactoryAddress(address) external;
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="1134" endline="1136" pcid="3906">
    function newFundingPanel(address, string calldata, bytes32, uint256, uint256,
                            address, uint256, address, address, uint) external returns(address);
    function setFactoryAddress(address) external;
</source>
</class>

<class classid="117" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/FlatPricingExt.sol" startline="97" endline="110" pcid="3635">
  function updateRate(uint newOneTokenInWei) public;

  /**
   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.
   *
   *
   * @param value - What is the value of the transaction send in as wei
   * @param tokensSold - how much tokens have been sold this far
   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale
   * @param msgSender - who is the investor of this transaction
   * @param decimals - how many decimal units the token has
   * @return Amount of tokens the investor receives
   */
  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);
</source>
<source file="systems/smart_contracts/Synthetix.sol" startline="2325" endline="2326" pcid="6910">
    function rewardsMinted(uint amount) external;
    function transferFeeIncurred(uint value) public view returns (uint);
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="258" endline="271" pcid="6089">
  function updateRate(uint newOneTokenInWei) public;

  /**
   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.
   *
   *
   * @param value - What is the value of the transaction send in as wei
   * @param tokensSold - how much tokens have been sold this far
   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale
   * @param msgSender - who is the investor of this transaction
   * @param decimals - how many decimal units the token has
   * @return Amount of tokens the investor receives
   */
  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="263" endline="276" pcid="4849">
  function updateRate(uint newOneTokenInWei) public;

  /**
   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.
   *
   *
   * @param value - What is the value of the transaction send in as wei
   * @param tokensSold - how much tokens have been sold this far
   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale
   * @param msgSender - who is the investor of this transaction
   * @param decimals - how many decimal units the token has
   * @return Amount of tokens the investor receives
   */
  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);
</source>
</class>

<class classid="118" nclones="3" nlines="2" similarity="100">
<source file="systems/smart_contracts/FlatPricingExt.sol" startline="110" endline="111" pcid="3636">
  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);
}
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="271" endline="272" pcid="6090">
  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);
}
</source>
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="276" endline="277" pcid="4850">
  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);
}
</source>
</class>

<class classid="119" nclones="4" nlines="4" similarity="75">
<source file="systems/smart_contracts/Fortune999.sol" startline="93" endline="97" pcid="3701">
function div(percent storage p, uint a) internal view returns (uint) {
return a/p.num*p.den;
}

function sub(percent storage p, uint a) internal view returns (uint) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="120" endline="124" pcid="3706">
function mdiv(percent memory p, uint a) internal pure returns (uint) {
return a/p.num*p.den;
}

function msub(percent memory p, uint a) internal pure returns (uint) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="105" endline="109" pcid="3703">
function add(percent storage p, uint a) internal view returns (uint) {
return a + mul(p, a);
}

function toMemory(percent storage p) internal view returns (Percent.percent memory) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="132" endline="135" pcid="3708">
function madd(percent memory p, uint a) internal pure returns (uint) {
return a + mmul(p, a);
}
}
</source>
</class>

<class classid="120" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/Fortune999.sol" startline="238" endline="239" pcid="3718">
function investorShortInfo(address addr) public view returns(uint value, uint refBonus);
}
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="243" endline="244" pcid="3719">
function investorInfo(address addr) public view returns(uint investment, uint paymentTime);
}
</source>
</class>

<class classid="121" nclones="2" nlines="4" similarity="100">
<source file="systems/smart_contracts/Fortune999.sol" startline="561" endline="565" pcid="3743">
function advertisingPercent() public view returns(uint numerator, uint denominator) {
(numerator, denominator) = (m_advertisingPercent.num, m_advertisingPercent.den);
}

function adminsPercent() public view returns(uint numerator, uint denominator) {
</source>
<source file="systems/smart_contracts/Fortune999.sol" startline="565" endline="569" pcid="3744">
function adminsPercent() public view returns(uint numerator, uint denominator) {
(numerator, denominator) = (m_adminsPercent.num, m_adminsPercent.den);
}

function investorInfo(address investorAddr)public view returns(uint investment, uint paymentTime, bool isReferral) {
</source>
</class>

<class classid="122" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/FPDeployer.sol" startline="549" endline="550" pcid="3832">
    function checkTransferAllowed (address, address, uint256) external view returns (byte);
    function checkTransferFromAllowed (address, address, uint256) external view returns (byte);
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="550" endline="551" pcid="3833">
    function checkTransferFromAllowed (address, address, uint256) external view returns (byte);
    function checkMintAllowed (address, uint256) external pure returns (byte);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="550" endline="551" pcid="7088">
    function checkTransferFromAllowed (address, address, uint256) external view returns (byte);
    function checkMintAllowed (address, uint256) external pure returns (byte);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="549" endline="550" pcid="7087">
    function checkTransferAllowed (address, address, uint256) external view returns (byte);
    function checkTransferFromAllowed (address, address, uint256) external view returns (byte);
</source>
</class>

<class classid="123" nclones="4" nlines="2" similarity="100">
<source file="systems/smart_contracts/FPDeployer.sol" startline="551" endline="552" pcid="3834">
    function checkMintAllowed (address, uint256) external pure returns (byte);
    function checkBurnAllowed (address, uint256) external pure returns (byte);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="551" endline="552" pcid="7089">
    function checkMintAllowed (address, uint256) external pure returns (byte);
    function checkBurnAllowed (address, uint256) external pure returns (byte);
</source>
<source file="systems/smart_contracts/TDeployer.sol" startline="552" endline="553" pcid="7090">
    function checkBurnAllowed (address, uint256) external pure returns (byte);
}
</source>
<source file="systems/smart_contracts/FPDeployer.sol" startline="552" endline="553" pcid="3835">
    function checkBurnAllowed (address, uint256) external pure returns (byte);
}
</source>
</class>

<class classid="124" nclones="2" nlines="4" similarity="75">
<source file="systems/smart_contracts/FPDeployer.sol" startline="1033" endline="1040" pcid="3897">
    function getOwnerData() external view returns (string memory, bytes32) {
        return (setDocURL, setDocHash);
    }

    /**
     * @dev set the owner URL and hash
     */
    function setOwnerData(string calldata _dataURL, bytes32 _dataHash) external onlyOwner {
</source>
<source file="systems/smart_contracts/VokenShareholders.sol" startline="243" endline="250" pcid="7797">
    function owner() public view returns (address, address) {
        return (_owner, _newOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
</source>
</class>

<class classid="125" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/GNB.sol" startline="38" endline="40" pcid="4127">
    function checkRate(uint unlockIndex) public constant returns (uint rate_);

    event Transfer(address indexed from, address indexed to, uint tokens);
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="147" endline="148" pcid="5151">
    function currentRuling(uint _disputeID) public view returns(uint ruling);
}
</source>
</class>

<class classid="126" nclones="2" nlines="4" similarity="100">
<source file="systems/smart_contracts/LuckyStrikeTokens.sol" startline="302" endline="313" pcid="4582">
    function approveAllAndCall(address _spender, bytes _extraData) public returns (bool success) {
        return approveAndCall(_spender, balanceOf[msg.sender], _extraData);
    }

    /* https://github.com/ethereum/EIPs/issues/677
    * transfer tokens with additional info to another smart contract, and calls its correspondent function
    * @param address _to - another smart contract address
    * @param uint256 _value - number of tokens
    * @param bytes _extraData - data to send to another contract
    * > this may be used to convert pre-ICO tokens to ICO tokens
    */
    function transferAndCall(address _to, uint256 _value, bytes _extraData) public returns (bool success){
</source>
<source file="systems/smart_contracts/LuckyStrikeTokens.sol" startline="327" endline="333" pcid="4584">
    function transferAllAndCall(address _to, bytes _extraData) public returns (bool success){
        return transferAndCall(_to, balanceOf[msg.sender], _extraData);
    }

    /* ========= MINT TOKENS: */

    event NewTokensMinted(
</source>
</class>

<class classid="127" nclones="4" nlines="4" similarity="100">
<source file="systems/smart_contracts/MBFToken.sol" startline="333" endline="337" pcid="4751">
    function wmul(uint x, uint y) internal pure returns (uint z) {
        z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;
    }

    function wdiv(uint x, uint y) internal pure returns (uint z) {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="345" endline="348" pcid="4754">
    function rmul(uint x, uint y) internal pure returns (uint z) {
        z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;
    }
}
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="341" endline="345" pcid="4753">
    function rdiv(uint x, uint y) internal pure returns (uint z) {
        z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;
    }

    function rmul(uint x, uint y) internal pure returns (uint z) {
</source>
<source file="systems/smart_contracts/MBFToken.sol" startline="337" endline="341" pcid="4752">
    function wdiv(uint x, uint y) internal pure returns (uint z) {
        z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;
    }

    function rdiv(uint x, uint y) internal pure returns (uint z) {
</source>
</class>

<class classid="128" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="309" endline="312" pcid="4853">
  function distributeReservedTokens(uint reservedTokensDistributionBatch);

  /** Called once by crowdsale finalize() if the sale was success. */
  function finalizeCrowdsale();
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="304" endline="307" pcid="6093">
  function distributeReservedTokens(uint reservedTokensDistributionBatch);

  /** Called once by crowdsale finalize() if the sale was success. */
  function finalizeCrowdsale();
</source>
</class>

<class classid="129" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="312" endline="314" pcid="4854">
  function finalizeCrowdsale();

}
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="307" endline="309" pcid="6094">
  function finalizeCrowdsale();

}
</source>
</class>

<class classid="130" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="937" endline="939" pcid="4888">
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) public constant returns (bool limitBroken);

  function isBreakingInvestorCap(address receiver, uint tokenAmount) public constant returns (bool limitBroken);
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="932" endline="934" pcid="6128">
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) public constant returns (bool limitBroken);

  function isBreakingInvestorCap(address receiver, uint tokenAmount) public constant returns (bool limitBroken);
</source>
</class>

<class classid="131" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/MintedTokenCappedCrowdsaleExt.sol" startline="939" endline="944" pcid="4889">
  function isBreakingInvestorCap(address receiver, uint tokenAmount) public constant returns (bool limitBroken);

  /**
   * Check if the current crowdsale is full and we can no longer sell any tokens.
   */
  function isCrowdsaleFull() public constant returns (bool);
</source>
<source file="systems/smart_contracts/ReservedTokensFinalizeAgent.sol" startline="934" endline="939" pcid="6129">
  function isBreakingInvestorCap(address receiver, uint tokenAmount) public constant returns (bool limitBroken);

  /**
   * Check if the current crowdsale is full and we can no longer sell any tokens.
   */
  function isCrowdsaleFull() public constant returns (bool);
</source>
</class>

<class classid="132" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/Mlgc.sol" startline="12" endline="13" pcid="4916">
	function onTokenTransfer(address from, uint256 amount, bytes memory data) public returns (bool success);
}
</source>
<source file="systems/smart_contracts/Wolfs.sol" startline="12" endline="13" pcid="8034">
	function onTokenTransfer(address from, uint256 amount, bytes memory data) public returns (bool success);
}
</source>
</class>

<class classid="133" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="193" endline="194" pcid="5152">
    function rule(uint _disputeID, uint _ruling) public;
}
</source>
<source file="systems/smart_contracts/MultipleArbitrableTokenTransaction.sol" startline="235" endline="236" pcid="5154">
    function executeRuling(uint _disputeID, uint _ruling) internal;
}
</source>
</class>

<class classid="134" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/OMGToken.sol" startline="72" endline="73" pcid="5489">
  function transfer(address to, uint value);
  event Transfer(address indexed from, address indexed to, uint value);
</source>
<source file="systems/smart_contracts/OMGToken.sol" startline="126" endline="127" pcid="5494">
  function approve(address spender, uint value);
  event Approval(address indexed owner, address indexed spender, uint value);
</source>
</class>

<class classid="135" nclones="2" nlines="2" similarity="100">
<source file="systems/smart_contracts/Oracle.sol" startline="181" endline="182" pcid="5529">
  function name() external returns (string tokenName);
  function symbol() external returns (string tokenSymbol);
</source>
<source file="systems/smart_contracts/Oracle.sol" startline="182" endline="183" pcid="5530">
  function symbol() external returns (string tokenSymbol);
  function totalSupply() external returns (uint256 totalTokensIssued);
</source>
</class>

</clones>
